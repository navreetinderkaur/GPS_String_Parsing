
prog8125_lcd_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800cd08  0800cd08  0001cd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d118  0800d118  0001d118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d11c  0800d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c4  20000000  0800d120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000206c4  2**0
                  CONTENTS
  8 .bss          00000bc4  200006c4  200006c4  000206c4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001288  20001288  000206c4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY
 11 .debug_line   00007acd  00000000  00000000  000206f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000146bc  00000000  00000000  000281c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f04  00000000  00000000  0003c87d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  0003f788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  000407a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000b64c  00000000  00000000  00041670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004b77  00000000  00000000  0004ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00051833  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003e74  00000000  00000000  000518b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000006c  00000000  00000000  00055728  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000000e3  00000000  00000000  00055794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c4 	.word	0x200006c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ccec 	.word	0x0800ccec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006c8 	.word	0x200006c8
 80001cc:	0800ccec 	.word	0x0800ccec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97e 	b.w	8000f94 <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460e      	mov	r6, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9d08      	ldr	r5, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d150      	bne.n	8000d62 <__udivmoddi4+0xb2>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96c      	bls.n	8000da0 <__udivmoddi4+0xf0>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0420 	rsb	r4, lr, #32
 8000cd4:	fa20 f404 	lsr.w	r4, r0, r4
 8000cd8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000cdc:	ea44 0c06 	orr.w	ip, r4, r6
 8000ce0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	fbbc f0f9 	udiv	r0, ip, r9
 8000cf2:	fa1f f887 	uxth.w	r8, r7
 8000cf6:	fb09 c610 	mls	r6, r9, r0, ip
 8000cfa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cfe:	fb00 f308 	mul.w	r3, r0, r8
 8000d02:	42b3      	cmp	r3, r6
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x6a>
 8000d06:	19f6      	adds	r6, r6, r7
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 8122 	bcs.w	8000f54 <__udivmoddi4+0x2a4>
 8000d10:	42b3      	cmp	r3, r6
 8000d12:	f240 811f 	bls.w	8000f54 <__udivmoddi4+0x2a4>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443e      	add	r6, r7
 8000d1a:	1af6      	subs	r6, r6, r3
 8000d1c:	b2a2      	uxth	r2, r4
 8000d1e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d22:	fb09 6613 	mls	r6, r9, r3, r6
 8000d26:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d2a:	fb03 f808 	mul.w	r8, r3, r8
 8000d2e:	45a0      	cmp	r8, r4
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x96>
 8000d32:	19e4      	adds	r4, r4, r7
 8000d34:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d38:	f080 810a 	bcs.w	8000f50 <__udivmoddi4+0x2a0>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f240 8107 	bls.w	8000f50 <__udivmoddi4+0x2a0>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ebc8 0404 	rsb	r4, r8, r4
 8000d4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d062      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d54:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d58:	2300      	movs	r3, #0
 8000d5a:	602c      	str	r4, [r5, #0]
 8000d5c:	606b      	str	r3, [r5, #4]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0xc6>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d055      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d70:	4608      	mov	r0, r1
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f183 	clz	r1, r3
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	f040 8090 	bne.w	8000ea0 <__udivmoddi4+0x1f0>
 8000d80:	42b3      	cmp	r3, r6
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xda>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	46b4      	mov	ip, r6
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d040      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	b912      	cbnz	r2, 8000da8 <__udivmoddi4+0xf8>
 8000da2:	2701      	movs	r7, #1
 8000da4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000da8:	fab7 fe87 	clz	lr, r7
 8000dac:	f1be 0f00 	cmp.w	lr, #0
 8000db0:	d135      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db2:	1bf3      	subs	r3, r6, r7
 8000db4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc2:	0c22      	lsrs	r2, r4, #16
 8000dc4:	fb08 3610 	mls	r6, r8, r0, r3
 8000dc8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dcc:	fb0c f300 	mul.w	r3, ip, r0
 8000dd0:	42b3      	cmp	r3, r6
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19f6      	adds	r6, r6, r7
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42b3      	cmp	r3, r6
 8000dde:	f200 80ce 	bhi.w	8000f7e <__udivmoddi4+0x2ce>
 8000de2:	4610      	mov	r0, r2
 8000de4:	1af6      	subs	r6, r6, r3
 8000de6:	b2a2      	uxth	r2, r4
 8000de8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000dec:	fb08 6613 	mls	r6, r8, r3, r6
 8000df0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000df4:	fb0c fc03 	mul.w	ip, ip, r3
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b5 	bhi.w	8000f74 <__udivmoddi4+0x2c4>
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	ebcc 0404 	rsb	r4, ip, r4
 8000e10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e14:	e79c      	b.n	8000d50 <__udivmoddi4+0xa0>
 8000e16:	4629      	mov	r1, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0120 	rsb	r1, lr, #32
 8000e22:	fa06 f30e 	lsl.w	r3, r6, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f901 	lsr.w	r9, r0, r1
 8000e2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e32:	40ce      	lsrs	r6, r1
 8000e34:	ea49 0903 	orr.w	r9, r9, r3
 8000e38:	fbb6 faf8 	udiv	sl, r6, r8
 8000e3c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e40:	fb08 661a 	mls	r6, r8, sl, r6
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e4c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e50:	429a      	cmp	r2, r3
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1be>
 8000e58:	19db      	adds	r3, r3, r7
 8000e5a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e5e:	f080 8087 	bcs.w	8000f70 <__udivmoddi4+0x2c0>
 8000e62:	429a      	cmp	r2, r3
 8000e64:	f240 8084 	bls.w	8000f70 <__udivmoddi4+0x2c0>
 8000e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e6c:	443b      	add	r3, r7
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	fa1f f989 	uxth.w	r9, r9
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000e80:	fb01 f60c 	mul.w	r6, r1, ip
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x1e8>
 8000e88:	19db      	adds	r3, r3, r7
 8000e8a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e8e:	d26b      	bcs.n	8000f68 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d969      	bls.n	8000f68 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	443b      	add	r3, r7
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000e9e:	e78e      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000ea0:	f1c1 0e20 	rsb	lr, r1, #32
 8000ea4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	4323      	orrs	r3, r4
 8000eac:	fa20 f70e 	lsr.w	r7, r0, lr
 8000eb0:	fa06 f401 	lsl.w	r4, r6, r1
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ebc:	433c      	orrs	r4, r7
 8000ebe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000ec2:	0c27      	lsrs	r7, r4, #16
 8000ec4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000ec8:	fa1f f883 	uxth.w	r8, r3
 8000ecc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000ed0:	fb09 f708 	mul.w	r7, r9, r8
 8000ed4:	42b7      	cmp	r7, r6
 8000ed6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eda:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x242>
 8000ee0:	18f6      	adds	r6, r6, r3
 8000ee2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee6:	d241      	bcs.n	8000f6c <__udivmoddi4+0x2bc>
 8000ee8:	42b7      	cmp	r7, r6
 8000eea:	d93f      	bls.n	8000f6c <__udivmoddi4+0x2bc>
 8000eec:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef0:	441e      	add	r6, r3
 8000ef2:	1bf6      	subs	r6, r6, r7
 8000ef4:	b2a0      	uxth	r0, r4
 8000ef6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000efa:	fb0c 6614 	mls	r6, ip, r4, r6
 8000efe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000f02:	fb04 f808 	mul.w	r8, r4, r8
 8000f06:	45b8      	cmp	r8, r7
 8000f08:	d907      	bls.n	8000f1a <__udivmoddi4+0x26a>
 8000f0a:	18ff      	adds	r7, r7, r3
 8000f0c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f10:	d228      	bcs.n	8000f64 <__udivmoddi4+0x2b4>
 8000f12:	45b8      	cmp	r8, r7
 8000f14:	d926      	bls.n	8000f64 <__udivmoddi4+0x2b4>
 8000f16:	3c02      	subs	r4, #2
 8000f18:	441f      	add	r7, r3
 8000f1a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000f1e:	ebc8 0707 	rsb	r7, r8, r7
 8000f22:	fba0 8902 	umull	r8, r9, r0, r2
 8000f26:	454f      	cmp	r7, r9
 8000f28:	4644      	mov	r4, r8
 8000f2a:	464e      	mov	r6, r9
 8000f2c:	d314      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f2e:	d029      	beq.n	8000f84 <__udivmoddi4+0x2d4>
 8000f30:	b365      	cbz	r5, 8000f8c <__udivmoddi4+0x2dc>
 8000f32:	ebba 0304 	subs.w	r3, sl, r4
 8000f36:	eb67 0706 	sbc.w	r7, r7, r6
 8000f3a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000f3e:	40cb      	lsrs	r3, r1
 8000f40:	40cf      	lsrs	r7, r1
 8000f42:	ea4e 0303 	orr.w	r3, lr, r3
 8000f46:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f50:	4613      	mov	r3, r2
 8000f52:	e6f8      	b.n	8000d46 <__udivmoddi4+0x96>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e6e0      	b.n	8000d1a <__udivmoddi4+0x6a>
 8000f58:	ebb8 0402 	subs.w	r4, r8, r2
 8000f5c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f60:	3801      	subs	r0, #1
 8000f62:	e7e5      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f64:	4604      	mov	r4, r0
 8000f66:	e7d8      	b.n	8000f1a <__udivmoddi4+0x26a>
 8000f68:	4611      	mov	r1, r2
 8000f6a:	e795      	b.n	8000e98 <__udivmoddi4+0x1e8>
 8000f6c:	4681      	mov	r9, r0
 8000f6e:	e7c0      	b.n	8000ef2 <__udivmoddi4+0x242>
 8000f70:	468a      	mov	sl, r1
 8000f72:	e77c      	b.n	8000e6e <__udivmoddi4+0x1be>
 8000f74:	3b02      	subs	r3, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e748      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xe4>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	443e      	add	r6, r7
 8000f82:	e72f      	b.n	8000de4 <__udivmoddi4+0x134>
 8000f84:	45c2      	cmp	sl, r8
 8000f86:	d3e7      	bcc.n	8000f58 <__udivmoddi4+0x2a8>
 8000f88:	463e      	mov	r6, r7
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x280>
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc2:	f000 f813 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f004 fcb7 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f004 f8b7 	bl	800513c <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd0:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000fd4:	0800d120 	.word	0x0800d120
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fdc:	200006c4 	.word	0x200006c4
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000fe0:	200006c4 	.word	0x200006c4
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fe4:	20001288 	.word	0x20001288

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4915      	ldr	r1, [pc, #84]	; (8001044 <SystemInit+0x58>)
 8000fee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ff2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SystemInit+0x5c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001004:	6858      	ldr	r0, [r3, #4]
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <SystemInit+0x60>)
 8001008:	4002      	ands	r2, r0
 800100a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001012:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001016:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800101e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001026:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102a:	f022 020f 	bic.w	r2, r2, #15
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001030:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SystemInit+0x64>)
 8001034:	4002      	ands	r2, r0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800103c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001040:	608b      	str	r3, [r1, #8]
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	40021000 	.word	0x40021000
 800104c:	f87fc00c 	.word	0xf87fc00c
 8001050:	ff00fccc 	.word	0xff00fccc

08001054 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b510      	push	{r4, lr}
 8001056:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_InitTick+0x24>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <HAL_InitTick+0x28>)
 800105e:	fba0 3003 	umull	r3, r0, r0, r3
 8001062:	0980      	lsrs	r0, r0, #6
 8001064:	f000 fdb0 	bl	8001bc8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001068:	2200      	movs	r2, #0
 800106a:	4621      	mov	r1, r4
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 fd6c 	bl	8001b4c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8001074:	2000      	movs	r0, #0
 8001076:	bd10      	pop	{r4, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x20>)
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 fd4b 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ffde 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f004 f8e2 	bl	8005260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800109c:	2000      	movs	r0, #0
 800109e:	bd08      	pop	{r3, pc}
 80010a0:	40022000 	.word	0x40022000

080010a4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80010a4:	4a02      	ldr	r2, [pc, #8]	; (80010b0 <HAL_IncTick+0xc>)
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000958 	.word	0x20000958

080010b4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <HAL_GetTick+0x8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000958 	.word	0x20000958

080010c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80010c0:	b510      	push	{r4, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c6:	f7ff fff5 	bl	80010b4 <HAL_GetTick>
 80010ca:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80010cc:	f7ff fff2 	bl	80010b4 <HAL_GetTick>
 80010d0:	1b00      	subs	r0, r0, r4
 80010d2:	9b01      	ldr	r3, [sp, #4]
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d3f9      	bcc.n	80010cc <HAL_Delay+0xc>
  {
  }
}
 80010d8:	b002      	add	sp, #8
 80010da:	bd10      	pop	{r4, pc}

080010dc <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80010dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80010de:	6802      	ldr	r2, [r0, #0]
 80010e0:	6893      	ldr	r3, [r2, #8]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <ADC_Disable+0x1a>
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	f013 0f01 	tst.w	r3, #1
 80010f0:	d103      	bne.n	80010fa <ADC_Disable+0x1e>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e002      	b.n	80010fc <ADC_Disable+0x20>
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <ADC_Disable+0x20>
 80010fa:	2301      	movs	r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d030      	beq.n	8001162 <ADC_Disable+0x86>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001100:	6893      	ldr	r3, [r2, #8]
 8001102:	f003 030d 	and.w	r3, r3, #13
 8001106:	2b01      	cmp	r3, #1
 8001108:	d10b      	bne.n	8001122 <ADC_Disable+0x46>
 800110a:	4604      	mov	r4, r0
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800110c:	6893      	ldr	r3, [r2, #8]
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	6093      	str	r3, [r2, #8]
 8001114:	6803      	ldr	r3, [r0, #0]
 8001116:	2203      	movs	r2, #3
 8001118:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800111a:	f7ff ffcb 	bl	80010b4 <HAL_GetTick>
 800111e:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001120:	e018      	b.n	8001154 <ADC_Disable+0x78>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001122:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	bd38      	pop	{r3, r4, r5, pc}
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001136:	f7ff ffbd 	bl	80010b4 <HAL_GetTick>
 800113a:	1b40      	subs	r0, r0, r5
 800113c:	2802      	cmp	r0, #2
 800113e:	d909      	bls.n	8001154 <ADC_Disable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001140:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8001150:	2001      	movs	r0, #1
 8001152:	bd38      	pop	{r3, r4, r5, pc}
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f013 0f01 	tst.w	r3, #1
 800115c:	d1eb      	bne.n	8001136 <ADC_Disable+0x5a>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800115e:	2000      	movs	r0, #0
 8001160:	bd38      	pop	{r3, r4, r5, pc}
 8001162:	2000      	movs	r0, #0
}
 8001164:	bd38      	pop	{r3, r4, r5, pc}
 8001166:	bf00      	nop

08001168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001168:	b538      	push	{r3, r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	6893      	ldr	r3, [r2, #8]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d105      	bne.n	8001182 <ADC_Enable+0x1a>
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	f013 0f01 	tst.w	r3, #1
 800117c:	d103      	bne.n	8001186 <ADC_Enable+0x1e>
 800117e:	2300      	movs	r3, #0
 8001180:	e002      	b.n	8001188 <ADC_Enable+0x20>
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <ADC_Enable+0x20>
 8001186:	2301      	movs	r3, #1
 8001188:	bb63      	cbnz	r3, 80011e4 <ADC_Enable+0x7c>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800118a:	6891      	ldr	r1, [r2, #8]
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <ADC_Enable+0x80>)
 800118e:	4219      	tst	r1, r3
 8001190:	d009      	beq.n	80011a6 <ADC_Enable+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	4604      	mov	r4, r0
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a8:	6893      	ldr	r3, [r2, #8]
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6093      	str	r3, [r2, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80011b0:	f7ff ff80 	bl	80010b4 <HAL_GetTick>
 80011b4:	4605      	mov	r5, r0
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011b6:	e00e      	b.n	80011d6 <ADC_Enable+0x6e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011b8:	f7ff ff7c 	bl	80010b4 <HAL_GetTick>
 80011bc:	1b40      	subs	r0, r0, r5
 80011be:	2802      	cmp	r0, #2
 80011c0:	d909      	bls.n	80011d6 <ADC_Enable+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c4:	f043 0310 	orr.w	r3, r3, #16
 80011c8:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 80011d2:	2001      	movs	r0, #1
 80011d4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f013 0f01 	tst.w	r3, #1
 80011de:	d0eb      	beq.n	80011b8 <ADC_Enable+0x50>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
 80011e2:	bd38      	pop	{r3, r4, r5, pc}
 80011e4:	2000      	movs	r0, #0
}
 80011e6:	bd38      	pop	{r3, r4, r5, pc}
 80011e8:	8000003f 	.word	0x8000003f

080011ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0;
  __IO uint32_t wait_loop_index = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f4:	2800      	cmp	r0, #0
 80011f6:	f000 8131 	beq.w	800145c <HAL_ADC_Init+0x270>
 80011fa:	4604      	mov	r4, r0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011fe:	f013 0f10 	tst.w	r3, #16
 8001202:	d152      	bne.n	80012aa <HAL_ADC_Init+0xbe>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001204:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001206:	2b00      	cmp	r3, #0
 8001208:	d137      	bne.n	800127a <HAL_ADC_Init+0x8e>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800120a:	6483      	str	r3, [r0, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0;
 800120c:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0;
 800120e:	64c3      	str	r3, [r0, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001210:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8001214:	f004 f862 	bl	80052dc <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001220:	d12d      	bne.n	800127e <HAL_ADC_Init+0x92>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff ff5a 	bl	80010dc <ADC_Disable>
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001228:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800122a:	f013 0f10 	tst.w	r3, #16
 800122e:	d127      	bne.n	8001280 <HAL_ADC_Init+0x94>
 8001230:	bb30      	cbnz	r0, 8001280 <HAL_ADC_Init+0x94>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001232:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6463      	str	r3, [r4, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	6893      	ldr	r3, [r2, #8]
 8001246:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800124a:	6093      	str	r3, [r2, #8]
          /* Set ADVREGEN bits to 0x01 */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800124c:	6822      	ldr	r2, [r4, #0]
 800124e:	6893      	ldr	r3, [r2, #8]
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6093      	str	r3, [r2, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001256:	4b83      	ldr	r3, [pc, #524]	; (8001464 <HAL_ADC_Init+0x278>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a83      	ldr	r2, [pc, #524]	; (8001468 <HAL_ADC_Init+0x27c>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001266:	005a      	lsls	r2, r3, #1
 8001268:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0)
 800126a:	e002      	b.n	8001272 <HAL_ADC_Init+0x86>
          {
            wait_loop_index--;
 800126c:	9b00      	ldr	r3, [sp, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	9300      	str	r3, [sp, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001272:	9b00      	ldr	r3, [sp, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f9      	bne.n	800126c <HAL_ADC_Init+0x80>
 8001278:	e002      	b.n	8001280 <HAL_ADC_Init+0x94>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127a:	2000      	movs	r0, #0
 800127c:	e000      	b.n	8001280 <HAL_ADC_Init+0x94>
 800127e:	2000      	movs	r0, #0
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001288:	d003      	beq.n	8001292 <HAL_ADC_Init+0xa6>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800128a:	689b      	ldr	r3, [r3, #8]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800128c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001290:	d00c      	beq.n	80012ac <HAL_ADC_Init+0xc0>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001294:	f023 0312 	bic.w	r3, r3, #18
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	6463      	str	r3, [r4, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64a3      	str	r3, [r4, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
 80012a8:	e000      	b.n	80012ac <HAL_ADC_Init+0xc0>
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012aa:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012ae:	f013 0f10 	tst.w	r3, #16
 80012b2:	f040 80cb 	bne.w	800144c <HAL_ADC_Init+0x260>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	f040 80c8 	bne.w	800144c <HAL_ADC_Init+0x260>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
 80012c0:	f012 0104 	ands.w	r1, r2, #4
 80012c4:	f040 80c2 	bne.w	800144c <HAL_ADC_Init+0x260>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012ca:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80012ce:	f042 0202 	orr.w	r2, r2, #2
 80012d2:	6462      	str	r2, [r4, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d004      	beq.n	80012e4 <HAL_ADC_Init+0xf8>
 80012da:	4a64      	ldr	r2, [pc, #400]	; (800146c <HAL_ADC_Init+0x280>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d103      	bne.n	80012e8 <HAL_ADC_Init+0xfc>
 80012e0:	4d63      	ldr	r5, [pc, #396]	; (8001470 <HAL_ADC_Init+0x284>)
 80012e2:	e002      	b.n	80012ea <HAL_ADC_Init+0xfe>
 80012e4:	4d62      	ldr	r5, [pc, #392]	; (8001470 <HAL_ADC_Init+0x284>)
 80012e6:	e000      	b.n	80012ea <HAL_ADC_Init+0xfe>
 80012e8:	4d62      	ldr	r5, [pc, #392]	; (8001474 <HAL_ADC_Init+0x288>)
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ee:	d103      	bne.n	80012f8 <HAL_ADC_Init+0x10c>
 80012f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	e014      	b.n	8001322 <HAL_ADC_Init+0x136>
 80012f8:	4a5c      	ldr	r2, [pc, #368]	; (800146c <HAL_ADC_Init+0x280>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d103      	bne.n	8001306 <HAL_ADC_Init+0x11a>
 80012fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	e00d      	b.n	8001322 <HAL_ADC_Init+0x136>
 8001306:	4a5c      	ldr	r2, [pc, #368]	; (8001478 <HAL_ADC_Init+0x28c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d102      	bne.n	8001312 <HAL_ADC_Init+0x126>
 800130c:	4b5b      	ldr	r3, [pc, #364]	; (800147c <HAL_ADC_Init+0x290>)
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	e007      	b.n	8001322 <HAL_ADC_Init+0x136>
 8001312:	4a5a      	ldr	r2, [pc, #360]	; (800147c <HAL_ADC_Init+0x290>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d102      	bne.n	800131e <HAL_ADC_Init+0x132>
 8001318:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_ADC_Init+0x28c>)
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	e001      	b.n	8001322 <HAL_ADC_Init+0x136>
 800131e:	2300      	movs	r3, #0
 8001320:	9301      	str	r3, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	6893      	ldr	r3, [r2, #8]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <HAL_ADC_Init+0x14e>
 800132e:	6813      	ldr	r3, [r2, #0]
 8001330:	f013 0f01 	tst.w	r3, #1
 8001334:	d103      	bne.n	800133e <HAL_ADC_Init+0x152>
 8001336:	2300      	movs	r3, #0
 8001338:	e002      	b.n	8001340 <HAL_ADC_Init+0x154>
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_ADC_Init+0x154>
 800133e:	2301      	movs	r3, #1
 8001340:	b993      	cbnz	r3, 8001368 <HAL_ADC_Init+0x17c>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001342:	9e01      	ldr	r6, [sp, #4]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001344:	b156      	cbz	r6, 800135c <HAL_ADC_Init+0x170>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001346:	68b2      	ldr	r2, [r6, #8]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	2a01      	cmp	r2, #1
 800134e:	d104      	bne.n	800135a <HAL_ADC_Init+0x16e>
 8001350:	6832      	ldr	r2, [r6, #0]
 8001352:	f012 0f01 	tst.w	r2, #1
 8001356:	d000      	beq.n	800135a <HAL_ADC_Init+0x16e>
 8001358:	2301      	movs	r3, #1
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800135a:	b92b      	cbnz	r3, 8001368 <HAL_ADC_Init+0x17c>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800135c:	68ab      	ldr	r3, [r5, #8]
 800135e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001362:	6863      	ldr	r3, [r4, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	60ab      	str	r3, [r5, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001368:	69e5      	ldr	r5, [r4, #28]
 800136a:	036b      	lsls	r3, r5, #13
 800136c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800136e:	2a01      	cmp	r2, #1
 8001370:	d001      	beq.n	8001376 <HAL_ADC_Init+0x18a>
 8001372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001376:	ea41 0203 	orr.w	r2, r1, r3
 800137a:	68e3      	ldr	r3, [r4, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	68a2      	ldr	r2, [r4, #8]
 8001380:	431a      	orrs	r2, r3
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001384:	2b01      	cmp	r3, #1
 8001386:	d111      	bne.n	80013ac <HAL_ADC_Init+0x1c0>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001388:	b935      	cbnz	r5, 8001398 <HAL_ADC_Init+0x1ac>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800138a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800138c:	3b01      	subs	r3, #1
 800138e:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
 8001392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001396:	e009      	b.n	80013ac <HAL_ADC_Init+0x1c0>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001398:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800139a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	64a3      	str	r3, [r4, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d01b      	beq.n	80013ea <HAL_ADC_Init+0x1fe>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013b2:	6821      	ldr	r1, [r4, #0]
 80013b4:	4d30      	ldr	r5, [pc, #192]	; (8001478 <HAL_ADC_Init+0x28c>)
 80013b6:	42a9      	cmp	r1, r5
 80013b8:	d003      	beq.n	80013c2 <HAL_ADC_Init+0x1d6>
 80013ba:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80013be:	42a9      	cmp	r1, r5
 80013c0:	d110      	bne.n	80013e4 <HAL_ADC_Init+0x1f8>
 80013c2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80013c6:	d008      	beq.n	80013da <HAL_ADC_Init+0x1ee>
 80013c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013cc:	d008      	beq.n	80013e0 <HAL_ADC_Init+0x1f4>
 80013ce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80013d2:	d107      	bne.n	80013e4 <HAL_ADC_Init+0x1f8>
 80013d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d8:	e004      	b.n	80013e4 <HAL_ADC_Init+0x1f8>
 80013da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013de:	e001      	b.n	80013e4 <HAL_ADC_Init+0x1f8>
 80013e0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80013e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013e6:	430b      	orrs	r3, r1
 80013e8:	431a      	orrs	r2, r3
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	f011 0f0c 	tst.w	r1, #12
 80013f2:	d10b      	bne.n	800140c <HAL_ADC_Init+0x220>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80013fa:	f021 0102 	bic.w	r1, r1, #2
 80013fe:	60d9      	str	r1, [r3, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001400:	69a1      	ldr	r1, [r4, #24]
 8001402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 800140a:	431a      	orrs	r2, r3
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800140c:	6821      	ldr	r1, [r4, #0]
 800140e:	68cd      	ldr	r5, [r1, #12]
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_ADC_Init+0x294>)
 8001412:	402b      	ands	r3, r5
 8001414:	4313      	orrs	r3, r2
 8001416:	60cb      	str	r3, [r1, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001418:	6923      	ldr	r3, [r4, #16]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800141e:	6821      	ldr	r1, [r4, #0]
 8001420:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001422:	f023 020f 	bic.w	r2, r3, #15
 8001426:	6a23      	ldr	r3, [r4, #32]
 8001428:	3b01      	subs	r3, #1
 800142a:	4313      	orrs	r3, r2
 800142c:	630b      	str	r3, [r1, #48]	; 0x30
 800142e:	e004      	b.n	800143a <HAL_ADC_Init+0x24e>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001430:	6822      	ldr	r2, [r4, #0]
 8001432:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800143a:	2300      	movs	r3, #0
 800143c:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001440:	f023 0303 	bic.w	r3, r3, #3
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6463      	str	r3, [r4, #68]	; 0x44
 800144a:	e008      	b.n	800145e <HAL_ADC_Init+0x272>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800144c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800144e:	f023 0312 	bic.w	r3, r3, #18
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001458:	2001      	movs	r0, #1
 800145a:	e000      	b.n	800145e <HAL_ADC_Init+0x272>
  __IO uint32_t wait_loop_index = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 800145e:	b016      	add	sp, #88	; 0x58
 8001460:	bd70      	pop	{r4, r5, r6, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83
 800146c:	50000100 	.word	0x50000100
 8001470:	50000300 	.word	0x50000300
 8001474:	50000700 	.word	0x50000700
 8001478:	50000400 	.word	0x50000400
 800147c:	50000500 	.word	0x50000500
 8001480:	fff0c007 	.word	0xfff0c007

08001484 <HAL_ADC_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001484:	6803      	ldr	r3, [r0, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f013 0f04 	tst.w	r3, #4
 800148c:	f040 80b2 	bne.w	80015f4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001490:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001494:	2b01      	cmp	r3, #1
 8001496:	f000 80af 	beq.w	80015f8 <HAL_ADC_Start+0x174>
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800149a:	b510      	push	{r4, lr}
 800149c:	4604      	mov	r4, r0
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800149e:	2301      	movs	r3, #1
 80014a0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014a4:	f7ff fe60 	bl	8001168 <ADC_Enable>
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014a8:	4603      	mov	r3, r0
 80014aa:	2800      	cmp	r0, #0
 80014ac:	f040 809e 	bne.w	80015ec <HAL_ADC_Start+0x168>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80014b2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014be:	6462      	str	r2, [r4, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014c0:	6822      	ldr	r2, [r4, #0]
 80014c2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80014c6:	d002      	beq.n	80014ce <HAL_ADC_Start+0x4a>
 80014c8:	494d      	ldr	r1, [pc, #308]	; (8001600 <HAL_ADC_Start+0x17c>)
 80014ca:	428a      	cmp	r2, r1
 80014cc:	d105      	bne.n	80014da <HAL_ADC_Start+0x56>
 80014ce:	494d      	ldr	r1, [pc, #308]	; (8001604 <HAL_ADC_Start+0x180>)
 80014d0:	6889      	ldr	r1, [r1, #8]
 80014d2:	f011 0f1f 	tst.w	r1, #31
 80014d6:	d00b      	beq.n	80014f0 <HAL_ADC_Start+0x6c>
 80014d8:	e004      	b.n	80014e4 <HAL_ADC_Start+0x60>
 80014da:	494b      	ldr	r1, [pc, #300]	; (8001608 <HAL_ADC_Start+0x184>)
 80014dc:	6889      	ldr	r1, [r1, #8]
 80014de:	f011 0f1f 	tst.w	r1, #31
 80014e2:	d005      	beq.n	80014f0 <HAL_ADC_Start+0x6c>
 80014e4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80014e8:	d002      	beq.n	80014f0 <HAL_ADC_Start+0x6c>
 80014ea:	4948      	ldr	r1, [pc, #288]	; (800160c <HAL_ADC_Start+0x188>)
 80014ec:	428a      	cmp	r2, r1
 80014ee:	d10e      	bne.n	800150e <HAL_ADC_Start+0x8a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80014f2:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 80014f6:	6461      	str	r1, [r4, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014f8:	68d1      	ldr	r1, [r2, #12]
 80014fa:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80014fe:	d021      	beq.n	8001544 <HAL_ADC_Start+0xc0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001500:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001502:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001506:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800150a:	6461      	str	r1, [r4, #68]	; 0x44
 800150c:	e01a      	b.n	8001544 <HAL_ADC_Start+0xc0>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800150e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001514:	6461      	str	r1, [r4, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001516:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800151a:	d002      	beq.n	8001522 <HAL_ADC_Start+0x9e>
 800151c:	4938      	ldr	r1, [pc, #224]	; (8001600 <HAL_ADC_Start+0x17c>)
 800151e:	428a      	cmp	r2, r1
 8001520:	d105      	bne.n	800152e <HAL_ADC_Start+0xaa>
 8001522:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001526:	68c9      	ldr	r1, [r1, #12]
 8001528:	f3c1 6140 	ubfx	r1, r1, #25, #1
 800152c:	e003      	b.n	8001536 <HAL_ADC_Start+0xb2>
 800152e:	4937      	ldr	r1, [pc, #220]	; (800160c <HAL_ADC_Start+0x188>)
 8001530:	68c9      	ldr	r1, [r1, #12]
 8001532:	f3c1 6140 	ubfx	r1, r1, #25, #1
 8001536:	b129      	cbz	r1, 8001544 <HAL_ADC_Start+0xc0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001538:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800153a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800153e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001542:	6461      	str	r1, [r4, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001546:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Start+0xd2>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800154c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800154e:	f021 0106 	bic.w	r1, r1, #6
 8001552:	64a1      	str	r1, [r4, #72]	; 0x48
 8001554:	e001      	b.n	800155a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001556:	2100      	movs	r1, #0
 8001558:	64a1      	str	r1, [r4, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800155a:	2100      	movs	r1, #0
 800155c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001560:	211c      	movs	r1, #28
 8001562:	6011      	str	r1, [r2, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800156a:	d002      	beq.n	8001572 <HAL_ADC_Start+0xee>
 800156c:	4924      	ldr	r1, [pc, #144]	; (8001600 <HAL_ADC_Start+0x17c>)
 800156e:	428a      	cmp	r2, r1
 8001570:	d105      	bne.n	800157e <HAL_ADC_Start+0xfa>
 8001572:	4924      	ldr	r1, [pc, #144]	; (8001604 <HAL_ADC_Start+0x180>)
 8001574:	6889      	ldr	r1, [r1, #8]
 8001576:	f011 0f1f 	tst.w	r1, #31
 800157a:	d105      	bne.n	8001588 <HAL_ADC_Start+0x104>
 800157c:	e030      	b.n	80015e0 <HAL_ADC_Start+0x15c>
 800157e:	4922      	ldr	r1, [pc, #136]	; (8001608 <HAL_ADC_Start+0x184>)
 8001580:	6889      	ldr	r1, [r1, #8]
 8001582:	f011 0f1f 	tst.w	r1, #31
 8001586:	d02b      	beq.n	80015e0 <HAL_ADC_Start+0x15c>
 8001588:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800158c:	d002      	beq.n	8001594 <HAL_ADC_Start+0x110>
 800158e:	491c      	ldr	r1, [pc, #112]	; (8001600 <HAL_ADC_Start+0x17c>)
 8001590:	428a      	cmp	r2, r1
 8001592:	d106      	bne.n	80015a2 <HAL_ADC_Start+0x11e>
 8001594:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_ADC_Start+0x180>)
 8001596:	6889      	ldr	r1, [r1, #8]
 8001598:	f001 011f 	and.w	r1, r1, #31
 800159c:	2905      	cmp	r1, #5
 800159e:	d106      	bne.n	80015ae <HAL_ADC_Start+0x12a>
 80015a0:	e01e      	b.n	80015e0 <HAL_ADC_Start+0x15c>
 80015a2:	4919      	ldr	r1, [pc, #100]	; (8001608 <HAL_ADC_Start+0x184>)
 80015a4:	6889      	ldr	r1, [r1, #8]
 80015a6:	f001 011f 	and.w	r1, r1, #31
 80015aa:	2905      	cmp	r1, #5
 80015ac:	d018      	beq.n	80015e0 <HAL_ADC_Start+0x15c>
 80015ae:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015b2:	d002      	beq.n	80015ba <HAL_ADC_Start+0x136>
 80015b4:	4912      	ldr	r1, [pc, #72]	; (8001600 <HAL_ADC_Start+0x17c>)
 80015b6:	428a      	cmp	r2, r1
 80015b8:	d106      	bne.n	80015c8 <HAL_ADC_Start+0x144>
 80015ba:	4912      	ldr	r1, [pc, #72]	; (8001604 <HAL_ADC_Start+0x180>)
 80015bc:	6889      	ldr	r1, [r1, #8]
 80015be:	f001 011f 	and.w	r1, r1, #31
 80015c2:	2909      	cmp	r1, #9
 80015c4:	d106      	bne.n	80015d4 <HAL_ADC_Start+0x150>
 80015c6:	e00b      	b.n	80015e0 <HAL_ADC_Start+0x15c>
 80015c8:	490f      	ldr	r1, [pc, #60]	; (8001608 <HAL_ADC_Start+0x184>)
 80015ca:	6889      	ldr	r1, [r1, #8]
 80015cc:	f001 011f 	and.w	r1, r1, #31
 80015d0:	2909      	cmp	r1, #9
 80015d2:	d005      	beq.n	80015e0 <HAL_ADC_Start+0x15c>
 80015d4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80015d8:	d002      	beq.n	80015e0 <HAL_ADC_Start+0x15c>
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <HAL_ADC_Start+0x188>)
 80015dc:	428a      	cmp	r2, r1
 80015de:	d10d      	bne.n	80015fc <HAL_ADC_Start+0x178>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015e0:	6891      	ldr	r1, [r2, #8]
 80015e2:	f041 0104 	orr.w	r1, r1, #4
 80015e6:	6091      	str	r1, [r2, #8]
  {
    /* Process locked */
    __HAL_LOCK(hadc);
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd10      	pop	{r4, pc}
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80015f2:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015f4:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80015f6:	4770      	bx	lr
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015f8:	2002      	movs	r0, #2
 80015fa:	4770      	bx	lr
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015fc:	4618      	mov	r0, r3
    tmp_hal_status = HAL_BUSY;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80015fe:	bd10      	pop	{r4, pc}
 8001600:	50000100 	.word	0x50000100
 8001604:	50000300 	.word	0x50000300
 8001608:	50000700 	.word	0x50000700
 800160c:	50000400 	.word	0x50000400

08001610 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001614:	6943      	ldr	r3, [r0, #20]
 8001616:	2b08      	cmp	r3, #8
 8001618:	d02c      	beq.n	8001674 <HAL_ADC_PollForConversion+0x64>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161a:	6803      	ldr	r3, [r0, #0]
 800161c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001620:	d005      	beq.n	800162e <HAL_ADC_PollForConversion+0x1e>
 8001622:	4a51      	ldr	r2, [pc, #324]	; (8001768 <HAL_ADC_PollForConversion+0x158>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d104      	bne.n	8001632 <HAL_ADC_PollForConversion+0x22>
 8001628:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800162c:	e002      	b.n	8001634 <HAL_ADC_PollForConversion+0x24>
 800162e:	4a4f      	ldr	r2, [pc, #316]	; (800176c <HAL_ADC_PollForConversion+0x15c>)
 8001630:	e000      	b.n	8001634 <HAL_ADC_PollForConversion+0x24>
 8001632:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_ADC_PollForConversion+0x160>)
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001634:	6894      	ldr	r4, [r2, #8]
 8001636:	f014 0f1f 	tst.w	r4, #31
 800163a:	d10d      	bne.n	8001658 <HAL_ADC_PollForConversion+0x48>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f013 0f01 	tst.w	r3, #1
 8001642:	d019      	beq.n	8001678 <HAL_ADC_PollForConversion+0x68>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001644:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001646:	f043 0320 	orr.w	r3, r3, #32
 800164a:	6443      	str	r3, [r0, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800164c:	2300      	movs	r3, #0
 800164e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        
        return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001658:	6893      	ldr	r3, [r2, #8]
 800165a:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800165e:	d00d      	beq.n	800167c <HAL_ADC_PollForConversion+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6443      	str	r3, [r0, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001668:	2300      	movs	r3, #0
 800166a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        
        return HAL_ERROR;
 800166e:	2001      	movs	r0, #1
 8001670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001674:	2608      	movs	r6, #8
 8001676:	e002      	b.n	800167e <HAL_ADC_PollForConversion+0x6e>
        
        return HAL_ERROR;
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001678:	260c      	movs	r6, #12
 800167a:	e000      	b.n	800167e <HAL_ADC_PollForConversion+0x6e>
 800167c:	260c      	movs	r6, #12
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800167e:	6803      	ldr	r3, [r0, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001684:	d002      	beq.n	800168c <HAL_ADC_PollForConversion+0x7c>
 8001686:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_ADC_PollForConversion+0x158>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d105      	bne.n	8001698 <HAL_ADC_PollForConversion+0x88>
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_ADC_PollForConversion+0x15c>)
 800168e:	6892      	ldr	r2, [r2, #8]
 8001690:	f012 0f1f 	tst.w	r2, #31
 8001694:	d00b      	beq.n	80016ae <HAL_ADC_PollForConversion+0x9e>
 8001696:	e004      	b.n	80016a2 <HAL_ADC_PollForConversion+0x92>
 8001698:	4a35      	ldr	r2, [pc, #212]	; (8001770 <HAL_ADC_PollForConversion+0x160>)
 800169a:	6892      	ldr	r2, [r2, #8]
 800169c:	f012 0f1f 	tst.w	r2, #31
 80016a0:	d005      	beq.n	80016ae <HAL_ADC_PollForConversion+0x9e>
 80016a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a6:	d002      	beq.n	80016ae <HAL_ADC_PollForConversion+0x9e>
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <HAL_ADC_PollForConversion+0x164>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_PollForConversion+0xa2>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016ae:	68df      	ldr	r7, [r3, #12]
 80016b0:	e00a      	b.n	80016c8 <HAL_ADC_PollForConversion+0xb8>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b6:	d006      	beq.n	80016c6 <HAL_ADC_PollForConversion+0xb6>
 80016b8:	4a2b      	ldr	r2, [pc, #172]	; (8001768 <HAL_ADC_PollForConversion+0x158>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d102      	bne.n	80016c4 <HAL_ADC_PollForConversion+0xb4>
 80016be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016c2:	e000      	b.n	80016c6 <HAL_ADC_PollForConversion+0xb6>
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_ADC_PollForConversion+0x164>)
 80016c6:	68df      	ldr	r7, [r3, #12]
 80016c8:	460d      	mov	r5, r1
 80016ca:	4604      	mov	r4, r0
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80016cc:	f7ff fcf2 	bl	80010b4 <HAL_GetTick>
 80016d0:	4680      	mov	r8, r0
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016d2:	e013      	b.n	80016fc <HAL_ADC_PollForConversion+0xec>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80016d8:	d010      	beq.n	80016fc <HAL_ADC_PollForConversion+0xec>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80016da:	b12d      	cbz	r5, 80016e8 <HAL_ADC_PollForConversion+0xd8>
 80016dc:	f7ff fcea 	bl	80010b4 <HAL_GetTick>
 80016e0:	ebc8 0000 	rsb	r0, r8, r0
 80016e4:	4285      	cmp	r5, r0
 80016e6:	d209      	bcs.n	80016fc <HAL_ADC_PollForConversion+0xec>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f0:	2300      	movs	r3, #0
 80016f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        
        return HAL_TIMEOUT;
 80016f6:	2003      	movs	r0, #3
 80016f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4216      	tst	r6, r2
 8001702:	d0e7      	beq.n	80016d4 <HAL_ADC_PollForConversion+0xc4>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001704:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800170a:	6462      	str	r2, [r4, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001712:	d11f      	bne.n	8001754 <HAL_ADC_PollForConversion+0x144>
 8001714:	f417 5f00 	tst.w	r7, #8192	; 0x2000
 8001718:	d11c      	bne.n	8001754 <HAL_ADC_PollForConversion+0x144>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	f012 0f08 	tst.w	r2, #8
 8001720:	d018      	beq.n	8001754 <HAL_ADC_PollForConversion+0x144>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	f012 0f04 	tst.w	r2, #4
 8001728:	d10c      	bne.n	8001744 <HAL_ADC_PollForConversion+0x134>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800172a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	6462      	str	r2, [r4, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001732:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001734:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001738:	d10c      	bne.n	8001754 <HAL_ADC_PollForConversion+0x144>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	6462      	str	r2, [r4, #68]	; 0x44
 8001742:	e007      	b.n	8001754 <HAL_ADC_PollForConversion+0x144>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001744:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	6462      	str	r2, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	64a2      	str	r2, [r4, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001754:	f417 4f80 	tst.w	r7, #16384	; 0x4000
 8001758:	d103      	bne.n	8001762 <HAL_ADC_PollForConversion+0x152>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800175a:	601e      	str	r6, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800175c:	2000      	movs	r0, #0
 800175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001762:	2000      	movs	r0, #0
}
 8001764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001768:	50000100 	.word	0x50000100
 800176c:	50000300 	.word	0x50000300
 8001770:	50000700 	.word	0x50000700
 8001774:	50000400 	.word	0x50000400

08001778 <HAL_ADC_GetValue>:

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001778:	6803      	ldr	r3, [r0, #0]
 800177a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop

08001780 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001780:	b470      	push	{r4, r5, r6}
 8001782:	b097      	sub	sp, #92	; 0x5c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800178c:	2b01      	cmp	r3, #1
 800178e:	f000 81b7 	beq.w	8001b00 <HAL_ADC_ConfigChannel+0x380>
 8001792:	2301      	movs	r3, #1
 8001794:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001798:	6802      	ldr	r2, [r0, #0]
 800179a:	6893      	ldr	r3, [r2, #8]
 800179c:	f013 0f04 	tst.w	r3, #4
 80017a0:	f040 819c 	bne.w	8001adc <HAL_ADC_ConfigChannel+0x35c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 80017a4:	684b      	ldr	r3, [r1, #4]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d80c      	bhi.n	80017c4 <HAL_ADC_ConfigChannel+0x44>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017aa:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80017ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017b0:	005e      	lsls	r6, r3, #1
 80017b2:	231f      	movs	r3, #31
 80017b4:	40b3      	lsls	r3, r6
 80017b6:	ea25 0403 	bic.w	r4, r5, r3
 80017ba:	680b      	ldr	r3, [r1, #0]
 80017bc:	40b3      	lsls	r3, r6
 80017be:	4323      	orrs	r3, r4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	e02c      	b.n	800181e <HAL_ADC_ConfigChannel+0x9e>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9 */
    else if (sConfig->Rank < 10)
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d80d      	bhi.n	80017e4 <HAL_ADC_ConfigChannel+0x64>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017c8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80017ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017ce:	005c      	lsls	r4, r3, #1
 80017d0:	3c1e      	subs	r4, #30
 80017d2:	231f      	movs	r3, #31
 80017d4:	40a3      	lsls	r3, r4
 80017d6:	ea26 0503 	bic.w	r5, r6, r3
 80017da:	680b      	ldr	r3, [r1, #0]
 80017dc:	40a3      	lsls	r3, r4
 80017de:	432b      	orrs	r3, r5
 80017e0:	6353      	str	r3, [r2, #52]	; 0x34
 80017e2:	e01c      	b.n	800181e <HAL_ADC_ConfigChannel+0x9e>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14 */
    else if (sConfig->Rank < 15)
 80017e4:	2b0e      	cmp	r3, #14
 80017e6:	d80d      	bhi.n	8001804 <HAL_ADC_ConfigChannel+0x84>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e8:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80017ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017ee:	005c      	lsls	r4, r3, #1
 80017f0:	3c3c      	subs	r4, #60	; 0x3c
 80017f2:	231f      	movs	r3, #31
 80017f4:	40a3      	lsls	r3, r4
 80017f6:	ea26 0503 	bic.w	r5, r6, r3
 80017fa:	680b      	ldr	r3, [r1, #0]
 80017fc:	40a3      	lsls	r3, r4
 80017fe:	432b      	orrs	r3, r5
 8001800:	6393      	str	r3, [r2, #56]	; 0x38
 8001802:	e00c      	b.n	800181e <HAL_ADC_ConfigChannel+0x9e>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16 */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001804:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8001806:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800180a:	005c      	lsls	r4, r3, #1
 800180c:	3c5a      	subs	r4, #90	; 0x5a
 800180e:	231f      	movs	r3, #31
 8001810:	40a3      	lsls	r3, r4
 8001812:	ea26 0503 	bic.w	r5, r6, r3
 8001816:	680b      	ldr	r3, [r1, #0]
 8001818:	40a3      	lsls	r3, r4
 800181a:	432b      	orrs	r3, r5
 800181c:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800181e:	6802      	ldr	r2, [r0, #0]
 8001820:	6893      	ldr	r3, [r2, #8]
 8001822:	f013 0f0c 	tst.w	r3, #12
 8001826:	f040 8088 	bne.w	800193a <HAL_ADC_ConfigChannel+0x1ba>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18 */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800182a:	680b      	ldr	r3, [r1, #0]
 800182c:	2b09      	cmp	r3, #9
 800182e:	d90d      	bls.n	800184c <HAL_ADC_ConfigChannel+0xcc>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001830:	6994      	ldr	r4, [r2, #24]
 8001832:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001836:	3b1e      	subs	r3, #30
 8001838:	2507      	movs	r5, #7
 800183a:	409d      	lsls	r5, r3
 800183c:	ea24 0505 	bic.w	r5, r4, r5
 8001840:	688c      	ldr	r4, [r1, #8]
 8001842:	fa04 f303 	lsl.w	r3, r4, r3
 8001846:	432b      	orrs	r3, r5
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	e00b      	b.n	8001864 <HAL_ADC_ConfigChannel+0xe4>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9 */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800184c:	6954      	ldr	r4, [r2, #20]
 800184e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001852:	2507      	movs	r5, #7
 8001854:	409d      	lsls	r5, r3
 8001856:	ea24 0505 	bic.w	r5, r4, r5
 800185a:	688c      	ldr	r4, [r1, #8]
 800185c:	fa04 f303 	lsl.w	r3, r4, r3
 8001860:	432b      	orrs	r3, r5
 8001862:	6153      	str	r3, [r2, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001864:	694a      	ldr	r2, [r1, #20]
 8001866:	6804      	ldr	r4, [r0, #0]
 8001868:	68e3      	ldr	r3, [r4, #12]
 800186a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001874:	690a      	ldr	r2, [r1, #16]
 8001876:	3a01      	subs	r2, #1
 8001878:	2a03      	cmp	r2, #3
 800187a:	d82f      	bhi.n	80018dc <HAL_ADC_ConfigChannel+0x15c>
 800187c:	e8df f002 	tbb	[pc, r2]
 8001880:	23180d02 	.word	0x23180d02
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1 */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001884:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001886:	4da0      	ldr	r5, [pc, #640]	; (8001b08 <HAL_ADC_ConfigChannel+0x388>)
 8001888:	4015      	ands	r5, r2
 800188a:	680a      	ldr	r2, [r1, #0]
 800188c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001890:	432b      	orrs	r3, r5
 8001892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001896:	6623      	str	r3, [r4, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001898:	e04f      	b.n	800193a <HAL_ADC_ConfigChannel+0x1ba>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2 */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800189a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800189c:	4d9a      	ldr	r5, [pc, #616]	; (8001b08 <HAL_ADC_ConfigChannel+0x388>)
 800189e:	4015      	ands	r5, r2
 80018a0:	680a      	ldr	r2, [r1, #0]
 80018a2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80018a6:	432b      	orrs	r3, r5
 80018a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018ac:	6663      	str	r3, [r4, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018ae:	e044      	b.n	800193a <HAL_ADC_ConfigChannel+0x1ba>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3 */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80018b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80018b2:	4d95      	ldr	r5, [pc, #596]	; (8001b08 <HAL_ADC_ConfigChannel+0x388>)
 80018b4:	4015      	ands	r5, r2
 80018b6:	680a      	ldr	r2, [r1, #0]
 80018b8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80018bc:	432b      	orrs	r3, r5
 80018be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c2:	66a3      	str	r3, [r4, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018c4:	e039      	b.n	800193a <HAL_ADC_ConfigChannel+0x1ba>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4 */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018c6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80018c8:	4a8f      	ldr	r2, [pc, #572]	; (8001b08 <HAL_ADC_ConfigChannel+0x388>)
 80018ca:	402a      	ands	r2, r5
 80018cc:	680d      	ldr	r5, [r1, #0]
 80018ce:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
 80018d2:	4313      	orrs	r3, r2
 80018d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018d8:	66e3      	str	r3, [r4, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018da:	e02e      	b.n	800193a <HAL_ADC_ConfigChannel+0x1ba>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018de:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80018e2:	680a      	ldr	r2, [r1, #0]
 80018e4:	ebb3 6f82 	cmp.w	r3, r2, lsl #26
 80018e8:	d103      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x172>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80018ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f0:	6623      	str	r3, [r4, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f2:	6802      	ldr	r2, [r0, #0]
 80018f4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80018f6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 80018fa:	680c      	ldr	r4, [r1, #0]
 80018fc:	ebb3 6f84 	cmp.w	r3, r4, lsl #26
 8001900:	d103      	bne.n	800190a <HAL_ADC_ConfigChannel+0x18a>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001902:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001908:	6653      	str	r3, [r2, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800190a:	6802      	ldr	r2, [r0, #0]
 800190c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800190e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001912:	680c      	ldr	r4, [r1, #0]
 8001914:	ebb3 6f84 	cmp.w	r3, r4, lsl #26
 8001918:	d103      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x1a2>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800191a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800191c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001920:	6693      	str	r3, [r2, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001922:	6802      	ldr	r2, [r0, #0]
 8001924:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001926:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800192a:	680c      	ldr	r4, [r1, #0]
 800192c:	ebb3 6f84 	cmp.w	r3, r4, lsl #26
 8001930:	d103      	bne.n	800193a <HAL_ADC_ConfigChannel+0x1ba>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001932:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8001934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001938:	66d3      	str	r3, [r2, #108]	; 0x6c

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800193a:	6802      	ldr	r2, [r0, #0]
 800193c:	6893      	ldr	r3, [r2, #8]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d105      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x1d2>
 8001946:	6813      	ldr	r3, [r2, #0]
 8001948:	f013 0f01 	tst.w	r3, #1
 800194c:	d103      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x1d6>
 800194e:	2400      	movs	r4, #0
 8001950:	e002      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1d8>
 8001952:	2400      	movs	r4, #0
 8001954:	e000      	b.n	8001958 <HAL_ADC_ConfigChannel+0x1d8>
 8001956:	2401      	movs	r4, #1
 8001958:	2c00      	cmp	r4, #0
 800195a:	f040 80c5 	bne.w	8001ae8 <HAL_ADC_ConfigChannel+0x368>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800195e:	68cb      	ldr	r3, [r1, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d009      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x1f8>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001964:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 8001968:	680e      	ldr	r6, [r1, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	40b3      	lsls	r3, r6
 800196e:	ea25 0303 	bic.w	r3, r5, r3
 8001972:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8001976:	e028      	b.n	80019ca <HAL_ADC_ConfigChannel+0x24a>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001978:	f8d2 60b0 	ldr.w	r6, [r2, #176]	; 0xb0
 800197c:	680b      	ldr	r3, [r1, #0]
 800197e:	2501      	movs	r5, #1
 8001980:	fa05 f303 	lsl.w	r3, r5, r3
 8001984:	4333      	orrs	r3, r6
 8001986:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800198a:	680b      	ldr	r3, [r1, #0]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d90e      	bls.n	80019ae <HAL_ADC_ConfigChannel+0x22e>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001990:	6806      	ldr	r6, [r0, #0]
 8001992:	69b2      	ldr	r2, [r6, #24]
 8001994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001998:	3b1b      	subs	r3, #27
 800199a:	2507      	movs	r5, #7
 800199c:	409d      	lsls	r5, r3
 800199e:	ea22 0505 	bic.w	r5, r2, r5
 80019a2:	688a      	ldr	r2, [r1, #8]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	432b      	orrs	r3, r5
 80019aa:	61b3      	str	r3, [r6, #24]
 80019ac:	e00d      	b.n	80019ca <HAL_ADC_ConfigChannel+0x24a>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1) );
      }
      else /* For channels 1 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019ae:	6806      	ldr	r6, [r0, #0]
 80019b0:	6972      	ldr	r2, [r6, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019b8:	2507      	movs	r5, #7
 80019ba:	409d      	lsls	r5, r3
 80019bc:	ea22 0505 	bic.w	r5, r2, r5
 80019c0:	688a      	ldr	r2, [r1, #8]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	432b      	orrs	r3, r5
 80019c8:	6173      	str	r3, [r6, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ca:	6803      	ldr	r3, [r0, #0]
 80019cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d0:	d004      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x25c>
 80019d2:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_ADC_ConfigChannel+0x38c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d103      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x260>
 80019d8:	4d4d      	ldr	r5, [pc, #308]	; (8001b10 <HAL_ADC_ConfigChannel+0x390>)
 80019da:	e002      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x262>
 80019dc:	4d4c      	ldr	r5, [pc, #304]	; (8001b10 <HAL_ADC_ConfigChannel+0x390>)
 80019de:	e000      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x262>
 80019e0:	4d4c      	ldr	r5, [pc, #304]	; (8001b14 <HAL_ADC_ConfigChannel+0x394>)
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e2:	680a      	ldr	r2, [r1, #0]
 80019e4:	2a10      	cmp	r2, #16
 80019e6:	d103      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x270>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019e8:	68ae      	ldr	r6, [r5, #8]
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019ea:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 80019ee:	d00b      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x288>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019f0:	2a11      	cmp	r2, #17
 80019f2:	d103      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x27c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019f4:	68ae      	ldr	r6, [r5, #8]
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019f6:	f016 7f80 	tst.w	r6, #16777216	; 0x1000000
 80019fa:	d005      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x288>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019fc:	2a12      	cmp	r2, #18
 80019fe:	d175      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x36c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a00:	68aa      	ldr	r2, [r5, #8]
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a02:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001a06:	d173      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x370>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0c:	d103      	bne.n	8001a16 <HAL_ADC_ConfigChannel+0x296>
 8001a0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	e014      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x2c0>
 8001a16:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <HAL_ADC_ConfigChannel+0x38c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d103      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x2a4>
 8001a1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	e00d      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x2c0>
 8001a24:	4a3c      	ldr	r2, [pc, #240]	; (8001b18 <HAL_ADC_ConfigChannel+0x398>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d102      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x2b0>
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <HAL_ADC_ConfigChannel+0x39c>)
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	e007      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x2c0>
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <HAL_ADC_ConfigChannel+0x39c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d102      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x2bc>
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_ADC_ConfigChannel+0x398>)
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	e001      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x2c0>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a40:	6802      	ldr	r2, [r0, #0]
 8001a42:	6893      	ldr	r3, [r2, #8]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d104      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x2d6>
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f013 0f01 	tst.w	r3, #1
 8001a52:	d000      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x2d6>
 8001a54:	2401      	movs	r4, #1
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d13a      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x350>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a5a:	9e01      	ldr	r6, [sp, #4]
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a5c:	b156      	cbz	r6, 8001a74 <HAL_ADC_ConfigChannel+0x2f4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a5e:	68b3      	ldr	r3, [r6, #8]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d104      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x2f2>
 8001a68:	6833      	ldr	r3, [r6, #0]
 8001a6a:	f013 0f01 	tst.w	r3, #1
 8001a6e:	d000      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0x2f2>
 8001a70:	2401      	movs	r4, #1
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a72:	bb6c      	cbnz	r4, 8001ad0 <HAL_ADC_ConfigChannel+0x350>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a74:	680b      	ldr	r3, [r1, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d117      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x32a>
 8001a7a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001a7e:	d114      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x32a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a80:	68ab      	ldr	r3, [r5, #8]
 8001a82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a86:	60ab      	str	r3, [r5, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_ADC_ConfigChannel+0x3a0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <HAL_ADC_ConfigChannel+0x3a4>)
 8001a8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a92:	230a      	movs	r3, #10
 8001a94:	fb03 f302 	mul.w	r3, r3, r2
 8001a98:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0)
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x322>
          {
            wait_loop_index--;
 8001a9c:	9b00      	ldr	r3, [sp, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	9300      	str	r3, [sp, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001aa2:	9b00      	ldr	r3, [sp, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x31c>
 8001aa8:	e025      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
            wait_loop_index--;
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001aaa:	2b11      	cmp	r3, #17
 8001aac:	d108      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x340>
 8001aae:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x340>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ab4:	68ab      	ldr	r3, [r5, #8]
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	60ab      	str	r3, [r5, #8]
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001abe:	e01a      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d117      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x374>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ac4:	68ab      	ldr	r3, [r5, #8]
 8001ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aca:	60ab      	str	r3, [r5, #8]
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e012      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ad2:	f043 0320 	orr.w	r3, r3, #32
 8001ad6:	6443      	str	r3, [r0, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e00c      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001adc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ade:	f043 0320 	orr.w	r3, r3, #32
 8001ae2:	6443      	str	r3, [r0, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e006      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e004      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e002      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x376>
 8001af4:	2300      	movs	r3, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001afc:	4618      	mov	r0, r3
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x382>
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8001b02:	b017      	add	sp, #92	; 0x5c
 8001b04:	bc70      	pop	{r4, r5, r6}
 8001b06:	4770      	bx	lr
 8001b08:	83fff000 	.word	0x83fff000
 8001b0c:	50000100 	.word	0x50000100
 8001b10:	50000300 	.word	0x50000300
 8001b14:	50000700 	.word	0x50000700
 8001b18:	50000400 	.word	0x50000400
 8001b1c:	50000500 	.word	0x50000500
 8001b20:	20000000 	.word	0x20000000
 8001b24:	000f4240 	.word	0x000f4240

08001b28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b34:	0200      	lsls	r0, r0, #8
 8001b36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3a:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001b3c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001b40:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001b44:	60d0      	str	r0, [r2, #12]
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_NVIC_SetPriority+0x5c>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b56:	f1c3 0407 	rsb	r4, r3, #7
 8001b5a:	2c04      	cmp	r4, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b60:	1d1d      	adds	r5, r3, #4
 8001b62:	2d06      	cmp	r5, #6
 8001b64:	d901      	bls.n	8001b6a <HAL_NVIC_SetPriority+0x1e>
 8001b66:	1edd      	subs	r5, r3, #3
 8001b68:	e000      	b.n	8001b6c <HAL_NVIC_SetPriority+0x20>
 8001b6a:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	fa03 f404 	lsl.w	r4, r3, r4
 8001b72:	3c01      	subs	r4, #1
 8001b74:	4021      	ands	r1, r4
 8001b76:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	40ab      	lsls	r3, r5
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001b7e:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001b80:	2800      	cmp	r0, #0
 8001b82:	da06      	bge.n	8001b92 <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	f000 000f 	and.w	r0, r0, #15
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_NVIC_SetPriority+0x60>)
 8001b8e:	541a      	strb	r2, [r3, r0]
 8001b90:	e007      	b.n	8001ba2 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b9a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b9e:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ba2:	bc30      	pop	{r4, r5}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	e000ed14 	.word	0xe000ed14

08001bb0 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bb0:	0942      	lsrs	r2, r0, #5
 8001bb2:	f000 001f 	and.w	r0, r0, #31
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8001bbc:	4b01      	ldr	r3, [pc, #4]	; (8001bc4 <HAL_NVIC_EnableIRQ+0x14>)
 8001bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	3801      	subs	r0, #1
 8001bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001bce:	d20a      	bcs.n	8001be6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_SYSTICK_Config+0x24>)
 8001bd2:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	21f0      	movs	r1, #240	; 0xf0
 8001bd6:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_SYSTICK_Config+0x28>)
 8001bd8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	2000      	movs	r0, #0
 8001bde:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001bf4:	2804      	cmp	r0, #4
 8001bf6:	d105      	bne.n	8001c04 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001bf8:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4770      	bx	lr
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001c04:	4a02      	ldr	r2, [pc, #8]	; (8001c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4770      	bx	lr
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c18:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001c1a:	f7ff fffb 	bl	8001c14 <HAL_SYSTICK_Callback>
 8001c1e:	bd08      	pop	{r3, pc}

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c22:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 8001c24:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c26:	e0b5      	b.n	8001d94 <HAL_GPIO_Init+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c28:	2401      	movs	r4, #1
 8001c2a:	409c      	lsls	r4, r3

    if(iocurrent)
 8001c2c:	4022      	ands	r2, r4
 8001c2e:	f000 80b0 	beq.w	8001d92 <HAL_GPIO_Init+0x172>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c32:	684d      	ldr	r5, [r1, #4]
 8001c34:	2d02      	cmp	r5, #2
 8001c36:	d001      	beq.n	8001c3c <HAL_GPIO_Init+0x1c>
 8001c38:	2d12      	cmp	r5, #18
 8001c3a:	d110      	bne.n	8001c5e <HAL_GPIO_Init+0x3e>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c3c:	08de      	lsrs	r6, r3, #3
 8001c3e:	3608      	adds	r6, #8
 8001c40:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c44:	f003 0507 	and.w	r5, r3, #7
 8001c48:	00af      	lsls	r7, r5, #2
 8001c4a:	250f      	movs	r5, #15
 8001c4c:	40bd      	lsls	r5, r7
 8001c4e:	ea2c 0e05 	bic.w	lr, ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c52:	690d      	ldr	r5, [r1, #16]
 8001c54:	40bd      	lsls	r5, r7
 8001c56:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3] = temp;
 8001c5a:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c60:	005f      	lsls	r7, r3, #1
 8001c62:	2603      	movs	r6, #3
 8001c64:	40be      	lsls	r6, r7
 8001c66:	43f6      	mvns	r6, r6
 8001c68:	ea05 0e06 	and.w	lr, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c6c:	684d      	ldr	r5, [r1, #4]
 8001c6e:	f005 0503 	and.w	r5, r5, #3
 8001c72:	40bd      	lsls	r5, r7
 8001c74:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8001c78:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c7a:	684d      	ldr	r5, [r1, #4]
 8001c7c:	f105 3eff 	add.w	lr, r5, #4294967295
 8001c80:	f1be 0f01 	cmp.w	lr, #1
 8001c84:	d903      	bls.n	8001c8e <HAL_GPIO_Init+0x6e>
 8001c86:	2d11      	cmp	r5, #17
 8001c88:	d001      	beq.n	8001c8e <HAL_GPIO_Init+0x6e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c8a:	2d12      	cmp	r5, #18
 8001c8c:	d110      	bne.n	8001cb0 <HAL_GPIO_Init+0x90>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c8e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c90:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c94:	68cd      	ldr	r5, [r1, #12]
 8001c96:	40bd      	lsls	r5, r7
 8001c98:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->OSPEEDR = temp;
 8001c9c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ca4:	684d      	ldr	r5, [r1, #4]
 8001ca6:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8001caa:	409d      	lsls	r5, r3
 8001cac:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 8001cae:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb0:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cb2:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cb4:	688c      	ldr	r4, [r1, #8]
 8001cb6:	40bc      	lsls	r4, r7
 8001cb8:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8001cba:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbc:	684c      	ldr	r4, [r1, #4]
 8001cbe:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001cc2:	d066      	beq.n	8001d92 <HAL_GPIO_Init+0x172>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc4:	4c37      	ldr	r4, [pc, #220]	; (8001da4 <HAL_GPIO_Init+0x184>)
 8001cc6:	69a5      	ldr	r5, [r4, #24]
 8001cc8:	f045 0501 	orr.w	r5, r5, #1
 8001ccc:	61a5      	str	r5, [r4, #24]
 8001cce:	69a4      	ldr	r4, [r4, #24]
 8001cd0:	f004 0401 	and.w	r4, r4, #1
 8001cd4:	9401      	str	r4, [sp, #4]
 8001cd6:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cd8:	089e      	lsrs	r6, r3, #2
 8001cda:	1cb5      	adds	r5, r6, #2
 8001cdc:	4c32      	ldr	r4, [pc, #200]	; (8001da8 <HAL_GPIO_Init+0x188>)
 8001cde:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ce2:	f003 0403 	and.w	r4, r3, #3
 8001ce6:	00a4      	lsls	r4, r4, #2
 8001ce8:	270f      	movs	r7, #15
 8001cea:	40a7      	lsls	r7, r4
 8001cec:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001cf0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001cf4:	d010      	beq.n	8001d18 <HAL_GPIO_Init+0xf8>
 8001cf6:	4d2d      	ldr	r5, [pc, #180]	; (8001dac <HAL_GPIO_Init+0x18c>)
 8001cf8:	42a8      	cmp	r0, r5
 8001cfa:	d00f      	beq.n	8001d1c <HAL_GPIO_Init+0xfc>
 8001cfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d00:	42a8      	cmp	r0, r5
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x100>
 8001d04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d08:	42a8      	cmp	r0, r5
 8001d0a:	d00b      	beq.n	8001d24 <HAL_GPIO_Init+0x104>
 8001d0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d10:	42a8      	cmp	r0, r5
 8001d12:	d109      	bne.n	8001d28 <HAL_GPIO_Init+0x108>
 8001d14:	2504      	movs	r5, #4
 8001d16:	e008      	b.n	8001d2a <HAL_GPIO_Init+0x10a>
 8001d18:	2500      	movs	r5, #0
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x10a>
 8001d1c:	2501      	movs	r5, #1
 8001d1e:	e004      	b.n	8001d2a <HAL_GPIO_Init+0x10a>
 8001d20:	2502      	movs	r5, #2
 8001d22:	e002      	b.n	8001d2a <HAL_GPIO_Init+0x10a>
 8001d24:	2503      	movs	r5, #3
 8001d26:	e000      	b.n	8001d2a <HAL_GPIO_Init+0x10a>
 8001d28:	2505      	movs	r5, #5
 8001d2a:	fa05 f404 	lsl.w	r4, r5, r4
 8001d2e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d30:	3602      	adds	r6, #2
 8001d32:	4d1d      	ldr	r5, [pc, #116]	; (8001da8 <HAL_GPIO_Init+0x188>)
 8001d34:	f845 4026 	str.w	r4, [r5, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d38:	4c1d      	ldr	r4, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x190>)
 8001d3a:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	43d4      	mvns	r4, r2
 8001d3e:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d42:	684f      	ldr	r7, [r1, #4]
 8001d44:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001d48:	d001      	beq.n	8001d4e <HAL_GPIO_Init+0x12e>
        {
          temp |= iocurrent;
 8001d4a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001d4e:	4d18      	ldr	r5, [pc, #96]	; (8001db0 <HAL_GPIO_Init+0x190>)
 8001d50:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001d52:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d58:	684f      	ldr	r7, [r1, #4]
 8001d5a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001d5e:	d001      	beq.n	8001d64 <HAL_GPIO_Init+0x144>
        {
          temp |= iocurrent;
 8001d60:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001d64:	4d12      	ldr	r5, [pc, #72]	; (8001db0 <HAL_GPIO_Init+0x190>)
 8001d66:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d68:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6e:	684f      	ldr	r7, [r1, #4]
 8001d70:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001d74:	d001      	beq.n	8001d7a <HAL_GPIO_Init+0x15a>
        {
          temp |= iocurrent;
 8001d76:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001d7a:	4d0d      	ldr	r5, [pc, #52]	; (8001db0 <HAL_GPIO_Init+0x190>)
 8001d7c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001d7e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d82:	684e      	ldr	r6, [r1, #4]
 8001d84:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001d88:	d001      	beq.n	8001d8e <HAL_GPIO_Init+0x16e>
        {
          temp |= iocurrent;
 8001d8a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_GPIO_Init+0x190>)
 8001d90:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001d92:	3301      	adds	r3, #1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d94:	680a      	ldr	r2, [r1, #0]
 8001d96:	fa32 f403 	lsrs.w	r4, r2, r3
 8001d9a:	f47f af45 	bne.w	8001c28 <HAL_GPIO_Init+0x8>
      }
    }
    
    position++;
  }
}
 8001d9e:	b003      	add	sp, #12
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	b10a      	cbz	r2, 8001dba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001db6:	6181      	str	r1, [r0, #24]
 8001db8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dba:	6281      	str	r1, [r0, #40]	; 0x28
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <HAL_PCD_Init>:
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d051      	beq.n	8001e68 <HAL_PCD_Init+0xa8>
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001dc8:	f890 3371 	ldrb.w	r3, [r0, #881]	; 0x371
 8001dcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001dd0:	d104      	bne.n	8001ddc <HAL_PCD_Init+0x1c>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd8:	f003 fb9c 	bl	8005514 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001de2:	2200      	movs	r2, #0
 8001de4:	e00f      	b.n	8001e06 <HAL_PCD_Init+0x46>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8001de6:	00d1      	lsls	r1, r2, #3
 8001de8:	1a89      	subs	r1, r1, r2
 8001dea:	008b      	lsls	r3, r1, #2
 8001dec:	4423      	add	r3, r4
 8001dee:	2101      	movs	r1, #1
 8001df0:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
   hpcd->IN_ep[i].num = i;
 8001df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001df8:	2100      	movs	r1, #0
 8001dfa:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
   hpcd->IN_ep[i].maxpacket =  0;
 8001dfe:	6359      	str	r1, [r3, #52]	; 0x34
   hpcd->IN_ep[i].xfer_buff = 0;
 8001e00:	6399      	str	r1, [r3, #56]	; 0x38
   hpcd->IN_ep[i].xfer_len = 0;
 8001e02:	63d9      	str	r1, [r3, #60]	; 0x3c
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001e04:	3201      	adds	r2, #1
 8001e06:	6860      	ldr	r0, [r4, #4]
 8001e08:	4282      	cmp	r2, r0
 8001e0a:	d3ec      	bcc.n	8001de6 <HAL_PCD_Init+0x26>
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	e011      	b.n	8001e34 <HAL_PCD_Init+0x74>
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 8001e10:	00d1      	lsls	r1, r2, #3
 8001e12:	1a89      	subs	r1, r1, r2
 8001e14:	008b      	lsls	r3, r1, #2
 8001e16:	4423      	add	r3, r4
 8001e18:	2100      	movs	r1, #0
 8001e1a:	f883 11cd 	strb.w	r1, [r3, #461]	; 0x1cd
   hpcd->OUT_ep[i].num = i;
 8001e1e:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8001e22:	f883 11cf 	strb.w	r1, [r3, #463]	; 0x1cf
   hpcd->OUT_ep[i].maxpacket = 0;
 8001e26:	f8c3 11d8 	str.w	r1, [r3, #472]	; 0x1d8
   hpcd->OUT_ep[i].xfer_buff = 0;
 8001e2a:	f8c3 11dc 	str.w	r1, [r3, #476]	; 0x1dc
   hpcd->OUT_ep[i].xfer_len = 0;
 8001e2e:	f8c3 11e0 	str.w	r1, [r3, #480]	; 0x1e0
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001e32:	3201      	adds	r2, #1
 8001e34:	4282      	cmp	r2, r0
 8001e36:	d3eb      	bcc.n	8001e10 <HAL_PCD_Init+0x50>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8001e40:	6822      	ldr	r2, [r4, #0]
 8001e42:	2000      	movs	r0, #0
 8001e44:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	f8a2 0050 	strh.w	r0, [r2, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8001e54:	6822      	ldr	r2, [r4, #0]
 8001e56:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 8001e5a:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8001e5e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8001e62:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371

 return HAL_OK;
 8001e66:	bd10      	pop	{r4, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	4770      	bx	lr

08001e6c <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8001e6c:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	f003 fc70 	bl	8005754 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8001e74:	2000      	movs	r0, #0
 8001e76:	bd08      	pop	{r3, pc}

08001e78 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8001e78:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d00f      	beq.n	8001ea0 <HAL_PCD_SetAddress+0x28>
 8001e80:	2301      	movs	r3, #1
 8001e82:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

   if(address == 0) 
 8001e86:	b921      	cbnz	r1, 8001e92 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8001e88:	6803      	ldr	r3, [r0, #0]
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8001e90:	e001      	b.n	8001e96 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8001e92:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8001e96:	2300      	movs	r3, #0
 8001e98:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return HAL_OK;
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8001ea0:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ea4:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001ea6:	b24d      	sxtb	r5, r1
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	da07      	bge.n	8001ebc <HAL_PCD_EP_Open+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001eac:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8001eb0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001eb4:	00b4      	lsls	r4, r6, #2
 8001eb6:	3428      	adds	r4, #40	; 0x28
 8001eb8:	4404      	add	r4, r0
 8001eba:	e008      	b.n	8001ece <HAL_PCD_EP_Open+0x2a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001ebc:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8001ec0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001ec4:	00b4      	lsls	r4, r6, #2
 8001ec6:	f504 74e4 	add.w	r4, r4, #456	; 0x1c8
 8001eca:	4404      	add	r4, r0
 8001ecc:	3404      	adds	r4, #4
  }
  ep->num   = ep_addr & 0x7F;
 8001ece:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001ed2:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001ed4:	0fed      	lsrs	r5, r5, #31
 8001ed6:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8001ed8:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 8001eda:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 8001edc:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	f000 81be 	beq.w	8002262 <HAL_PCD_EP_Open+0x3be>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 8001eec:	78e3      	ldrb	r3, [r4, #3]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d839      	bhi.n	8001f66 <HAL_PCD_EP_Open+0xc2>
 8001ef2:	e8df f003 	tbb	[pc, r3]
 8001ef6:	2b02      	.short	0x2b02
 8001ef8:	1d10      	.short	0x1d10
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8001efa:	6802      	ldr	r2, [r0, #0]
 8001efc:	7821      	ldrb	r1, [r4, #0]
 8001efe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f10:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
 8001f14:	e027      	b.n	8001f66 <HAL_PCD_EP_Open+0xc2>
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8001f16:	6802      	ldr	r2, [r0, #0]
 8001f18:	7821      	ldrb	r1, [r4, #0]
 8001f1a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
 8001f2e:	e01a      	b.n	8001f66 <HAL_PCD_EP_Open+0xc2>
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8001f30:	6802      	ldr	r2, [r0, #0]
 8001f32:	7821      	ldrb	r1, [r4, #0]
 8001f34:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001f46:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
 8001f4a:	e00c      	b.n	8001f66 <HAL_PCD_EP_Open+0xc2>
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8001f4c:	6802      	ldr	r2, [r0, #0]
 8001f4e:	7821      	ldrb	r1, [r4, #0]
 8001f50:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f62:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8001f66:	6801      	ldr	r1, [r0, #0]
 8001f68:	7822      	ldrb	r2, [r4, #0]
 8001f6a:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	051b      	lsls	r3, r3, #20
 8001f74:	0d1b      	lsrs	r3, r3, #20
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f821 3022 	strh.w	r3, [r1, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001f84:	7aa3      	ldrb	r3, [r4, #10]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8092 	bne.w	80020b0 <HAL_PCD_EP_Open+0x20c>
  {
    if (ep->is_in)
 8001f8c:	7863      	ldrb	r3, [r4, #1]
 8001f8e:	b39b      	cbz	r3, 8001ff8 <HAL_PCD_EP_Open+0x154>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001f90:	6803      	ldr	r3, [r0, #0]
 8001f92:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001f96:	7822      	ldrb	r2, [r4, #0]
 8001f98:	00d2      	lsls	r2, r2, #3
 8001f9a:	fa12 f281 	uxtah	r2, r2, r1
 8001f9e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001fa2:	88a3      	ldrh	r3, [r4, #4]
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8001fac:	6802      	ldr	r2, [r0, #0]
 8001fae:	7821      	ldrb	r1, [r4, #0]
 8001fb0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b15b      	cbz	r3, 8001fd4 <HAL_PCD_EP_Open+0x130>
 8001fbc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc4:	051b      	lsls	r3, r3, #20
 8001fc6:	0d1b      	lsrs	r3, r3, #20
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fd0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8001fd4:	6802      	ldr	r2, [r0, #0]
 8001fd6:	7821      	ldrb	r1, [r4, #0]
 8001fd8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fe6:	f083 0320 	eor.w	r3, r3, #32
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001ff6:	e12f      	b.n	8002258 <HAL_PCD_EP_Open+0x3b4>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001ff8:	6801      	ldr	r1, [r0, #0]
 8001ffa:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8001ffe:	7823      	ldrb	r3, [r4, #0]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	fa13 f382 	uxtah	r3, r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800200c:	88a3      	ldrh	r3, [r4, #4]
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8002016:	6801      	ldr	r1, [r0, #0]
 8002018:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800201c:	7823      	ldrb	r3, [r4, #0]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	fa13 f382 	uxtah	r3, r3, r2
 8002024:	3306      	adds	r3, #6
 8002026:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800202a:	68e1      	ldr	r1, [r4, #12]
 800202c:	293e      	cmp	r1, #62	; 0x3e
 800202e:	d90e      	bls.n	800204e <HAL_PCD_EP_Open+0x1aa>
 8002030:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8002034:	f011 0f1f 	tst.w	r1, #31
 8002038:	d101      	bne.n	800203e <HAL_PCD_EP_Open+0x19a>
 800203a:	3a01      	subs	r2, #1
 800203c:	b292      	uxth	r2, r2
 800203e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002042:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002046:	b292      	uxth	r2, r2
 8002048:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800204c:	e00a      	b.n	8002064 <HAL_PCD_EP_Open+0x1c0>
 800204e:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8002052:	f011 0f01 	tst.w	r1, #1
 8002056:	d001      	beq.n	800205c <HAL_PCD_EP_Open+0x1b8>
 8002058:	3201      	adds	r2, #1
 800205a:	b292      	uxth	r2, r2
 800205c:	0292      	lsls	r2, r2, #10
 800205e:	b292      	uxth	r2, r2
 8002060:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002064:	6802      	ldr	r2, [r0, #0]
 8002066:	7821      	ldrb	r1, [r4, #0]
 8002068:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800206c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002070:	b29b      	uxth	r3, r3
 8002072:	b15b      	cbz	r3, 800208c <HAL_PCD_EP_Open+0x1e8>
 8002074:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	0d1b      	lsrs	r3, r3, #20
 8002080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	7821      	ldrb	r1, [r4, #0]
 8002090:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020aa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80020ae:	e0d3      	b.n	8002258 <HAL_PCD_EP_Open+0x3b4>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80020b0:	6802      	ldr	r2, [r0, #0]
 80020b2:	7821      	ldrb	r1, [r4, #0]
 80020b4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020c2:	051b      	lsls	r3, r3, #20
 80020c4:	0d1b      	lsrs	r3, r3, #20
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80020d2:	6803      	ldr	r3, [r0, #0]
 80020d4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80020d8:	7822      	ldrb	r2, [r4, #0]
 80020da:	00d2      	lsls	r2, r2, #3
 80020dc:	fa12 f281 	uxtah	r2, r2, r1
 80020e0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80020e4:	88e3      	ldrh	r3, [r4, #6]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80020ee:	6801      	ldr	r1, [r0, #0]
 80020f0:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80020f4:	7823      	ldrb	r3, [r4, #0]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	fa13 f382 	uxtah	r3, r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002102:	8923      	ldrh	r3, [r4, #8]
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
    
    if (ep->is_in==0)
 800210c:	7863      	ldrb	r3, [r4, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d152      	bne.n	80021b8 <HAL_PCD_EP_Open+0x314>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002112:	6802      	ldr	r2, [r0, #0]
 8002114:	7821      	ldrb	r1, [r4, #0]
 8002116:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	b29b      	uxth	r3, r3
 8002120:	b15b      	cbz	r3, 800213a <HAL_PCD_EP_Open+0x296>
 8002122:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800212a:	051b      	lsls	r3, r3, #20
 800212c:	0d1b      	lsrs	r3, r3, #20
 800212e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002136:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800213a:	6802      	ldr	r2, [r0, #0]
 800213c:	7821      	ldrb	r1, [r4, #0]
 800213e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	b29b      	uxth	r3, r3
 8002148:	b15b      	cbz	r3, 8002162 <HAL_PCD_EP_Open+0x2be>
 800214a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800214e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002152:	051b      	lsls	r3, r3, #20
 8002154:	0d1b      	lsrs	r3, r3, #20
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800215e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	7821      	ldrb	r1, [r4, #0]
 8002166:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800216a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	0d1b      	lsrs	r3, r3, #20
 8002172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800217a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800217e:	6801      	ldr	r1, [r0, #0]
 8002180:	7825      	ldrb	r5, [r4, #0]
 8002182:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 8002186:	b29b      	uxth	r3, r3
 8002188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002190:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002194:	f248 0280 	movw	r2, #32896	; 0x8080
 8002198:	4313      	orrs	r3, r2
 800219a:	f821 3025 	strh.w	r3, [r1, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800219e:	6801      	ldr	r1, [r0, #0]
 80021a0:	7824      	ldrb	r4, [r4, #0]
 80021a2:	f831 3024 	ldrh.w	r3, [r1, r4, lsl #2]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f821 3024 	strh.w	r3, [r1, r4, lsl #2]
 80021b6:	e04f      	b.n	8002258 <HAL_PCD_EP_Open+0x3b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	7821      	ldrb	r1, [r4, #0]
 80021bc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b15b      	cbz	r3, 80021e0 <HAL_PCD_EP_Open+0x33c>
 80021c8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d0:	051b      	lsls	r3, r3, #20
 80021d2:	0d1b      	lsrs	r3, r3, #20
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	7821      	ldrb	r1, [r4, #0]
 80021e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b15b      	cbz	r3, 8002208 <HAL_PCD_EP_Open+0x364>
 80021f0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	0d1b      	lsrs	r3, r3, #20
 80021fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002204:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002208:	6802      	ldr	r2, [r0, #0]
 800220a:	7821      	ldrb	r1, [r4, #0]
 800220c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002214:	051b      	lsls	r3, r3, #20
 8002216:	0d1b      	lsrs	r3, r3, #20
 8002218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800221c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002220:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8002224:	6801      	ldr	r1, [r0, #0]
 8002226:	7825      	ldrb	r5, [r4, #0]
 8002228:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 800222c:	b29b      	uxth	r3, r3
 800222e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002236:	f248 0280 	movw	r2, #32896	; 0x8080
 800223a:	4313      	orrs	r3, r2
 800223c:	f821 3025 	strh.w	r3, [r1, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002240:	6801      	ldr	r1, [r0, #0]
 8002242:	7824      	ldrb	r4, [r4, #0]
 8002244:	f831 3024 	ldrh.w	r3, [r1, r4, lsl #2]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	4313      	orrs	r3, r2
 8002254:	f821 3024 	strh.w	r3, [r1, r4, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002258:	2300      	movs	r3, #0
 800225a:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return ret;
 800225e:	4618      	mov	r0, r3
 8002260:	e000      	b.n	8002264 <HAL_PCD_EP_Open+0x3c0>
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8002262:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8002264:	bc70      	pop	{r4, r5, r6}
 8002266:	4770      	bx	lr

08002268 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002268:	b430      	push	{r4, r5}
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800226a:	b24a      	sxtb	r2, r1
 800226c:	2a00      	cmp	r2, #0
 800226e:	da07      	bge.n	8002280 <HAL_PCD_EP_Close+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002270:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002274:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002278:	00a3      	lsls	r3, r4, #2
 800227a:	3328      	adds	r3, #40	; 0x28
 800227c:	4403      	add	r3, r0
 800227e:	e008      	b.n	8002292 <HAL_PCD_EP_Close+0x2a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002280:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002284:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002288:	00a3      	lsls	r3, r4, #2
 800228a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800228e:	4403      	add	r3, r0
 8002290:	3304      	adds	r3, #4
  }
  ep->num   = ep_addr & 0x7F;
 8002292:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002296:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002298:	0fd2      	lsrs	r2, r2, #31
 800229a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800229c:	f890 2370 	ldrb.w	r2, [r0, #880]	; 0x370
 80022a0:	2a01      	cmp	r2, #1
 80022a2:	f000 80f9 	beq.w	8002498 <HAL_PCD_EP_Close+0x230>
 80022a6:	2201      	movs	r2, #1
 80022a8:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370

  if (ep->doublebuffer == 0) 
 80022ac:	7a9a      	ldrb	r2, [r3, #10]
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d149      	bne.n	8002346 <HAL_PCD_EP_Close+0xde>
  {
    if (ep->is_in)
 80022b2:	785a      	ldrb	r2, [r3, #1]
 80022b4:	b31a      	cbz	r2, 80022fe <HAL_PCD_EP_Close+0x96>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80022b6:	6801      	ldr	r1, [r0, #0]
 80022b8:	781c      	ldrb	r4, [r3, #0]
 80022ba:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 80022be:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80022c2:	b292      	uxth	r2, r2
 80022c4:	b15a      	cbz	r2, 80022de <HAL_PCD_EP_Close+0x76>
 80022c6:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 80022ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022ce:	0512      	lsls	r2, r2, #20
 80022d0:	0d12      	lsrs	r2, r2, #20
 80022d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022da:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 80022de:	6802      	ldr	r2, [r0, #0]
 80022e0:	7819      	ldrb	r1, [r3, #0]
 80022e2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80022fc:	e0c7      	b.n	800248e <HAL_PCD_EP_Close+0x226>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80022fe:	6801      	ldr	r1, [r0, #0]
 8002300:	781c      	ldrb	r4, [r3, #0]
 8002302:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002306:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800230a:	b292      	uxth	r2, r2
 800230c:	b15a      	cbz	r2, 8002326 <HAL_PCD_EP_Close+0xbe>
 800230e:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002312:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002316:	0512      	lsls	r2, r2, #20
 8002318:	0d12      	lsrs	r2, r2, #20
 800231a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800231e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002322:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002326:	6802      	ldr	r2, [r0, #0]
 8002328:	7819      	ldrb	r1, [r3, #0]
 800232a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002344:	e0a3      	b.n	800248e <HAL_PCD_EP_Close+0x226>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002346:	785a      	ldrb	r2, [r3, #1]
 8002348:	2a00      	cmp	r2, #0
 800234a:	d150      	bne.n	80023ee <HAL_PCD_EP_Close+0x186>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800234c:	6801      	ldr	r1, [r0, #0]
 800234e:	781c      	ldrb	r4, [r3, #0]
 8002350:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002354:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002358:	b292      	uxth	r2, r2
 800235a:	b15a      	cbz	r2, 8002374 <HAL_PCD_EP_Close+0x10c>
 800235c:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002360:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002364:	0512      	lsls	r2, r2, #20
 8002366:	0d12      	lsrs	r2, r2, #20
 8002368:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800236c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002370:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002374:	6801      	ldr	r1, [r0, #0]
 8002376:	781c      	ldrb	r4, [r3, #0]
 8002378:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 800237c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002380:	b292      	uxth	r2, r2
 8002382:	b15a      	cbz	r2, 800239c <HAL_PCD_EP_Close+0x134>
 8002384:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002388:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800238c:	0512      	lsls	r2, r2, #20
 800238e:	0d12      	lsrs	r2, r2, #20
 8002390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002394:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002398:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800239c:	6801      	ldr	r1, [r0, #0]
 800239e:	781c      	ldrb	r4, [r3, #0]
 80023a0:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 80023a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023a8:	0512      	lsls	r2, r2, #20
 80023aa:	0d12      	lsrs	r2, r2, #20
 80023ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80023b4:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80023b8:	6804      	ldr	r4, [r0, #0]
 80023ba:	781d      	ldrb	r5, [r3, #0]
 80023bc:	f834 2025 	ldrh.w	r2, [r4, r5, lsl #2]
 80023c0:	b292      	uxth	r2, r2
 80023c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023ca:	f248 0180 	movw	r1, #32896	; 0x8080
 80023ce:	430a      	orrs	r2, r1
 80023d0:	f824 2025 	strh.w	r2, [r4, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80023d4:	6802      	ldr	r2, [r0, #0]
 80023d6:	781c      	ldrb	r4, [r3, #0]
 80023d8:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e6:	430b      	orrs	r3, r1
 80023e8:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
 80023ec:	e04f      	b.n	800248e <HAL_PCD_EP_Close+0x226>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	781c      	ldrb	r4, [r3, #0]
 80023f2:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 80023f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023fa:	b292      	uxth	r2, r2
 80023fc:	b15a      	cbz	r2, 8002416 <HAL_PCD_EP_Close+0x1ae>
 80023fe:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002402:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002406:	0512      	lsls	r2, r2, #20
 8002408:	0d12      	lsrs	r2, r2, #20
 800240a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800240e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002412:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002416:	6801      	ldr	r1, [r0, #0]
 8002418:	781c      	ldrb	r4, [r3, #0]
 800241a:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 800241e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002422:	b292      	uxth	r2, r2
 8002424:	b15a      	cbz	r2, 800243e <HAL_PCD_EP_Close+0x1d6>
 8002426:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 800242a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800242e:	0512      	lsls	r2, r2, #20
 8002430:	0d12      	lsrs	r2, r2, #20
 8002432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002436:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800243a:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800243e:	6801      	ldr	r1, [r0, #0]
 8002440:	781c      	ldrb	r4, [r3, #0]
 8002442:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002446:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800244a:	0512      	lsls	r2, r2, #20
 800244c:	0d12      	lsrs	r2, r2, #20
 800244e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002456:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800245a:	6804      	ldr	r4, [r0, #0]
 800245c:	781d      	ldrb	r5, [r3, #0]
 800245e:	f834 2025 	ldrh.w	r2, [r4, r5, lsl #2]
 8002462:	b292      	uxth	r2, r2
 8002464:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246c:	f248 0180 	movw	r1, #32896	; 0x8080
 8002470:	430a      	orrs	r2, r1
 8002472:	f824 2025 	strh.w	r2, [r4, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002476:	6802      	ldr	r2, [r0, #0]
 8002478:	781c      	ldrb	r4, [r3, #0]
 800247a:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002488:	430b      	orrs	r3, r1
 800248a:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800248e:	2300      	movs	r3, #0
 8002490:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return HAL_OK;
 8002494:	4618      	mov	r0, r3
 8002496:	e000      	b.n	800249a <HAL_PCD_EP_Close+0x232>
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8002498:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 800249a:	bc30      	pop	{r4, r5}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a0:	b470      	push	{r4, r5, r6}
 80024a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80024a6:	00cd      	lsls	r5, r1, #3
 80024a8:	1a6d      	subs	r5, r5, r1
 80024aa:	00ac      	lsls	r4, r5, #2
 80024ac:	4404      	add	r4, r0
 80024ae:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
  ep->xfer_len = len;
 80024b2:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
  ep->xfer_count = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
  ep->is_in = 0;
 80024bc:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
  ep->num = ep_addr & 0x7F;
 80024c0:	f884 11cc 	strb.w	r1, [r4, #460]	; 0x1cc
   
  __HAL_LOCK(hpcd); 
 80024c4:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f000 80ad 	beq.w	8002628 <HAL_PCD_EP_Receive+0x188>
 80024ce:	2301      	movs	r3, #1
 80024d0:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80024d4:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 80024d8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
 80024dc:	4293      	cmp	r3, r2
 80024de:	d908      	bls.n	80024f2 <HAL_PCD_EP_Receive+0x52>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 80024e0:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 80024e4:	00ac      	lsls	r4, r5, #2
 80024e6:	4404      	add	r4, r0
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
  __HAL_LOCK(hpcd); 
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
 80024ee:	4613      	mov	r3, r2
 80024f0:	e006      	b.n	8002500 <HAL_PCD_EP_Receive+0x60>
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 80024f2:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 80024f6:	00a2      	lsls	r2, r4, #2
 80024f8:	4402      	add	r2, r0
 80024fa:	2400      	movs	r4, #0
 80024fc:	f8c2 41e0 	str.w	r4, [r2, #480]	; 0x1e0
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002500:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8002504:	00a2      	lsls	r2, r4, #2
 8002506:	4402      	add	r2, r0
 8002508:	f892 21d6 	ldrb.w	r2, [r2, #470]	; 0x1d6
 800250c:	bb5a      	cbnz	r2, 8002566 <HAL_PCD_EP_Receive+0xc6>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 800250e:	6806      	ldr	r6, [r0, #0]
 8002510:	f8b6 4050 	ldrh.w	r4, [r6, #80]	; 0x50
 8002514:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8002518:	0095      	lsls	r5, r2, #2
 800251a:	4405      	add	r5, r0
 800251c:	f895 21cc 	ldrb.w	r2, [r5, #460]	; 0x1cc
 8002520:	00d2      	lsls	r2, r2, #3
 8002522:	fa12 f284 	uxtah	r2, r2, r4
 8002526:	3206      	adds	r2, #6
 8002528:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 800252c:	2b3e      	cmp	r3, #62	; 0x3e
 800252e:	d90e      	bls.n	800254e <HAL_PCD_EP_Receive+0xae>
 8002530:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002534:	f013 0f1f 	tst.w	r3, #31
 8002538:	d101      	bne.n	800253e <HAL_PCD_EP_Receive+0x9e>
 800253a:	3c01      	subs	r4, #1
 800253c:	b2a4      	uxth	r4, r4
 800253e:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002542:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002546:	b2a4      	uxth	r4, r4
 8002548:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 800254c:	e051      	b.n	80025f2 <HAL_PCD_EP_Receive+0x152>
 800254e:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8002552:	f013 0f01 	tst.w	r3, #1
 8002556:	d001      	beq.n	800255c <HAL_PCD_EP_Receive+0xbc>
 8002558:	3401      	adds	r4, #1
 800255a:	b2a4      	uxth	r4, r4
 800255c:	02a4      	lsls	r4, r4, #10
 800255e:	b2a4      	uxth	r4, r4
 8002560:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8002564:	e045      	b.n	80025f2 <HAL_PCD_EP_Receive+0x152>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002566:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 800256a:	00a2      	lsls	r2, r4, #2
 800256c:	4402      	add	r2, r0
 800256e:	f892 21cd 	ldrb.w	r2, [r2, #461]	; 0x1cd
 8002572:	bb5a      	cbnz	r2, 80025cc <HAL_PCD_EP_Receive+0x12c>
 8002574:	6806      	ldr	r6, [r0, #0]
 8002576:	f8b6 4050 	ldrh.w	r4, [r6, #80]	; 0x50
 800257a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800257e:	0095      	lsls	r5, r2, #2
 8002580:	4405      	add	r5, r0
 8002582:	f895 21cc 	ldrb.w	r2, [r5, #460]	; 0x1cc
 8002586:	00d2      	lsls	r2, r2, #3
 8002588:	fa12 f284 	uxtah	r2, r2, r4
 800258c:	3206      	adds	r2, #6
 800258e:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 8002592:	2b3e      	cmp	r3, #62	; 0x3e
 8002594:	d90e      	bls.n	80025b4 <HAL_PCD_EP_Receive+0x114>
 8002596:	f3c3 144f 	ubfx	r4, r3, #5, #16
 800259a:	f013 0f1f 	tst.w	r3, #31
 800259e:	d101      	bne.n	80025a4 <HAL_PCD_EP_Receive+0x104>
 80025a0:	3c01      	subs	r4, #1
 80025a2:	b2a4      	uxth	r4, r4
 80025a4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80025a8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80025ac:	b2a4      	uxth	r4, r4
 80025ae:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80025b2:	e01e      	b.n	80025f2 <HAL_PCD_EP_Receive+0x152>
 80025b4:	f3c3 044f 	ubfx	r4, r3, #1, #16
 80025b8:	f013 0f01 	tst.w	r3, #1
 80025bc:	d001      	beq.n	80025c2 <HAL_PCD_EP_Receive+0x122>
 80025be:	3401      	adds	r4, #1
 80025c0:	b2a4      	uxth	r4, r4
 80025c2:	02a4      	lsls	r4, r4, #10
 80025c4:	b2a4      	uxth	r4, r4
 80025c6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 80025ca:	e012      	b.n	80025f2 <HAL_PCD_EP_Receive+0x152>
 80025cc:	2a01      	cmp	r2, #1
 80025ce:	d110      	bne.n	80025f2 <HAL_PCD_EP_Receive+0x152>
 80025d0:	6805      	ldr	r5, [r0, #0]
 80025d2:	f8b5 4050 	ldrh.w	r4, [r5, #80]	; 0x50
 80025d6:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80025da:	00b2      	lsls	r2, r6, #2
 80025dc:	4402      	add	r2, r0
 80025de:	f892 21cc 	ldrb.w	r2, [r2, #460]	; 0x1cc
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	fa12 f284 	uxtah	r2, r2, r4
 80025e8:	3206      	adds	r2, #6
 80025ea:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80025ee:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80025f2:	6802      	ldr	r2, [r0, #0]
 80025f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025f8:	008b      	lsls	r3, r1, #2
 80025fa:	4403      	add	r3, r0
 80025fc:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 8002600:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 800261e:	2300      	movs	r3, #0
 8002620:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
  return HAL_OK;
 8002624:	4618      	mov	r0, r3
 8002626:	e000      	b.n	800262a <HAL_PCD_EP_Receive+0x18a>
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8002628:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 800262a:	bc70      	pop	{r4, r5, r6}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop

08002630 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8002630:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002634:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002638:	008b      	lsls	r3, r1, #2
 800263a:	4418      	add	r0, r3
}
 800263c:	f8b0 01e4 	ldrh.w	r0, [r0, #484]	; 0x1e4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800264a:	00e5      	lsls	r5, r4, #3
 800264c:	1b2d      	subs	r5, r5, r4
 800264e:	00a9      	lsls	r1, r5, #2
 8002650:	4401      	add	r1, r0
 8002652:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8002654:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	640b      	str	r3, [r1, #64]	; 0x40
  ep->is_in = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8002660:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8002664:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8002668:	2b01      	cmp	r3, #1
 800266a:	f000 809b 	beq.w	80027a4 <HAL_PCD_EP_Transmit+0x160>
 800266e:	2301      	movs	r3, #1
 8002670:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002674:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8002676:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002678:	429e      	cmp	r6, r3
 800267a:	d907      	bls.n	800268c <HAL_PCD_EP_Transmit+0x48>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800267c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002680:	008a      	lsls	r2, r1, #2
 8002682:	4402      	add	r2, r0
 8002684:	1af6      	subs	r6, r6, r3
 8002686:	63d6      	str	r6, [r2, #60]	; 0x3c
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
 8002688:	461e      	mov	r6, r3
 800268a:	e005      	b.n	8002698 <HAL_PCD_EP_Transmit+0x54>
    ep->xfer_len-=len; 
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 800268c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002690:	0093      	lsls	r3, r2, #2
 8002692:	4403      	add	r3, r0
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
 8002698:	4605      	mov	r5, r0
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800269a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800269e:	0093      	lsls	r3, r2, #2
 80026a0:	4403      	add	r3, r0
 80026a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80026a6:	b9bb      	cbnz	r3, 80026d8 <HAL_PCD_EP_Transmit+0x94>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80026a8:	00e3      	lsls	r3, r4, #3
 80026aa:	1b1b      	subs	r3, r3, r4
 80026ac:	009f      	lsls	r7, r3, #2
 80026ae:	4407      	add	r7, r0
 80026b0:	b2b3      	uxth	r3, r6
 80026b2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80026b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026b6:	6800      	ldr	r0, [r0, #0]
 80026b8:	f000 fc6e 	bl	8002f98 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80026bc:	6829      	ldr	r1, [r5, #0]
 80026be:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80026c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	fa13 f382 	uxtah	r3, r3, r2
 80026cc:	3302      	adds	r3, #2
 80026ce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80026d2:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 80026d6:	e04b      	b.n	8002770 <HAL_PCD_EP_Transmit+0x12c>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80026d8:	6800      	ldr	r0, [r0, #0]
 80026da:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80026de:	0093      	lsls	r3, r2, #2
 80026e0:	442b      	add	r3, r5
 80026e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e6:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b12b      	cbz	r3, 80026fe <HAL_PCD_EP_Transmit+0xba>
    {
      pmabuffer = ep->pmaaddr1;
 80026f2:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80026f6:	0093      	lsls	r3, r2, #2
 80026f8:	442b      	add	r3, r5
 80026fa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80026fc:	e004      	b.n	8002708 <HAL_PCD_EP_Transmit+0xc4>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80026fe:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002702:	0093      	lsls	r3, r2, #2
 8002704:	442b      	add	r3, r5
 8002706:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002708:	00e3      	lsls	r3, r4, #3
 800270a:	1b1b      	subs	r3, r3, r4
 800270c:	009f      	lsls	r7, r3, #2
 800270e:	442f      	add	r7, r5
 8002710:	b2b3      	uxth	r3, r6
 8002712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002714:	f000 fc40 	bl	8002f98 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8002718:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800271c:	b99b      	cbnz	r3, 8002746 <HAL_PCD_EP_Transmit+0x102>
 800271e:	682a      	ldr	r2, [r5, #0]
 8002720:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002724:	008b      	lsls	r3, r1, #2
 8002726:	442b      	add	r3, r5
 8002728:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800272c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002734:	051b      	lsls	r3, r3, #20
 8002736:	0d1b      	lsrs	r3, r3, #20
 8002738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002740:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002744:	e014      	b.n	8002770 <HAL_PCD_EP_Transmit+0x12c>
 8002746:	2b01      	cmp	r3, #1
 8002748:	d112      	bne.n	8002770 <HAL_PCD_EP_Transmit+0x12c>
 800274a:	682a      	ldr	r2, [r5, #0]
 800274c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002750:	008b      	lsls	r3, r1, #2
 8002752:	442b      	add	r3, r5
 8002754:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8002758:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800275c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002760:	051b      	lsls	r3, r3, #20
 8002762:	0d1b      	lsrs	r3, r3, #20
 8002764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002770:	682a      	ldr	r2, [r5, #0]
 8002772:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002776:	00a3      	lsls	r3, r4, #2
 8002778:	442b      	add	r3, r5
 800277a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800277e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 800279c:	2000      	movs	r0, #0
 800279e:	f885 0370 	strb.w	r0, [r5, #880]	; 0x370
     
  return HAL_OK;
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 80027a4:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 80027a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	4605      	mov	r5, r0
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80027b4:	e23f      	b.n	8002c36 <PCD_EP_ISR_Handler+0x48e>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027b6:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    
    if (EPindex == 0)
 80027ba:	f014 040f 	ands.w	r4, r4, #15
 80027be:	f040 80c8 	bne.w	8002952 <PCD_EP_ISR_Handler+0x1aa>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 80027c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	bb9b      	cbnz	r3, 8002836 <PCD_EP_ISR_Handler+0x8e>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027ce:	8803      	ldrh	r3, [r0, #0]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	b29b      	uxth	r3, r3
 80027dc:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027de:	6829      	ldr	r1, [r5, #0]
 80027e0:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 80027e4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	fa13 f382 	uxtah	r3, r3, r2
 80027ee:	3302      	adds	r3, #2
 80027f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80027f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80027f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fc:	642b      	str	r3, [r5, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80027fe:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002800:	4413      	add	r3, r2
 8002802:	63ab      	str	r3, [r5, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8002804:	2100      	movs	r1, #0
 8002806:	4628      	mov	r0, r5
 8002808:	f002 fec8 	bl	800559c <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800280c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002810:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002814:	f000 820f 	beq.w	8002c36 <PCD_EP_ISR_Handler+0x48e>
 8002818:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 820b 	bne.w	8002c36 <PCD_EP_ISR_Handler+0x48e>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002820:	682a      	ldr	r2, [r5, #0]
 8002822:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8002834:	e1ff      	b.n	8002c36 <PCD_EP_ISR_Handler+0x48e>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002836:	8803      	ldrh	r3, [r0, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 800283e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002846:	b29b      	uxth	r3, r3
 8002848:	b303      	cbz	r3, 800288c <PCD_EP_ISR_Handler+0xe4>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800284a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800284e:	f895 31cc 	ldrb.w	r3, [r5, #460]	; 0x1cc
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	fa13 f382 	uxtah	r3, r3, r2
 8002858:	3306      	adds	r3, #6
 800285a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800285e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800286a:	f8b5 21d0 	ldrh.w	r2, [r5, #464]	; 0x1d0
 800286e:	f505 715d 	add.w	r1, r5, #884	; 0x374
 8002872:	f000 fba7 	bl	8002fc4 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002876:	682a      	ldr	r2, [r5, #0]
 8002878:	8813      	ldrh	r3, [r2, #0]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	051b      	lsls	r3, r3, #20
 8002880:	0d1b      	lsrs	r3, r3, #20
 8002882:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002884:	4628      	mov	r0, r5
 8002886:	f002 fe75 	bl	8005574 <HAL_PCD_SetupStageCallback>
 800288a:	e1d4      	b.n	8002c36 <PCD_EP_ISR_Handler+0x48e>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800288c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002890:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002894:	f000 81cf 	beq.w	8002c36 <PCD_EP_ISR_Handler+0x48e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002898:	8803      	ldrh	r3, [r0, #0]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	051b      	lsls	r3, r3, #20
 80028a0:	0d1b      	lsrs	r3, r3, #20
 80028a2:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028a4:	6828      	ldr	r0, [r5, #0]
 80028a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80028aa:	f895 31cc 	ldrb.w	r3, [r5, #460]	; 0x1cc
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	fa13 f382 	uxtah	r3, r3, r2
 80028b4:	3306      	adds	r3, #6
 80028b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80028ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80028be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c2:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
          
          if (ep->xfer_count != 0)
 80028c6:	b163      	cbz	r3, 80028e2 <PCD_EP_ISR_Handler+0x13a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80028c8:	f8b5 21d0 	ldrh.w	r2, [r5, #464]	; 0x1d0
 80028cc:	f8d5 11dc 	ldr.w	r1, [r5, #476]	; 0x1dc
 80028d0:	f000 fb78 	bl	8002fc4 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80028d4:	f8d5 21dc 	ldr.w	r2, [r5, #476]	; 0x1dc
 80028d8:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 80028dc:	4413      	add	r3, r2
 80028de:	f8c5 31dc 	str.w	r3, [r5, #476]	; 0x1dc
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80028e2:	2100      	movs	r1, #0
 80028e4:	4628      	mov	r0, r5
 80028e6:	f002 fe4d 	bl	8005584 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028ea:	682a      	ldr	r2, [r5, #0]
 80028ec:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3306      	adds	r3, #6
 80028f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80028f8:	f8d5 11d8 	ldr.w	r1, [r5, #472]	; 0x1d8
 80028fc:	293e      	cmp	r1, #62	; 0x3e
 80028fe:	d90e      	bls.n	800291e <PCD_EP_ISR_Handler+0x176>
 8002900:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8002904:	f011 0f1f 	tst.w	r1, #31
 8002908:	d101      	bne.n	800290e <PCD_EP_ISR_Handler+0x166>
 800290a:	3a01      	subs	r2, #1
 800290c:	b292      	uxth	r2, r2
 800290e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002912:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002916:	b292      	uxth	r2, r2
 8002918:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800291c:	e00a      	b.n	8002934 <PCD_EP_ISR_Handler+0x18c>
 800291e:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8002922:	f011 0f01 	tst.w	r1, #1
 8002926:	d001      	beq.n	800292c <PCD_EP_ISR_Handler+0x184>
 8002928:	3201      	adds	r2, #1
 800292a:	b292      	uxth	r2, r2
 800292c:	0292      	lsls	r2, r2, #10
 800292e:	b292      	uxth	r2, r2
 8002930:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002934:	682a      	ldr	r2, [r5, #0]
 8002936:	8813      	ldrh	r3, [r2, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	8013      	strh	r3, [r2, #0]
 8002950:	e171      	b.n	8002c36 <PCD_EP_ISR_Handler+0x48e>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002952:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002956:	b29b      	uxth	r3, r3
 8002958:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800295c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002960:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002964:	f000 80ad 	beq.w	8002ac2 <PCD_EP_ISR_Handler+0x31a>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002968:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	051b      	lsls	r3, r3, #20
 8002972:	0d1b      	lsrs	r3, r3, #20
 8002974:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002978:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800297c:	0093      	lsls	r3, r2, #2
 800297e:	442b      	add	r3, r5
 8002980:	f893 31d6 	ldrb.w	r3, [r3, #470]	; 0x1d6
 8002984:	bb03      	cbnz	r3, 80029c8 <PCD_EP_ISR_Handler+0x220>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002986:	6828      	ldr	r0, [r5, #0]
 8002988:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800298c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002990:	008b      	lsls	r3, r1, #2
 8002992:	442b      	add	r3, r5
 8002994:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	fa13 f382 	uxtah	r3, r3, r2
 800299e:	3306      	adds	r3, #6
 80029a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029a4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80029a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80029ac:	2e00      	cmp	r6, #0
 80029ae:	d05c      	beq.n	8002a6a <PCD_EP_ISR_Handler+0x2c2>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029b0:	00e3      	lsls	r3, r4, #3
 80029b2:	1b1b      	subs	r3, r3, r4
 80029b4:	0099      	lsls	r1, r3, #2
 80029b6:	4429      	add	r1, r5
 80029b8:	4633      	mov	r3, r6
 80029ba:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
 80029be:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 80029c2:	f000 faff 	bl	8002fc4 <PCD_ReadPMA>
 80029c6:	e050      	b.n	8002a6a <PCD_EP_ISR_Handler+0x2c2>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80029c8:	6828      	ldr	r0, [r5, #0]
 80029ca:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80029ce:	0093      	lsls	r3, r2, #2
 80029d0:	442b      	add	r3, r5
 80029d2:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 80029d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b1c3      	cbz	r3, 8002a14 <PCD_EP_ISR_Handler+0x26c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80029e6:	00d2      	lsls	r2, r2, #3
 80029e8:	fa12 f283 	uxtah	r2, r2, r3
 80029ec:	1c93      	adds	r3, r2, #2
 80029ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029f2:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80029f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80029fa:	b31e      	cbz	r6, 8002a44 <PCD_EP_ISR_Handler+0x29c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029fc:	00e3      	lsls	r3, r4, #3
 80029fe:	1b1b      	subs	r3, r3, r4
 8002a00:	0099      	lsls	r1, r3, #2
 8002a02:	4429      	add	r1, r5
 8002a04:	4633      	mov	r3, r6
 8002a06:	f8b1 21d2 	ldrh.w	r2, [r1, #466]	; 0x1d2
 8002a0a:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8002a0e:	f000 fad9 	bl	8002fc4 <PCD_ReadPMA>
 8002a12:	e017      	b.n	8002a44 <PCD_EP_ISR_Handler+0x29c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a18:	00d2      	lsls	r2, r2, #3
 8002a1a:	fa12 f283 	uxtah	r2, r2, r3
 8002a1e:	1d93      	adds	r3, r2, #6
 8002a20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a24:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8002a28:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8002a2c:	b156      	cbz	r6, 8002a44 <PCD_EP_ISR_Handler+0x29c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a2e:	00e3      	lsls	r3, r4, #3
 8002a30:	1b1b      	subs	r3, r3, r4
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	4429      	add	r1, r5
 8002a36:	4633      	mov	r3, r6
 8002a38:	f8b1 21d4 	ldrh.w	r2, [r1, #468]	; 0x1d4
 8002a3c:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8002a40:	f000 fac0 	bl	8002fc4 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002a44:	682a      	ldr	r2, [r5, #0]
 8002a46:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002a4a:	008b      	lsls	r3, r1, #2
 8002a4c:	442b      	add	r3, r5
 8002a4e:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 8002a52:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5a:	051b      	lsls	r3, r3, #20
 8002a5c:	0d1b      	lsrs	r3, r3, #20
 8002a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a66:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002a6a:	00e2      	lsls	r2, r4, #3
 8002a6c:	1b12      	subs	r2, r2, r4
 8002a6e:	0093      	lsls	r3, r2, #2
 8002a70:	442b      	add	r3, r5
 8002a72:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 8002a76:	4432      	add	r2, r6
 8002a78:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        ep->xfer_buff+=count;
 8002a7c:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8002a80:	4432      	add	r2, r6
 8002a82:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002a86:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8002a8a:	b13b      	cbz	r3, 8002a9c <PCD_EP_ISR_Handler+0x2f4>
 8002a8c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8002a90:	0081      	lsls	r1, r0, #2
 8002a92:	4429      	add	r1, r5
 8002a94:	f8d1 11d8 	ldr.w	r1, [r1, #472]	; 0x1d8
 8002a98:	428e      	cmp	r6, r1
 8002a9a:	d209      	bcs.n	8002ab0 <PCD_EP_ISR_Handler+0x308>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a9c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002aa0:	0093      	lsls	r3, r2, #2
 8002aa2:	442b      	add	r3, r5
 8002aa4:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	f002 fd6b 	bl	8005584 <HAL_PCD_DataOutStageCallback>
 8002aae:	e008      	b.n	8002ac2 <PCD_EP_ISR_Handler+0x31a>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ab0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8002ab4:	0081      	lsls	r1, r0, #2
 8002ab6:	4429      	add	r1, r5
 8002ab8:	f891 11cc 	ldrb.w	r1, [r1, #460]	; 0x1cc
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7ff fcef 	bl	80024a0 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8002ac2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b2 	beq.w	8002c36 <PCD_EP_ISR_Handler+0x48e>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002ad2:	682a      	ldr	r2, [r5, #0]
 8002ad4:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002ae8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002aec:	0093      	lsls	r3, r2, #2
 8002aee:	442b      	add	r3, r5
 8002af0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002af4:	b9f3      	cbnz	r3, 8002b34 <PCD_EP_ISR_Handler+0x38c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002af6:	6828      	ldr	r0, [r5, #0]
 8002af8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002afc:	00e3      	lsls	r3, r4, #3
 8002afe:	1b1b      	subs	r3, r3, r4
 8002b00:	0099      	lsls	r1, r3, #2
 8002b02:	4429      	add	r1, r5
 8002b04:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	fa13 f382 	uxtah	r3, r3, r2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b14:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1c:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d05d      	beq.n	8002bde <PCD_EP_ISR_Handler+0x436>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002b22:	00e2      	lsls	r2, r4, #3
 8002b24:	1b12      	subs	r2, r2, r4
 8002b26:	0091      	lsls	r1, r2, #2
 8002b28:	4429      	add	r1, r5
 8002b2a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8002b2c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002b2e:	f000 fa33 	bl	8002f98 <PCD_WritePMA>
 8002b32:	e054      	b.n	8002bde <PCD_EP_ISR_Handler+0x436>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002b34:	6828      	ldr	r0, [r5, #0]
 8002b36:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8002b3a:	0093      	lsls	r3, r2, #2
 8002b3c:	442b      	add	r3, r5
 8002b3e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002b42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b1d3      	cbz	r3, 8002b84 <PCD_EP_ISR_Handler+0x3dc>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b52:	00d2      	lsls	r2, r2, #3
 8002b54:	fa12 f283 	uxtah	r2, r2, r3
 8002b58:	1c93      	adds	r3, r2, #2
 8002b5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b66:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002b6a:	008a      	lsls	r2, r1, #2
 8002b6c:	442a      	add	r2, r5
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8002b70:	b313      	cbz	r3, 8002bb8 <PCD_EP_ISR_Handler+0x410>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002b72:	00e2      	lsls	r2, r4, #3
 8002b74:	1b12      	subs	r2, r2, r4
 8002b76:	0091      	lsls	r1, r2, #2
 8002b78:	4429      	add	r1, r5
 8002b7a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8002b7c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002b7e:	f000 fa0b 	bl	8002f98 <PCD_WritePMA>
 8002b82:	e019      	b.n	8002bb8 <PCD_EP_ISR_Handler+0x410>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b84:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b88:	00d2      	lsls	r2, r2, #3
 8002b8a:	fa12 f283 	uxtah	r2, r2, r3
 8002b8e:	1d93      	adds	r3, r2, #6
 8002b90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002ba0:	008a      	lsls	r2, r1, #2
 8002ba2:	442a      	add	r2, r5
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8002ba6:	b13b      	cbz	r3, 8002bb8 <PCD_EP_ISR_Handler+0x410>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002ba8:	00e2      	lsls	r2, r4, #3
 8002baa:	1b12      	subs	r2, r2, r4
 8002bac:	0091      	lsls	r1, r2, #2
 8002bae:	4429      	add	r1, r5
 8002bb0:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8002bb2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8002bb4:	f000 f9f0 	bl	8002f98 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002bb8:	682a      	ldr	r2, [r5, #0]
 8002bba:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002bbe:	008b      	lsls	r3, r1, #2
 8002bc0:	442b      	add	r3, r5
 8002bc2:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8002bc6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bce:	051b      	lsls	r3, r3, #20
 8002bd0:	0d1b      	lsrs	r3, r3, #20
 8002bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bde:	6828      	ldr	r0, [r5, #0]
 8002be0:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002be4:	00e2      	lsls	r2, r4, #3
 8002be6:	1b12      	subs	r2, r2, r4
 8002be8:	0093      	lsls	r3, r2, #2
 8002bea:	442b      	add	r3, r5
 8002bec:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002bf0:	00d2      	lsls	r2, r2, #3
 8002bf2:	fa12 f281 	uxtah	r2, r2, r1
 8002bf6:	3202      	adds	r2, #2
 8002bf8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002bfc:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8002c00:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8002c06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c08:	440a      	add	r2, r1
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	b94b      	cbnz	r3, 8002c24 <PCD_EP_ISR_Handler+0x47c>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c10:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002c14:	00a3      	lsls	r3, r4, #2
 8002c16:	442b      	add	r3, r5
 8002c18:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f002 fcbd 	bl	800559c <HAL_PCD_DataInStageCallback>
 8002c22:	e008      	b.n	8002c36 <PCD_EP_ISR_Handler+0x48e>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c24:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002c28:	00a1      	lsls	r1, r4, #2
 8002c2a:	4429      	add	r1, r5
 8002c2c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff fd07 	bl	8002644 <HAL_PCD_EP_Transmit>
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002c36:	6828      	ldr	r0, [r5, #0]
 8002c38:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002c42:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002c46:	f47f adb6 	bne.w	80027b6 <PCD_EP_ISR_Handler+0xe>
        }
      } 
    }
  }
  return HAL_OK;
}
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}

08002c50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8002c54:	6803      	ldr	r3, [r0, #0]
 8002c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c5a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002c5e:	d001      	beq.n	8002c64 <HAL_PCD_IRQHandler+0x14>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8002c60:	f7ff fda2 	bl	80027a8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	b173      	cbz	r3, 8002c90 <HAL_PCD_IRQHandler+0x40>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c72:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f002 fc9c 	bl	80055c0 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff f8f4 	bl	8001e78 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b13b      	cbz	r3, 8002cae <HAL_PCD_IRQHandler+0x5e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8002c9e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b13b      	cbz	r3, 8002ccc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002cbc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b1c3      	cbz	r3, 8002d0c <HAL_PCD_IRQHandler+0xbc>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 8002cda:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8002cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f002 fc7f 	bl	80055f8 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	b30b      	cbz	r3, 8002d5e <HAL_PCD_IRQHandler+0x10e>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002d1a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002d2a:	6822      	ldr	r2, [r4, #0]
 8002d2c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b913      	cbnz	r3, 8002d5e <HAL_PCD_IRQHandler+0x10e>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f002 fc3d 	bl	80055d8 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b153      	cbz	r3, 8002d82 <HAL_PCD_IRQHandler+0x132>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8002d6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f002 fc19 	bl	80055b4 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b13b      	cbz	r3, 8002da0 <HAL_PCD_IRQHandler+0x150>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8002d90:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	bf00      	nop

08002da4 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002da4:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d057      	beq.n	8002e5c <HAL_PCD_EP_SetStall+0xb8>
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dac:	b410      	push	{r4}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002dae:	2301      	movs	r3, #1
 8002db0:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
   
  if ((0x80 & ep_addr) == 0x80)
 8002db4:	b24a      	sxtb	r2, r1
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	da07      	bge.n	8002dca <HAL_PCD_EP_SetStall+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002dba:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002dbe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002dc2:	00a3      	lsls	r3, r4, #2
 8002dc4:	3328      	adds	r3, #40	; 0x28
 8002dc6:	4403      	add	r3, r0
 8002dc8:	e006      	b.n	8002dd8 <HAL_PCD_EP_SetStall+0x34>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dca:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8002dce:	00a3      	lsls	r3, r4, #2
 8002dd0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002dd4:	4403      	add	r3, r0
 8002dd6:	3304      	adds	r3, #4
  }
  
  ep->is_stall = 1;
 8002dd8:	2401      	movs	r4, #1
 8002dda:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8002ddc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002de0:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002de2:	0fd2      	lsrs	r2, r2, #31
 8002de4:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0)
 8002de6:	b991      	cbnz	r1, 8002e0e <HAL_PCD_EP_SetStall+0x6a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002de8:	6802      	ldr	r2, [r0, #0]
 8002dea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002dfc:	f083 0310 	eor.w	r3, r3, #16
 8002e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e08:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002e0c:	e021      	b.n	8002e52 <HAL_PCD_EP_SetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 8002e0e:	b182      	cbz	r2, 8002e32 <HAL_PCD_EP_SetStall+0x8e>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8002e10:	6802      	ldr	r2, [r0, #0]
 8002e12:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e20:	f083 0310 	eor.w	r3, r3, #16
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002e30:	e00f      	b.n	8002e52 <HAL_PCD_EP_SetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8002e32:	6802      	ldr	r2, [r0, #0]
 8002e34:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8002e52:	2300      	movs	r3, #0
 8002e54:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
  return HAL_OK;
 8002e58:	4618      	mov	r0, r3
 8002e5a:	e001      	b.n	8002e60 <HAL_PCD_EP_SetStall+0xbc>
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	4770      	bx	lr
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e68:	b410      	push	{r4}
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002e6a:	b24a      	sxtb	r2, r1
 8002e6c:	2a00      	cmp	r2, #0
 8002e6e:	da07      	bge.n	8002e80 <HAL_PCD_EP_ClrStall+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e70:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002e74:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002e78:	00a3      	lsls	r3, r4, #2
 8002e7a:	3328      	adds	r3, #40	; 0x28
 8002e7c:	4403      	add	r3, r0
 8002e7e:	e006      	b.n	8002e8e <HAL_PCD_EP_ClrStall+0x26>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e80:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8002e84:	00a3      	lsls	r3, r4, #2
 8002e86:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002e8a:	4403      	add	r3, r0
 8002e8c:	3304      	adds	r3, #4
  }
  
  ep->is_stall = 0;
 8002e8e:	2400      	movs	r4, #0
 8002e90:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8002e92:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002e96:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002e98:	0fd2      	lsrs	r2, r2, #31
 8002e9a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002e9c:	f890 2370 	ldrb.w	r2, [r0, #880]	; 0x370
 8002ea0:	2a01      	cmp	r2, #1
 8002ea2:	d054      	beq.n	8002f4e <HAL_PCD_EP_ClrStall+0xe6>
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370
  
  if (ep->is_in)
 8002eaa:	785a      	ldrb	r2, [r3, #1]
 8002eac:	b32a      	cbz	r2, 8002efa <HAL_PCD_EP_ClrStall+0x92>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002eae:	6801      	ldr	r1, [r0, #0]
 8002eb0:	781c      	ldrb	r4, [r3, #0]
 8002eb2:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002eb6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	b15a      	cbz	r2, 8002ed6 <HAL_PCD_EP_ClrStall+0x6e>
 8002ebe:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002ec2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ec6:	0512      	lsls	r2, r2, #20
 8002ec8:	0d12      	lsrs	r2, r2, #20
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002ed2:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ed6:	6802      	ldr	r2, [r0, #0]
 8002ed8:	7819      	ldrb	r1, [r3, #0]
 8002eda:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002ef8:	e024      	b.n	8002f44 <HAL_PCD_EP_ClrStall+0xdc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002efa:	6801      	ldr	r1, [r0, #0]
 8002efc:	781c      	ldrb	r4, [r3, #0]
 8002efe:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002f02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f06:	b292      	uxth	r2, r2
 8002f08:	b15a      	cbz	r2, 8002f22 <HAL_PCD_EP_ClrStall+0xba>
 8002f0a:	f831 2024 	ldrh.w	r2, [r1, r4, lsl #2]
 8002f0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f12:	0512      	lsls	r2, r2, #20
 8002f14:	0d12      	lsrs	r2, r2, #20
 8002f16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1e:	f821 2024 	strh.w	r2, [r1, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002f22:	6802      	ldr	r2, [r0, #0]
 8002f24:	7819      	ldrb	r1, [r3, #0]
 8002f26:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8002f44:	2300      	movs	r3, #0
 8002f46:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
    
  return HAL_OK;
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	e000      	b.n	8002f50 <HAL_PCD_EP_ClrStall+0xe8>
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8002f4e:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8002f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop

08002f58 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8002f58:	b430      	push	{r4, r5}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8002f5a:	f001 0580 	and.w	r5, r1, #128	; 0x80
 8002f5e:	b2ad      	uxth	r5, r5
 8002f60:	b13d      	cbz	r5, 8002f72 <HAL_PCDEx_PMAConfig+0x1a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002f62:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002f66:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002f6a:	008d      	lsls	r5, r1, #2
 8002f6c:	3528      	adds	r5, #40	; 0x28
 8002f6e:	4428      	add	r0, r5
 8002f70:	e006      	b.n	8002f80 <HAL_PCDEx_PMAConfig+0x28>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f72:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002f76:	008c      	lsls	r4, r1, #2
 8002f78:	f504 74e4 	add.w	r4, r4, #456	; 0x1c8
 8002f7c:	4420      	add	r0, r4
 8002f7e:	3004      	adds	r0, #4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f80:	b912      	cbnz	r2, 8002f88 <HAL_PCDEx_PMAConfig+0x30>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8002f82:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002f84:	8083      	strh	r3, [r0, #4]
 8002f86:	e004      	b.n	8002f92 <HAL_PCDEx_PMAConfig+0x3a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8002f8c:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
 8002f8e:	0c1b      	lsrs	r3, r3, #16
 8002f90:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	bc30      	pop	{r4, r5}
 8002f96:	4770      	bx	lr

08002f98 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002f98:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002f9e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0; i--)
 8002fa6:	e007      	b.n	8002fb8 <PCD_WritePMA+0x20>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8002fa8:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8002faa:	7848      	ldrb	r0, [r1, #1]
 8002fac:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8002fb0:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8002fb4:	3102      	adds	r1, #2
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f5      	bne.n	8002fa8 <PCD_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002fc8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0; i--)
 8002fd0:	e004      	b.n	8002fdc <PCD_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002fd2:	6810      	ldr	r0, [r2, #0]
 8002fd4:	f821 0b02 	strh.w	r0, [r1], #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 8002fd8:	3b01      	subs	r3, #1
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002fda:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f8      	bne.n	8002fd2 <PCD_ReadPMA+0xe>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	6803      	ldr	r3, [r0, #0]
 8002fec:	f013 0f01 	tst.w	r3, #1
 8002ff0:	f000 809d 	beq.w	800312e <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ff4:	4bb5      	ldr	r3, [pc, #724]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCC_OscConfig+0x32>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003000:	4bb2      	ldr	r3, [pc, #712]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d11b      	bne.n	8003044 <HAL_RCC_OscConfig+0x60>
 800300c:	4baf      	ldr	r3, [pc, #700]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800301a:	fa93 f3a3 	rbit	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301e:	4bab      	ldr	r3, [pc, #684]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	f013 0f01 	tst.w	r3, #1
 800303a:	d078      	beq.n	800312e <HAL_RCC_OscConfig+0x14a>
 800303c:	6863      	ldr	r3, [r4, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d175      	bne.n	800312e <HAL_RCC_OscConfig+0x14a>
 8003042:	e2b6      	b.n	80035b2 <HAL_RCC_OscConfig+0x5ce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x74>
 800304c:	4a9f      	ldr	r2, [pc, #636]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e026      	b.n	80030a6 <HAL_RCC_OscConfig+0xc2>
 8003058:	b963      	cbnz	r3, 8003074 <HAL_RCC_OscConfig+0x90>
 800305a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800305e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e018      	b.n	80030a6 <HAL_RCC_OscConfig+0xc2>
 8003074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0xb0>
 800307a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800307e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xc2>
 8003094:	4b8d      	ldr	r3, [pc, #564]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030a4:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030a6:	4989      	ldr	r1, [pc, #548]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 80030a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	68a3      	ldr	r3, [r4, #8]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	b1eb      	cbz	r3, 80030f4 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fffc 	bl	80010b4 <HAL_GetTick>
 80030bc:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e005      	b.n	80030cc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fd fff8 	bl	80010b4 <HAL_GetTick>
 80030c4:	1b40      	subs	r0, r0, r5
 80030c6:	2864      	cmp	r0, #100	; 0x64
 80030c8:	f200 8275 	bhi.w	80035b6 <HAL_RCC_OscConfig+0x5d2>
 80030cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d0:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d4:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	f013 0f01 	tst.w	r3, #1
 80030f0:	d0e6      	beq.n	80030c0 <HAL_RCC_OscConfig+0xdc>
 80030f2:	e01c      	b.n	800312e <HAL_RCC_OscConfig+0x14a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fd ffde 	bl	80010b4 <HAL_GetTick>
 80030f8:	4605      	mov	r5, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	e005      	b.n	8003108 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fc:	f7fd ffda 	bl	80010b4 <HAL_GetTick>
 8003100:	1b40      	subs	r0, r0, r5
 8003102:	2864      	cmp	r0, #100	; 0x64
 8003104:	f200 8259 	bhi.w	80035ba <HAL_RCC_OscConfig+0x5d6>
 8003108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310c:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003110:	4b6e      	ldr	r3, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	f013 0f01 	tst.w	r3, #1
 800312c:	d1e6      	bne.n	80030fc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	f013 0f02 	tst.w	r3, #2
 8003134:	f000 8090 	beq.w	8003258 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003138:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f013 0f0c 	tst.w	r3, #12
 8003140:	d00a      	beq.n	8003158 <HAL_RCC_OscConfig+0x174>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003142:	4b62      	ldr	r3, [pc, #392]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d127      	bne.n	800319e <HAL_RCC_OscConfig+0x1ba>
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003156:	d122      	bne.n	800319e <HAL_RCC_OscConfig+0x1ba>
 8003158:	2302      	movs	r3, #2
 800315a:	fa93 f3a3 	rbit	r3, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2302      	movs	r3, #2
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	f013 0f01 	tst.w	r3, #1
 8003178:	d003      	beq.n	8003182 <HAL_RCC_OscConfig+0x19e>
 800317a:	6923      	ldr	r3, [r4, #16]
 800317c:	2b01      	cmp	r3, #1
 800317e:	f040 821e 	bne.w	80035be <HAL_RCC_OscConfig+0x5da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4852      	ldr	r0, [pc, #328]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003184:	6803      	ldr	r3, [r0, #0]
 8003186:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 800318a:	6963      	ldr	r3, [r4, #20]
 800318c:	22f8      	movs	r2, #248	; 0xf8
 800318e:	fa92 f2a2 	rbit	r2, r2
 8003192:	fab2 f282 	clz	r2, r2
 8003196:	4093      	lsls	r3, r2
 8003198:	430b      	orrs	r3, r1
 800319a:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319c:	e05c      	b.n	8003258 <HAL_RCC_OscConfig+0x274>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	b39b      	cbz	r3, 800320a <HAL_RCC_OscConfig+0x226>
 80031a2:	2201      	movs	r2, #1
 80031a4:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80031b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80031b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fd ff7c 	bl	80010b4 <HAL_GetTick>
 80031bc:	4605      	mov	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	e005      	b.n	80031cc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fd ff78 	bl	80010b4 <HAL_GetTick>
 80031c4:	1b40      	subs	r0, r0, r5
 80031c6:	2802      	cmp	r0, #2
 80031c8:	f200 81fb 	bhi.w	80035c2 <HAL_RCC_OscConfig+0x5de>
 80031cc:	2302      	movs	r3, #2
 80031ce:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2302      	movs	r3, #2
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	f013 0f01 	tst.w	r3, #1
 80031ec:	d0e8      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1dc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4837      	ldr	r0, [pc, #220]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 80031f6:	6963      	ldr	r3, [r4, #20]
 80031f8:	22f8      	movs	r2, #248	; 0xf8
 80031fa:	fa92 f2a2 	rbit	r2, r2
 80031fe:	fab2 f282 	clz	r2, r2
 8003202:	4093      	lsls	r3, r2
 8003204:	430b      	orrs	r3, r1
 8003206:	6003      	str	r3, [r0, #0]
 8003208:	e026      	b.n	8003258 <HAL_RCC_OscConfig+0x274>
 800320a:	2301      	movs	r3, #1
 800320c:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800321a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fd ff47 	bl	80010b4 <HAL_GetTick>
 8003226:	4605      	mov	r5, r0
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003228:	e005      	b.n	8003236 <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322a:	f7fd ff43 	bl	80010b4 <HAL_GetTick>
 800322e:	1b40      	subs	r0, r0, r5
 8003230:	2802      	cmp	r0, #2
 8003232:	f200 81c8 	bhi.w	80035c6 <HAL_RCC_OscConfig+0x5e2>
 8003236:	2302      	movs	r3, #2
 8003238:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2302      	movs	r3, #2
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	f013 0f01 	tst.w	r3, #1
 8003256:	d1e8      	bne.n	800322a <HAL_RCC_OscConfig+0x246>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	f013 0f08 	tst.w	r3, #8
 800325e:	d053      	beq.n	8003308 <HAL_RCC_OscConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003260:	69a3      	ldr	r3, [r4, #24]
 8003262:	b333      	cbz	r3, 80032b2 <HAL_RCC_OscConfig+0x2ce>
 8003264:	2201      	movs	r2, #1
 8003266:	fa92 f3a2 	rbit	r3, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	4918      	ldr	r1, [pc, #96]	; (80032d0 <HAL_RCC_OscConfig+0x2ec>)
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7fd ff1e 	bl	80010b4 <HAL_GetTick>
 8003278:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	e005      	b.n	8003288 <HAL_RCC_OscConfig+0x2a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327c:	f7fd ff1a 	bl	80010b4 <HAL_GetTick>
 8003280:	1b40      	subs	r0, r0, r5
 8003282:	2802      	cmp	r0, #2
 8003284:	f200 81a1 	bhi.w	80035ca <HAL_RCC_OscConfig+0x5e6>
 8003288:	2302      	movs	r3, #2
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	fa93 f2a3 	rbit	r2, r3
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_RCC_OscConfig+0x2e8>)
 8003298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	f013 0f01 	tst.w	r3, #1
 80032ae:	d0e5      	beq.n	800327c <HAL_RCC_OscConfig+0x298>
 80032b0:	e02a      	b.n	8003308 <HAL_RCC_OscConfig+0x324>
 80032b2:	2301      	movs	r3, #1
 80032b4:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <HAL_RCC_OscConfig+0x2ec>)
 80032c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7fd fef6 	bl	80010b4 <HAL_GetTick>
 80032c8:	4605      	mov	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ca:	e009      	b.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fd feee 	bl	80010b4 <HAL_GetTick>
 80032d8:	1b40      	subs	r0, r0, r5
 80032da:	2802      	cmp	r0, #2
 80032dc:	f200 8177 	bhi.w	80035ce <HAL_RCC_OscConfig+0x5ea>
 80032e0:	2302      	movs	r3, #2
 80032e2:	fa93 f2a3 	rbit	r2, r3
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	fa93 f2a3 	rbit	r2, r3
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ee:	4ac0      	ldr	r2, [pc, #768]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 80032f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	f013 0f01 	tst.w	r3, #1
 8003306:	d1e5      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	f013 0f04 	tst.w	r3, #4
 800330e:	f000 80ba 	beq.w	8003486 <HAL_RCC_OscConfig+0x4a2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003312:	4bb7      	ldr	r3, [pc, #732]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800331a:	d10b      	bne.n	8003334 <HAL_RCC_OscConfig+0x350>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4bb4      	ldr	r3, [pc, #720]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003324:	61da      	str	r2, [r3, #28]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003330:	2501      	movs	r5, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x352>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8003334:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4baf      	ldr	r3, [pc, #700]	; (80035f4 <HAL_RCC_OscConfig+0x610>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800333e:	d113      	bne.n	8003368 <HAL_RCC_OscConfig+0x384>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003340:	4aac      	ldr	r2, [pc, #688]	; (80035f4 <HAL_RCC_OscConfig+0x610>)
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fd feb3 	bl	80010b4 <HAL_GetTick>
 800334e:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e005      	b.n	800335e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fd feaf 	bl	80010b4 <HAL_GetTick>
 8003356:	1b80      	subs	r0, r0, r6
 8003358:	2864      	cmp	r0, #100	; 0x64
 800335a:	f200 813a 	bhi.w	80035d2 <HAL_RCC_OscConfig+0x5ee>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4ba5      	ldr	r3, [pc, #660]	; (80035f4 <HAL_RCC_OscConfig+0x610>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003366:	d0f4      	beq.n	8003352 <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	68e3      	ldr	r3, [r4, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x396>
 800336e:	4aa0      	ldr	r2, [pc, #640]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003370:	6a13      	ldr	r3, [r2, #32]
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	e022      	b.n	80033c0 <HAL_RCC_OscConfig+0x3dc>
 800337a:	b963      	cbnz	r3, 8003396 <HAL_RCC_OscConfig+0x3b2>
 800337c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003380:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	621a      	str	r2, [r3, #32]
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	f022 0204 	bic.w	r2, r2, #4
 8003392:	621a      	str	r2, [r3, #32]
 8003394:	e014      	b.n	80033c0 <HAL_RCC_OscConfig+0x3dc>
 8003396:	2b05      	cmp	r3, #5
 8003398:	d109      	bne.n	80033ae <HAL_RCC_OscConfig+0x3ca>
 800339a:	4b95      	ldr	r3, [pc, #596]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	f042 0204 	orr.w	r2, r2, #4
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	6a1a      	ldr	r2, [r3, #32]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x3dc>
 80033ae:	4b90      	ldr	r3, [pc, #576]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	621a      	str	r2, [r3, #32]
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c0:	68e3      	ldr	r3, [r4, #12]
 80033c2:	b36b      	cbz	r3, 8003420 <HAL_RCC_OscConfig+0x43c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fd fe76 	bl	80010b4 <HAL_GetTick>
 80033c8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e007      	b.n	80033dc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fd fe72 	bl	80010b4 <HAL_GetTick>
 80033d0:	1b80      	subs	r0, r0, r6
 80033d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80033d6:	4298      	cmp	r0, r3
 80033d8:	f200 80fd 	bhi.w	80035d6 <HAL_RCC_OscConfig+0x5f2>
 80033dc:	2302      	movs	r3, #2
 80033de:	fa93 f2a3 	rbit	r2, r3
 80033e2:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_OscConfig+0x418>
 80033f6:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 80033f8:	6a1a      	ldr	r2, [r3, #32]
 80033fa:	e004      	b.n	8003406 <HAL_RCC_OscConfig+0x422>
 80033fc:	2302      	movs	r3, #2
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003406:	2302      	movs	r3, #2
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	f013 0f01 	tst.w	r3, #1
 800341c:	d0d6      	beq.n	80033cc <HAL_RCC_OscConfig+0x3e8>
 800341e:	e02c      	b.n	800347a <HAL_RCC_OscConfig+0x496>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003420:	f7fd fe48 	bl	80010b4 <HAL_GetTick>
 8003424:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	e007      	b.n	8003438 <HAL_RCC_OscConfig+0x454>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fd fe44 	bl	80010b4 <HAL_GetTick>
 800342c:	1b80      	subs	r0, r0, r6
 800342e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003432:	4298      	cmp	r0, r3
 8003434:	f200 80d1 	bhi.w	80035da <HAL_RCC_OscConfig+0x5f6>
 8003438:	2302      	movs	r3, #2
 800343a:	fa93 f2a3 	rbit	r2, r3
 800343e:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0x474>
 8003452:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	e004      	b.n	8003462 <HAL_RCC_OscConfig+0x47e>
 8003458:	2302      	movs	r3, #2
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003462:	2302      	movs	r3, #2
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	fab3 f383 	clz	r3, r3
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	f013 0f01 	tst.w	r3, #1
 8003478:	d1d6      	bne.n	8003428 <HAL_RCC_OscConfig+0x444>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800347a:	b125      	cbz	r5, 8003486 <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347c:	4a5c      	ldr	r2, [pc, #368]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 800347e:	69d3      	ldr	r3, [r2, #28]
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003486:	69e3      	ldr	r3, [r4, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a8 	beq.w	80035de <HAL_RCC_OscConfig+0x5fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800348e:	4a58      	ldr	r2, [pc, #352]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003490:	6852      	ldr	r2, [r2, #4]
 8003492:	f002 020c 	and.w	r2, r2, #12
 8003496:	2a08      	cmp	r2, #8
 8003498:	f000 80a3 	beq.w	80035e2 <HAL_RCC_OscConfig+0x5fe>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349c:	2b02      	cmp	r3, #2
 800349e:	d15d      	bne.n	800355c <HAL_RCC_OscConfig+0x578>
 80034a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a4:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80034b2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fd fdfb 	bl	80010b4 <HAL_GetTick>
 80034be:	4605      	mov	r5, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c0:	e005      	b.n	80034ce <HAL_RCC_OscConfig+0x4ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fd fdf7 	bl	80010b4 <HAL_GetTick>
 80034c6:	1b40      	subs	r0, r0, r5
 80034c8:	2802      	cmp	r0, #2
 80034ca:	f200 808c 	bhi.w	80035e6 <HAL_RCC_OscConfig+0x602>
 80034ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d2:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	f013 0f01 	tst.w	r3, #1
 80034f2:	d1e6      	bne.n	80034c2 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f4:	483e      	ldr	r0, [pc, #248]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 80034f6:	6843      	ldr	r3, [r0, #4]
 80034f8:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 80034fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034fe:	6a22      	ldr	r2, [r4, #32]
 8003500:	4313      	orrs	r3, r2
 8003502:	430b      	orrs	r3, r1
 8003504:	6043      	str	r3, [r0, #4]
 8003506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800350a:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8003518:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fd fdc8 	bl	80010b4 <HAL_GetTick>
 8003524:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003526:	e004      	b.n	8003532 <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd fdc4 	bl	80010b4 <HAL_GetTick>
 800352c:	1b00      	subs	r0, r0, r4
 800352e:	2802      	cmp	r0, #2
 8003530:	d85b      	bhi.n	80035ea <HAL_RCC_OscConfig+0x606>
 8003532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003536:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	f013 0f01 	tst.w	r3, #1
 8003556:	d0e7      	beq.n	8003528 <HAL_RCC_OscConfig+0x544>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003558:	2000      	movs	r0, #0
 800355a:	e04e      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
 800355c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003560:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800356e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fd fd9d 	bl	80010b4 <HAL_GetTick>
 800357a:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357c:	e004      	b.n	8003588 <HAL_RCC_OscConfig+0x5a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd fd99 	bl	80010b4 <HAL_GetTick>
 8003582:	1b00      	subs	r0, r0, r4
 8003584:	2802      	cmp	r0, #2
 8003586:	d837      	bhi.n	80035f8 <HAL_RCC_OscConfig+0x614>
 8003588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358c:	fa93 f3a3 	rbit	r3, r3
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_RCC_OscConfig+0x60c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	f013 0f01 	tst.w	r3, #1
 80035ac:	d1e7      	bne.n	800357e <HAL_RCC_OscConfig+0x59a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80035ae:	2000      	movs	r0, #0
 80035b0:	e023      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 80035b2:	2001      	movs	r0, #1
 80035b4:	e021      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035b6:	2003      	movs	r0, #3
 80035b8:	e01f      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035ba:	2003      	movs	r0, #3
 80035bc:	e01d      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 80035be:	2001      	movs	r0, #1
 80035c0:	e01b      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035c2:	2003      	movs	r0, #3
 80035c4:	e019      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035c6:	2003      	movs	r0, #3
 80035c8:	e017      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80035ca:	2003      	movs	r0, #3
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80035ce:	2003      	movs	r0, #3
 80035d0:	e013      	b.n	80035fa <HAL_RCC_OscConfig+0x616>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80035d2:	2003      	movs	r0, #3
 80035d4:	e011      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80035d6:	2003      	movs	r0, #3
 80035d8:	e00f      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80035da:	2003      	movs	r0, #3
 80035dc:	e00d      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80035de:	2000      	movs	r0, #0
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035e2:	2001      	movs	r0, #1
 80035e4:	e009      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035e6:	2003      	movs	r0, #3
 80035e8:	e007      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035ea:	2003      	movs	r0, #3
 80035ec:	e005      	b.n	80035fa <HAL_RCC_OscConfig+0x616>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80035f8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80035fa:	b002      	add	sp, #8
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	bf00      	nop

08003600 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003602:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003604:	f003 020c 	and.w	r2, r3, #12
 8003608:	2a08      	cmp	r2, #8
 800360a:	d125      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800360c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8003610:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003614:	fa92 f2a2 	rbit	r2, r2
 8003618:	fab2 f282 	clz	r2, r2
 800361c:	fa21 f202 	lsr.w	r2, r1, r2
 8003620:	490f      	ldr	r1, [pc, #60]	; (8003660 <HAL_RCC_GetSysClockFreq+0x60>)
 8003622:	5c8a      	ldrb	r2, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003624:	490d      	ldr	r1, [pc, #52]	; (800365c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003626:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003628:	f001 000f 	and.w	r0, r1, #15
 800362c:	210f      	movs	r1, #15
 800362e:	fa91 f1a1 	rbit	r1, r1
 8003632:	fab1 f181 	clz	r1, r1
 8003636:	fa20 f101 	lsr.w	r1, r0, r1
 800363a:	480a      	ldr	r0, [pc, #40]	; (8003664 <HAL_RCC_GetSysClockFreq+0x64>)
 800363c:	5c40      	ldrb	r0, [r0, r1]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800363e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003642:	d005      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_GetSysClockFreq+0x68>)
 8003646:	fbb3 f0f0 	udiv	r0, r3, r0
 800364a:	fb00 f002 	mul.w	r0, r0, r2
 800364e:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003652:	fb00 f002 	mul.w	r0, r0, r2
 8003656:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003658:	4803      	ldr	r0, [pc, #12]	; (8003668 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800365a:	4770      	bx	lr
 800365c:	40021000 	.word	0x40021000
 8003660:	0800cd28 	.word	0x0800cd28
 8003664:	0800cd18 	.word	0x0800cd18
 8003668:	007a1200 	.word	0x007a1200
 800366c:	003d0900 	.word	0x003d0900

08003670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b570      	push	{r4, r5, r6, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003672:	4b74      	ldr	r3, [pc, #464]	; (8003844 <HAL_RCC_ClockConfig+0x1d4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	428b      	cmp	r3, r1
 800367c:	d20b      	bcs.n	8003696 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4a71      	ldr	r2, [pc, #452]	; (8003844 <HAL_RCC_ClockConfig+0x1d4>)
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	f023 0307 	bic.w	r3, r3, #7
 8003686:	430b      	orrs	r3, r1
 8003688:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4299      	cmp	r1, r3
 8003692:	f040 80c6 	bne.w	8003822 <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003696:	6803      	ldr	r3, [r0, #0]
 8003698:	f013 0f02 	tst.w	r3, #2
 800369c:	d006      	beq.n	80036ac <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369e:	4c6a      	ldr	r4, [pc, #424]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 80036a0:	6863      	ldr	r3, [r4, #4]
 80036a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a6:	6883      	ldr	r3, [r0, #8]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	6063      	str	r3, [r4, #4]
 80036ac:	460d      	mov	r5, r1
 80036ae:	4604      	mov	r4, r0
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b0:	6803      	ldr	r3, [r0, #0]
 80036b2:	f013 0f01 	tst.w	r3, #1
 80036b6:	d075      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x134>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b8:	6842      	ldr	r2, [r0, #4]
 80036ba:	2a01      	cmp	r2, #1
 80036bc:	d113      	bne.n	80036e6 <HAL_RCC_ClockConfig+0x76>
 80036be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c2:	fa93 f3a3 	rbit	r3, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b60      	ldr	r3, [pc, #384]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	fa21 f303 	lsr.w	r3, r1, r3
 80036de:	f013 0f01 	tst.w	r3, #1
 80036e2:	d127      	bne.n	8003734 <HAL_RCC_ClockConfig+0xc4>
 80036e4:	e09f      	b.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e6:	2a02      	cmp	r2, #2
 80036e8:	d113      	bne.n	8003712 <HAL_RCC_ClockConfig+0xa2>
 80036ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ee:	fa93 f3a3 	rbit	r3, r3
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	fa21 f303 	lsr.w	r3, r1, r3
 800370a:	f013 0f01 	tst.w	r3, #1
 800370e:	d111      	bne.n	8003734 <HAL_RCC_ClockConfig+0xc4>
 8003710:	e08b      	b.n	800382a <HAL_RCC_ClockConfig+0x1ba>
 8003712:	2302      	movs	r3, #2
 8003714:	fa93 f3a3 	rbit	r3, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	4b4b      	ldr	r3, [pc, #300]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	2302      	movs	r3, #2
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	fa21 f303 	lsr.w	r3, r1, r3
 800372e:	f013 0f01 	tst.w	r3, #1
 8003732:	d07c      	beq.n	800382e <HAL_RCC_ClockConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003734:	4944      	ldr	r1, [pc, #272]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 8003736:	684b      	ldr	r3, [r1, #4]
 8003738:	f023 0303 	bic.w	r3, r3, #3
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fd fcb8 	bl	80010b4 <HAL_GetTick>
 8003744:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	6863      	ldr	r3, [r4, #4]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10e      	bne.n	800376a <HAL_RCC_ClockConfig+0xfa>
 800374c:	e006      	b.n	800375c <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fd fcb1 	bl	80010b4 <HAL_GetTick>
 8003752:	1b80      	subs	r0, r0, r6
 8003754:	f241 3388 	movw	r3, #5000	; 0x1388
 8003758:	4298      	cmp	r0, r3
 800375a:	d86a      	bhi.n	8003832 <HAL_RCC_ClockConfig+0x1c2>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800375c:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b04      	cmp	r3, #4
 8003766:	d1f2      	bne.n	800374e <HAL_RCC_ClockConfig+0xde>
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_ClockConfig+0x134>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376a:	2b02      	cmp	r3, #2
 800376c:	d115      	bne.n	800379a <HAL_RCC_ClockConfig+0x12a>
 800376e:	e006      	b.n	800377e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd fca0 	bl	80010b4 <HAL_GetTick>
 8003774:	1b80      	subs	r0, r0, r6
 8003776:	f241 3388 	movw	r3, #5000	; 0x1388
 800377a:	4298      	cmp	r0, r3
 800377c:	d85b      	bhi.n	8003836 <HAL_RCC_ClockConfig+0x1c6>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377e:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d1f2      	bne.n	8003770 <HAL_RCC_ClockConfig+0x100>
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_ClockConfig+0x134>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7fd fc92 	bl	80010b4 <HAL_GetTick>
 8003790:	1b80      	subs	r0, r0, r6
 8003792:	f241 3388 	movw	r3, #5000	; 0x1388
 8003796:	4298      	cmp	r0, r3
 8003798:	d84f      	bhi.n	800383a <HAL_RCC_ClockConfig+0x1ca>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f013 0f0c 	tst.w	r3, #12
 80037a2:	d1f3      	bne.n	800378c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_ClockConfig+0x1d4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	429d      	cmp	r5, r3
 80037ae:	d20a      	bcs.n	80037c6 <HAL_RCC_ClockConfig+0x156>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b0:	4a24      	ldr	r2, [pc, #144]	; (8003844 <HAL_RCC_ClockConfig+0x1d4>)
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	432b      	orrs	r3, r5
 80037ba:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	429d      	cmp	r5, r3
 80037c4:	d13b      	bne.n	800383e <HAL_RCC_ClockConfig+0x1ce>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	f013 0f04 	tst.w	r3, #4
 80037cc:	d006      	beq.n	80037dc <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ce:	491e      	ldr	r1, [pc, #120]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 80037d0:	684b      	ldr	r3, [r1, #4]
 80037d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f013 0f08 	tst.w	r3, #8
 80037e2:	d007      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 80037e6:	6853      	ldr	r3, [r2, #4]
 80037e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80037ec:	6921      	ldr	r1, [r4, #16]
 80037ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80037f2:	6053      	str	r3, [r2, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037f4:	f7ff ff04 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_ClockConfig+0x1d8>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	23f0      	movs	r3, #240	; 0xf0
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	4a0f      	ldr	r2, [pc, #60]	; (800384c <HAL_RCC_ClockConfig+0x1dc>)
 8003810:	5cd3      	ldrb	r3, [r2, r3]
 8003812:	40d8      	lsrs	r0, r3
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_RCC_ClockConfig+0x1e0>)
 8003816:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003818:	2000      	movs	r0, #0
 800381a:	f7fd fc1b 	bl	8001054 <HAL_InitTick>
  
  return HAL_OK;
 800381e:	2000      	movs	r0, #0
 8003820:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8003822:	2001      	movs	r0, #1
 8003824:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8003826:	2001      	movs	r0, #1
 8003828:	bd70      	pop	{r4, r5, r6, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 800382a:	2001      	movs	r0, #1
 800382c:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
 8003830:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003832:	2003      	movs	r0, #3
 8003834:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003836:	2003      	movs	r0, #3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800383a:	2003      	movs	r0, #3
 800383c:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 800383e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003840:	bd70      	pop	{r4, r5, r6, pc}
 8003842:	bf00      	nop
 8003844:	40022000 	.word	0x40022000
 8003848:	40021000 	.word	0x40021000
 800384c:	0800cd08 	.word	0x0800cd08
 8003850:	20000000 	.word	0x20000000

08003854 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003854:	4b01      	ldr	r3, [pc, #4]	; (800385c <HAL_RCC_GetHCLKFreq+0x8>)
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b083      	sub	sp, #12
 8003864:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003866:	6803      	ldr	r3, [r0, #0]
 8003868:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800386c:	f000 8088 	beq.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003878:	d10b      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003882:	61da      	str	r2, [r3, #28]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800388e:	2501      	movs	r5, #1
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x34>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003892:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b87      	ldr	r3, [pc, #540]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f413 7f80 	tst.w	r3, #256	; 0x100
 800389c:	d113      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4a85      	ldr	r2, [pc, #532]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a8:	f7fd fc04 	bl	80010b4 <HAL_GetTick>
 80038ac:	4606      	mov	r6, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	e005      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fd fc00 	bl	80010b4 <HAL_GetTick>
 80038b4:	1b80      	subs	r0, r0, r6
 80038b6:	2864      	cmp	r0, #100	; 0x64
 80038b8:	f200 80f3 	bhi.w	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	4b7d      	ldr	r3, [pc, #500]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038c4:	d0f4      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x50>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c6:	4b7a      	ldr	r3, [pc, #488]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80038ce:	d04b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80038d0:	6862      	ldr	r2, [r4, #4]
 80038d2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d046      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x108>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038da:	4875      	ldr	r0, [pc, #468]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038dc:	6a01      	ldr	r1, [r0, #32]
 80038de:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 80038e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e6:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ea:	fab2 f282 	clz	r2, r2
 80038ee:	4e72      	ldr	r6, [pc, #456]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f0:	f04f 0e01 	mov.w	lr, #1
 80038f4:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 80038f8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	2200      	movs	r2, #0
 8003902:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003906:	6207      	str	r7, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003908:	f011 0f01 	tst.w	r1, #1
 800390c:	d02c      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fd fbd1 	bl	80010b4 <HAL_GetTick>
 8003912:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	e007      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc6>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fd fbcd 	bl	80010b4 <HAL_GetTick>
 800391a:	1b80      	subs	r0, r0, r6
 800391c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003920:	4298      	cmp	r0, r3
 8003922:	f200 80c0 	bhi.w	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8003926:	2302      	movs	r3, #2
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d102      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003940:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8003946:	2302      	movs	r3, #2
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800394e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003950:	2302      	movs	r3, #2
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	f013 0f01 	tst.w	r3, #1
 8003966:	d0d6      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xb6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003968:	4951      	ldr	r1, [pc, #324]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800396a:	6a0b      	ldr	r3, [r1, #32]
 800396c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	4313      	orrs	r3, r2
 8003974:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003976:	b11d      	cbz	r5, 8003980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	69cb      	ldr	r3, [r1, #28]
 800397a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f013 0f01 	tst.w	r3, #1
 8003986:	d006      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003988:	4949      	ldr	r1, [pc, #292]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800398a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800398c:	f023 0203 	bic.w	r2, r3, #3
 8003990:	68a3      	ldr	r3, [r4, #8]
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	f013 0f02 	tst.w	r3, #2
 800399c:	d006      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399e:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80039a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039a6:	68e3      	ldr	r3, [r4, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f013 0f04 	tst.w	r3, #4
 80039b2:	d006      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b4:	493e      	ldr	r1, [pc, #248]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80039b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	f013 0f20 	tst.w	r3, #32
 80039c8:	d006      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4939      	ldr	r1, [pc, #228]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80039ce:	f023 0210 	bic.w	r2, r3, #16
 80039d2:	69e3      	ldr	r3, [r4, #28]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80039de:	d006      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039e0:	4933      	ldr	r1, [pc, #204]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039e2:	684b      	ldr	r3, [r1, #4]
 80039e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039f4:	d006      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f6:	492e      	ldr	r1, [pc, #184]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80039f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80039fa:	f023 0220 	bic.w	r2, r3, #32
 80039fe:	6a23      	ldr	r3, [r4, #32]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f013 0f08 	tst.w	r3, #8
 8003a0a:	d006      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a0c:	4928      	ldr	r1, [pc, #160]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a0e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a14:	6963      	ldr	r3, [r4, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	f013 0f10 	tst.w	r3, #16
 8003a20:	d006      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a22:	4923      	ldr	r1, [pc, #140]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a24:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2a:	69a3      	ldr	r3, [r4, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003a36:	d006      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a38:	491d      	ldr	r1, [pc, #116]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a3a:	684b      	ldr	r3, [r1, #4]
 8003a3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a4c:	d006      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a4e:	4918      	ldr	r1, [pc, #96]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a50:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003a52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a62:	d006      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a64:	4912      	ldr	r1, [pc, #72]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a66:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003a68:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003a78:	d006      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a7a:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a7c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a84:	4313      	orrs	r3, r2
 8003a86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a92:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x24c>
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8003aa2:	2003      	movs	r0, #3
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x24c>
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003aaa:	2000      	movs	r0, #0
}
 8003aac:	b003      	add	sp, #12
 8003aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	42420400 	.word	0x42420400

08003abc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8003abc:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <TIM_Base_SetConfig+0xac>)
 8003ac0:	4290      	cmp	r0, r2
 8003ac2:	d00e      	beq.n	8003ae2 <TIM_Base_SetConfig+0x26>
 8003ac4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_Base_SetConfig+0x26>
 8003aca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ace:	4290      	cmp	r0, r2
 8003ad0:	d007      	beq.n	8003ae2 <TIM_Base_SetConfig+0x26>
 8003ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ad6:	4290      	cmp	r0, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_Base_SetConfig+0x26>
 8003ada:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003ade:	4290      	cmp	r0, r2
 8003ae0:	d103      	bne.n	8003aea <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ae6:	684a      	ldr	r2, [r1, #4]
 8003ae8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aea:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <TIM_Base_SetConfig+0xac>)
 8003aec:	4290      	cmp	r0, r2
 8003aee:	d01a      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003af0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003af4:	d017      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003af6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003afa:	4290      	cmp	r0, r2
 8003afc:	d013      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b02:	4290      	cmp	r0, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003b06:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003b0a:	4290      	cmp	r0, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003b0e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003b12:	4290      	cmp	r0, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b1a:	4290      	cmp	r0, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_Base_SetConfig+0x6a>
 8003b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b22:	4290      	cmp	r0, r2
 8003b24:	d103      	bne.n	8003b2e <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	68ca      	ldr	r2, [r1, #12]
 8003b2c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8003b2e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	688b      	ldr	r3, [r1, #8]
 8003b32:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003b34:	680b      	ldr	r3, [r1, #0]
 8003b36:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <TIM_Base_SetConfig+0xac>)
 8003b3a:	4298      	cmp	r0, r3
 8003b3c:	d00f      	beq.n	8003b5e <TIM_Base_SetConfig+0xa2>
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	4298      	cmp	r0, r3
 8003b44:	d00b      	beq.n	8003b5e <TIM_Base_SetConfig+0xa2>
 8003b46:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	d007      	beq.n	8003b5e <TIM_Base_SetConfig+0xa2>
 8003b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b52:	4298      	cmp	r0, r3
 8003b54:	d003      	beq.n	8003b5e <TIM_Base_SetConfig+0xa2>
 8003b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	d101      	bne.n	8003b62 <TIM_Base_SetConfig+0xa6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5e:	690b      	ldr	r3, [r1, #16]
 8003b60:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003b62:	2301      	movs	r3, #1
 8003b64:	6143      	str	r3, [r0, #20]
 8003b66:	4770      	bx	lr
 8003b68:	40012c00 	.word	0x40012c00

08003b6c <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003b6c:	b1b8      	cbz	r0, 8003b9e <HAL_TIM_PWM_Init+0x32>
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003b72:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b82:	f001 fbcd 	bl	8005320 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003b86:	2302      	movs	r3, #2
 8003b88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003b8c:	1d21      	adds	r1, r4, #4
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	f7ff ff94 	bl	8003abc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop

08003ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	6a03      	ldr	r3, [r0, #32]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003bb0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bb8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	680d      	ldr	r5, [r1, #0]
 8003bbe:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bc4:	688d      	ldr	r5, [r1, #8]
 8003bc6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc8:	4d1c      	ldr	r5, [pc, #112]	; (8003c3c <TIM_OC1_SetConfig+0x98>)
 8003bca:	42a8      	cmp	r0, r5
 8003bcc:	d00f      	beq.n	8003bee <TIM_OC1_SetConfig+0x4a>
 8003bce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003bd2:	42a8      	cmp	r0, r5
 8003bd4:	d00b      	beq.n	8003bee <TIM_OC1_SetConfig+0x4a>
 8003bd6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003bda:	42a8      	cmp	r0, r5
 8003bdc:	d007      	beq.n	8003bee <TIM_OC1_SetConfig+0x4a>
 8003bde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003be2:	42a8      	cmp	r0, r5
 8003be4:	d003      	beq.n	8003bee <TIM_OC1_SetConfig+0x4a>
 8003be6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bea:	42a8      	cmp	r0, r5
 8003bec:	d105      	bne.n	8003bfa <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bee:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf2:	68cd      	ldr	r5, [r1, #12]
 8003bf4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf6:	f023 0304 	bic.w	r3, r3, #4
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	4d10      	ldr	r5, [pc, #64]	; (8003c3c <TIM_OC1_SetConfig+0x98>)
 8003bfc:	42a8      	cmp	r0, r5
 8003bfe:	d00f      	beq.n	8003c20 <TIM_OC1_SetConfig+0x7c>
 8003c00:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c04:	42a8      	cmp	r0, r5
 8003c06:	d00b      	beq.n	8003c20 <TIM_OC1_SetConfig+0x7c>
 8003c08:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003c0c:	42a8      	cmp	r0, r5
 8003c0e:	d007      	beq.n	8003c20 <TIM_OC1_SetConfig+0x7c>
 8003c10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c14:	42a8      	cmp	r0, r5
 8003c16:	d003      	beq.n	8003c20 <TIM_OC1_SetConfig+0x7c>
 8003c18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c1c:	42a8      	cmp	r0, r5
 8003c1e:	d105      	bne.n	8003c2c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c20:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c24:	694c      	ldr	r4, [r1, #20]
 8003c26:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c28:	698d      	ldr	r5, [r1, #24]
 8003c2a:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c30:	684a      	ldr	r2, [r1, #4]
 8003c32:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003c34:	6203      	str	r3, [r0, #32]
} 
 8003c36:	bc30      	pop	{r4, r5}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00

08003c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c42:	6a03      	ldr	r3, [r0, #32]
 8003c44:	f023 0310 	bic.w	r3, r3, #16
 8003c48:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003c4c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c54:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003c58:	680d      	ldr	r5, [r1, #0]
 8003c5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c5e:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003c62:	688d      	ldr	r5, [r1, #8]
 8003c64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c68:	4d17      	ldr	r5, [pc, #92]	; (8003cc8 <TIM_OC2_SetConfig+0x88>)
 8003c6a:	42a8      	cmp	r0, r5
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC2_SetConfig+0x36>
 8003c6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c72:	42a8      	cmp	r0, r5
 8003c74:	d106      	bne.n	8003c84 <TIM_OC2_SetConfig+0x44>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003c7a:	68cd      	ldr	r5, [r1, #12]
 8003c7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c84:	4d10      	ldr	r5, [pc, #64]	; (8003cc8 <TIM_OC2_SetConfig+0x88>)
 8003c86:	42a8      	cmp	r0, r5
 8003c88:	d00f      	beq.n	8003caa <TIM_OC2_SetConfig+0x6a>
 8003c8a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c8e:	42a8      	cmp	r0, r5
 8003c90:	d00b      	beq.n	8003caa <TIM_OC2_SetConfig+0x6a>
 8003c92:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003c96:	42a8      	cmp	r0, r5
 8003c98:	d007      	beq.n	8003caa <TIM_OC2_SetConfig+0x6a>
 8003c9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c9e:	42a8      	cmp	r0, r5
 8003ca0:	d003      	beq.n	8003caa <TIM_OC2_SetConfig+0x6a>
 8003ca2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ca6:	42a8      	cmp	r0, r5
 8003ca8:	d107      	bne.n	8003cba <TIM_OC2_SetConfig+0x7a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003caa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003cae:	694d      	ldr	r5, [r1, #20]
 8003cb0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003cb4:	698d      	ldr	r5, [r1, #24]
 8003cb6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cbc:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cbe:	684a      	ldr	r2, [r1, #4]
 8003cc0:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003cc2:	6203      	str	r3, [r0, #32]
}
 8003cc4:	bc30      	pop	{r4, r5}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cce:	6a03      	ldr	r3, [r0, #32]
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003cd8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cda:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003cdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ce0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce4:	680d      	ldr	r5, [r1, #0]
 8003ce6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003cec:	688d      	ldr	r5, [r1, #8]
 8003cee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf2:	4d18      	ldr	r5, [pc, #96]	; (8003d54 <TIM_OC3_SetConfig+0x88>)
 8003cf4:	42a8      	cmp	r0, r5
 8003cf6:	d003      	beq.n	8003d00 <TIM_OC3_SetConfig+0x34>
 8003cf8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003cfc:	42a8      	cmp	r0, r5
 8003cfe:	d106      	bne.n	8003d0e <TIM_OC3_SetConfig+0x42>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003d04:	68cd      	ldr	r5, [r1, #12]
 8003d06:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	4d11      	ldr	r5, [pc, #68]	; (8003d54 <TIM_OC3_SetConfig+0x88>)
 8003d10:	42a8      	cmp	r0, r5
 8003d12:	d00f      	beq.n	8003d34 <TIM_OC3_SetConfig+0x68>
 8003d14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003d18:	42a8      	cmp	r0, r5
 8003d1a:	d00b      	beq.n	8003d34 <TIM_OC3_SetConfig+0x68>
 8003d1c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003d20:	42a8      	cmp	r0, r5
 8003d22:	d007      	beq.n	8003d34 <TIM_OC3_SetConfig+0x68>
 8003d24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d28:	42a8      	cmp	r0, r5
 8003d2a:	d003      	beq.n	8003d34 <TIM_OC3_SetConfig+0x68>
 8003d2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d30:	42a8      	cmp	r0, r5
 8003d32:	d107      	bne.n	8003d44 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d34:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003d38:	694d      	ldr	r5, [r1, #20]
 8003d3a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003d3e:	698d      	ldr	r5, [r1, #24]
 8003d40:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d46:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d48:	684a      	ldr	r2, [r1, #4]
 8003d4a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003d4c:	6203      	str	r3, [r0, #32]
}
 8003d4e:	bc30      	pop	{r4, r5}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00

08003d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d5a:	6a03      	ldr	r3, [r0, #32]
 8003d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d60:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003d64:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d68:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d6c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003d70:	680d      	ldr	r5, [r1, #0]
 8003d72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003d7a:	688d      	ldr	r5, [r1, #8]
 8003d7c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003d80:	4d0f      	ldr	r5, [pc, #60]	; (8003dc0 <TIM_OC4_SetConfig+0x68>)
 8003d82:	42a8      	cmp	r0, r5
 8003d84:	d00f      	beq.n	8003da6 <TIM_OC4_SetConfig+0x4e>
 8003d86:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003d8a:	42a8      	cmp	r0, r5
 8003d8c:	d00b      	beq.n	8003da6 <TIM_OC4_SetConfig+0x4e>
 8003d8e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003d92:	42a8      	cmp	r0, r5
 8003d94:	d007      	beq.n	8003da6 <TIM_OC4_SetConfig+0x4e>
 8003d96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d9a:	42a8      	cmp	r0, r5
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC4_SetConfig+0x4e>
 8003d9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003da2:	42a8      	cmp	r0, r5
 8003da4:	d104      	bne.n	8003db0 <TIM_OC4_SetConfig+0x58>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003daa:	694d      	ldr	r5, [r1, #20]
 8003dac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db4:	684a      	ldr	r2, [r1, #4]
 8003db6:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003db8:	6203      	str	r3, [r0, #32]
}
 8003dba:	bc30      	pop	{r4, r5}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40012c00 	.word	0x40012c00

08003dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dcc:	6a03      	ldr	r3, [r0, #32]
 8003dce:	ea23 0304 	bic.w	r3, r3, r4
 8003dd2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003dd4:	6a03      	ldr	r3, [r0, #32]
 8003dd6:	408a      	lsls	r2, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	6202      	str	r2, [r0, #32]
}
 8003ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop

08003de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de4:	b510      	push	{r4, lr}
 8003de6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003de8:	2201      	movs	r2, #1
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	f7ff ffea 	bl	8003dc4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <HAL_TIM_PWM_Start+0x64>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d011      	beq.n	8003e1c <HAL_TIM_PWM_Start+0x38>
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00f      	beq.n	8003e20 <HAL_TIM_PWM_Start+0x3c>
 8003e00:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00d      	beq.n	8003e24 <HAL_TIM_PWM_Start+0x40>
 8003e08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <HAL_TIM_PWM_Start+0x44>
 8003e10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d109      	bne.n	8003e2c <HAL_TIM_PWM_Start+0x48>
 8003e18:	2201      	movs	r2, #1
 8003e1a:	e008      	b.n	8003e2e <HAL_TIM_PWM_Start+0x4a>
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	e006      	b.n	8003e2e <HAL_TIM_PWM_Start+0x4a>
 8003e20:	2201      	movs	r2, #1
 8003e22:	e004      	b.n	8003e2e <HAL_TIM_PWM_Start+0x4a>
 8003e24:	2201      	movs	r2, #1
 8003e26:	e002      	b.n	8003e2e <HAL_TIM_PWM_Start+0x4a>
 8003e28:	2201      	movs	r2, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_TIM_PWM_Start+0x4a>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	b11a      	cbz	r2, 8003e38 <HAL_TIM_PWM_Start+0x54>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8003e42:	2000      	movs	r0, #0
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	bf00      	nop
 8003e48:	40012c00 	.word	0x40012c00

08003e4c <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e4e:	6a03      	ldr	r3, [r0, #32]
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003e58:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e5a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	680d      	ldr	r5, [r1, #0]
 8003e66:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003e6c:	688d      	ldr	r5, [r1, #8]
 8003e6e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003e72:	4d0f      	ldr	r5, [pc, #60]	; (8003eb0 <TIM_OC5_SetConfig+0x64>)
 8003e74:	42a8      	cmp	r0, r5
 8003e76:	d00f      	beq.n	8003e98 <TIM_OC5_SetConfig+0x4c>
 8003e78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003e7c:	42a8      	cmp	r0, r5
 8003e7e:	d00b      	beq.n	8003e98 <TIM_OC5_SetConfig+0x4c>
 8003e80:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003e84:	42a8      	cmp	r0, r5
 8003e86:	d007      	beq.n	8003e98 <TIM_OC5_SetConfig+0x4c>
 8003e88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e8c:	42a8      	cmp	r0, r5
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC5_SetConfig+0x4c>
 8003e90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e94:	42a8      	cmp	r0, r5
 8003e96:	d104      	bne.n	8003ea2 <TIM_OC5_SetConfig+0x56>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e98:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003e9c:	694d      	ldr	r5, [r1, #20]
 8003e9e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ea4:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ea6:	684a      	ldr	r2, [r1, #4]
 8003ea8:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003eaa:	6203      	str	r3, [r0, #32]
}
 8003eac:	bc30      	pop	{r4, r5}
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eb6:	6a03      	ldr	r3, [r0, #32]
 8003eb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ebc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003ec0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ec4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003ec8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003ecc:	680d      	ldr	r5, [r1, #0]
 8003ece:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003ed6:	688d      	ldr	r5, [r1, #8]
 8003ed8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	4d0f      	ldr	r5, [pc, #60]	; (8003f1c <TIM_OC6_SetConfig+0x68>)
 8003ede:	42a8      	cmp	r0, r5
 8003ee0:	d00f      	beq.n	8003f02 <TIM_OC6_SetConfig+0x4e>
 8003ee2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ee6:	42a8      	cmp	r0, r5
 8003ee8:	d00b      	beq.n	8003f02 <TIM_OC6_SetConfig+0x4e>
 8003eea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003eee:	42a8      	cmp	r0, r5
 8003ef0:	d007      	beq.n	8003f02 <TIM_OC6_SetConfig+0x4e>
 8003ef2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ef6:	42a8      	cmp	r0, r5
 8003ef8:	d003      	beq.n	8003f02 <TIM_OC6_SetConfig+0x4e>
 8003efa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003efe:	42a8      	cmp	r0, r5
 8003f00:	d104      	bne.n	8003f0c <TIM_OC6_SetConfig+0x58>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f02:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003f06:	694d      	ldr	r5, [r1, #20]
 8003f08:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f0e:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f10:	684a      	ldr	r2, [r1, #4]
 8003f12:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003f14:	6203      	str	r3, [r0, #32]
} 
 8003f16:	bc30      	pop	{r4, r5}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00

08003f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8003f20:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	f000 8093 	beq.w	8004052 <HAL_TIM_PWM_ConfigChannel+0x132>
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	4604      	mov	r4, r0
 8003f30:	2301      	movs	r3, #1
 8003f32:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003f36:	2302      	movs	r3, #2
 8003f38:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    
  switch (Channel)
 8003f3c:	2a14      	cmp	r2, #20
 8003f3e:	f200 8081 	bhi.w	8004044 <HAL_TIM_PWM_ConfigChannel+0x124>
 8003f42:	e8df f002 	tbb	[pc, r2]
 8003f46:	7f0b      	.short	0x7f0b
 8003f48:	7f1e7f7f 	.word	0x7f1e7f7f
 8003f4c:	7f327f7f 	.word	0x7f327f7f
 8003f50:	7f457f7f 	.word	0x7f457f7f
 8003f54:	7f597f7f 	.word	0x7f597f7f
 8003f58:	7f7f      	.short	0x7f7f
 8003f5a:	6c          	.byte	0x6c
 8003f5b:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f5c:	6800      	ldr	r0, [r0, #0]
 8003f5e:	f7ff fe21 	bl	8003ba4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	6993      	ldr	r3, [r2, #24]
 8003f66:	f043 0308 	orr.w	r3, r3, #8
 8003f6a:	6193      	str	r3, [r2, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f6c:	6822      	ldr	r2, [r4, #0]
 8003f6e:	6993      	ldr	r3, [r2, #24]
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	6991      	ldr	r1, [r2, #24]
 8003f7a:	692b      	ldr	r3, [r5, #16]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6193      	str	r3, [r2, #24]
    }
    break;
 8003f80:	e060      	b.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	f7ff fe5c 	bl	8003c40 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f88:	6822      	ldr	r2, [r4, #0]
 8003f8a:	6993      	ldr	r3, [r2, #24]
 8003f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f90:	6193      	str	r3, [r2, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	6993      	ldr	r3, [r2, #24]
 8003f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f9a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	6993      	ldr	r3, [r2, #24]
 8003fa0:	6929      	ldr	r1, [r5, #16]
 8003fa2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003fa6:	6193      	str	r3, [r2, #24]
    }
    break;
 8003fa8:	e04c      	b.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	f7ff fe8e 	bl	8003ccc <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	69d3      	ldr	r3, [r2, #28]
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	61d3      	str	r3, [r2, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	69d3      	ldr	r3, [r2, #28]
 8003fbe:	f023 0304 	bic.w	r3, r3, #4
 8003fc2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	69d1      	ldr	r1, [r2, #28]
 8003fc8:	692b      	ldr	r3, [r5, #16]
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	61d3      	str	r3, [r2, #28]
    }
    break;
 8003fce:	e039      	b.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fd0:	6800      	ldr	r0, [r0, #0]
 8003fd2:	f7ff fec1 	bl	8003d58 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	69d3      	ldr	r3, [r2, #28]
 8003fda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fde:	61d3      	str	r3, [r2, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	69d3      	ldr	r3, [r2, #28]
 8003fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	69d3      	ldr	r3, [r2, #28]
 8003fee:	6929      	ldr	r1, [r5, #16]
 8003ff0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ff4:	61d3      	str	r3, [r2, #28]
    }
    break;
 8003ff6:	e025      	b.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ff8:	6800      	ldr	r0, [r0, #0]
 8003ffa:	f7ff ff27 	bl	8003e4c <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	6553      	str	r3, [r2, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004016:	692b      	ldr	r3, [r5, #16]
 8004018:	430b      	orrs	r3, r1
 800401a:	6553      	str	r3, [r2, #84]	; 0x54
    }
    break;
 800401c:	e012      	b.n	8004044 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800401e:	6800      	ldr	r0, [r0, #0]
 8004020:	f7ff ff48 	bl	8003eb4 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800402c:	6553      	str	r3, [r2, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004036:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800403c:	6929      	ldr	r1, [r5, #16]
 800403e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004042:	6553      	str	r3, [r2, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8004044:	2301      	movs	r3, #1
 8004046:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800404a:	2000      	movs	r0, #0
 800404c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 8004050:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8004054:	bd38      	pop	{r3, r4, r5, pc}
 8004056:	bf00      	nop

08004058 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004058:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800405c:	2b01      	cmp	r3, #1
 800405e:	d021      	beq.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004060:	b430      	push	{r4, r5}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004062:	2301      	movs	r3, #1
 8004064:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004068:	6803      	ldr	r3, [r0, #0]
 800406a:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800406c:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800406e:	4c0f      	ldr	r4, [pc, #60]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004070:	42a3      	cmp	r3, r4
 8004072:	d003      	beq.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8004074:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004078:	42a3      	cmp	r3, r4
 800407a:	d103      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800407c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004080:	684c      	ldr	r4, [r1, #4]
 8004082:	4322      	orrs	r2, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004088:	680c      	ldr	r4, [r1, #0]
 800408a:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800408c:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004090:	6889      	ldr	r1, [r1, #8]
 8004092:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004094:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004096:	6803      	ldr	r3, [r0, #0]
 8004098:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 800409a:	2300      	movs	r3, #0
 800409c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80040a0:	4618      	mov	r0, r3
 80040a2:	e001      	b.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80040a4:	2002      	movs	r0, #2
 80040a6:	4770      	bx	lr
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 80040a8:	bc30      	pop	{r4, r5}
 80040aa:	4770      	bx	lr
 80040ac:	40012c00 	.word	0x40012c00

080040b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80040b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d039      	beq.n	800412c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80040b8:	b410      	push	{r4}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80040ba:	2301      	movs	r3, #1
 80040bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040c0:	6802      	ldr	r2, [r0, #0]
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d003      	beq.n	80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d117      	bne.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 80040d0:	68cc      	ldr	r4, [r1, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 80040d2:	688b      	ldr	r3, [r1, #8]
 80040d4:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 80040d6:	684b      	ldr	r3, [r1, #4]
 80040d8:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 80040da:	680b      	ldr	r3, [r1, #0]
 80040dc:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 80040de:	690b      	ldr	r3, [r1, #16]
 80040e0:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 80040e2:	694b      	ldr	r3, [r1, #20]
 80040e4:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 80040e6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80040e8:	4323      	orrs	r3, r4
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 80040ea:	698c      	ldr	r4, [r1, #24]
 80040ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 80040f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80040f2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 80040f6:	69cc      	ldr	r4, [r1, #28]
 80040f8:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 80040fa:	6a0b      	ldr	r3, [r1, #32]
 80040fc:	4323      	orrs	r3, r4
 80040fe:	e00f      	b.n	8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 8004100:	68cc      	ldr	r4, [r1, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8004102:	688b      	ldr	r3, [r1, #8]
 8004104:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 8004106:	684b      	ldr	r3, [r1, #4]
 8004108:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 800410a:	680b      	ldr	r3, [r1, #0]
 800410c:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 800410e:	690b      	ldr	r3, [r1, #16]
 8004110:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 8004112:	694b      	ldr	r3, [r1, #20]
 8004114:	431c      	orrs	r4, r3
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8004116:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004118:	4323      	orrs	r3, r4
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 800411a:	6989      	ldr	r1, [r1, #24]
 800411c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004120:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8004122:	2300      	movs	r3, #0
 8004124:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8004128:	4618      	mov	r0, r3
 800412a:	e001      	b.n	8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800412c:	2002      	movs	r0, #2
 800412e:	4770      	bx	lr
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8004130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00

0800413c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800413c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004140:	b11b      	cbz	r3, 800414a <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8004142:	2000      	movs	r0, #0
 8004144:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004148:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800414a:	2002      	movs	r0, #2
  }
}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004150:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004152:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004156:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800415a:	b15b      	cbz	r3, 8004174 <USBD_CDC_EP0_RxReady+0x24>
 800415c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004160:	28ff      	cmp	r0, #255	; 0xff
 8004162:	d007      	beq.n	8004174 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800416a:	4621      	mov	r1, r4
 800416c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800416e:	23ff      	movs	r3, #255	; 0xff
 8004170:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8004174:	2000      	movs	r0, #0
 8004176:	bd10      	pop	{r4, pc}

08004178 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004178:	2343      	movs	r3, #67	; 0x43
 800417a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800417c:	4800      	ldr	r0, [pc, #0]	; (8004180 <USBD_CDC_GetFSCfgDesc+0x8>)
 800417e:	4770      	bx	lr
 8004180:	20000004 	.word	0x20000004

08004184 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004184:	2343      	movs	r3, #67	; 0x43
 8004186:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004188:	4800      	ldr	r0, [pc, #0]	; (800418c <USBD_CDC_GetHSCfgDesc+0x8>)
 800418a:	4770      	bx	lr
 800418c:	200000d0 	.word	0x200000d0

08004190 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004190:	2343      	movs	r3, #67	; 0x43
 8004192:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004194:	4800      	ldr	r0, [pc, #0]	; (8004198 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004196:	4770      	bx	lr
 8004198:	2000008c 	.word	0x2000008c

0800419c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800419c:	230a      	movs	r3, #10
 800419e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80041a0:	4800      	ldr	r0, [pc, #0]	; (80041a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80041a2:	4770      	bx	lr
 80041a4:	20000080 	.word	0x20000080

080041a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041ac:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80041b0:	f001 fac4 	bl	800573c <USBD_LL_GetRxDataSize>
 80041b4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80041b8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80041bc:	b14b      	cbz	r3, 80041d2 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80041be:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80041c8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80041cc:	4798      	blx	r3

    return USBD_OK;
 80041ce:	2000      	movs	r0, #0
 80041d0:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80041d2:	2002      	movs	r0, #2
  }
}
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	bf00      	nop

080041d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4605      	mov	r5, r0
 80041dc:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80041de:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041e2:	780b      	ldrb	r3, [r1, #0]
 80041e4:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 80041e8:	d024      	beq.n	8004234 <USBD_CDC_Setup+0x5c>
 80041ea:	2a20      	cmp	r2, #32
 80041ec:	d129      	bne.n	8004242 <USBD_CDC_Setup+0x6a>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80041ee:	88ca      	ldrh	r2, [r1, #6]
 80041f0:	b1ca      	cbz	r2, 8004226 <USBD_CDC_Setup+0x4e>
    {
      if (req->bmRequest & 0x80)
 80041f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80041f6:	d00b      	beq.n	8004210 <USBD_CDC_Setup+0x38>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80041f8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4631      	mov	r1, r6
 8004200:	7860      	ldrb	r0, [r4, #1]
 8004202:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8004204:	88e2      	ldrh	r2, [r4, #6]
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	f000 fc87 	bl	8004b1c <USBD_CtlSendData>
 800420e:	e018      	b.n	8004242 <USBD_CDC_Setup+0x6a>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8004210:	784b      	ldrb	r3, [r1, #1]
 8004212:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004216:	88cb      	ldrh	r3, [r1, #6]
 8004218:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 800421c:	88ca      	ldrh	r2, [r1, #6]
 800421e:	4631      	mov	r1, r6
 8004220:	f000 fc92 	bl	8004b48 <USBD_CtlPrepareRx>
 8004224:	e00d      	b.n	8004242 <USBD_CDC_Setup+0x6a>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004226:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	7848      	ldrb	r0, [r1, #1]
 8004230:	4798      	blx	r3
 8004232:	e006      	b.n	8004242 <USBD_CDC_Setup+0x6a>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004234:	784b      	ldrb	r3, [r1, #1]
 8004236:	2b0a      	cmp	r3, #10
 8004238:	d103      	bne.n	8004242 <USBD_CDC_Setup+0x6a>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 800423a:	2201      	movs	r2, #1
 800423c:	4902      	ldr	r1, [pc, #8]	; (8004248 <USBD_CDC_Setup+0x70>)
 800423e:	f000 fc6d 	bl	8004b1c <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004242:	2000      	movs	r0, #0
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	bf00      	nop
 8004248:	200006e0 	.word	0x200006e0

0800424c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800424c:	b510      	push	{r4, lr}
 800424e:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004250:	2181      	movs	r1, #129	; 0x81
 8004252:	f001 fa2b 	bl	80056ac <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8004256:	2101      	movs	r1, #1
 8004258:	4620      	mov	r0, r4
 800425a:	f001 fa27 	bl	80056ac <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800425e:	2182      	movs	r1, #130	; 0x82
 8004260:	4620      	mov	r0, r4
 8004262:	f001 fa23 	bl	80056ac <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004266:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800426a:	b153      	cbz	r3, 8004282 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800426c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004274:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004278:	f001 fa6a 	bl	8005750 <USBD_static_free>
    pdev->pClassData = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004282:	2000      	movs	r0, #0
 8004284:	bd10      	pop	{r4, pc}
 8004286:	bf00      	nop

08004288 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800428c:	7c03      	ldrb	r3, [r0, #16]
 800428e:	b96b      	cbnz	r3, 80042ac <USBD_CDC_Init+0x24>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004294:	2202      	movs	r2, #2
 8004296:	2181      	movs	r1, #129	; 0x81
 8004298:	f001 f9fe 	bl	8005698 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800429c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042a0:	2202      	movs	r2, #2
 80042a2:	2101      	movs	r1, #1
 80042a4:	4620      	mov	r0, r4
 80042a6:	f001 f9f7 	bl	8005698 <USBD_LL_OpenEP>
 80042aa:	e00a      	b.n	80042c2 <USBD_CDC_Init+0x3a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80042ac:	2340      	movs	r3, #64	; 0x40
 80042ae:	2202      	movs	r2, #2
 80042b0:	2181      	movs	r1, #129	; 0x81
 80042b2:	f001 f9f1 	bl	8005698 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	2202      	movs	r2, #2
 80042ba:	2101      	movs	r1, #1
 80042bc:	4620      	mov	r0, r4
 80042be:	f001 f9eb 	bl	8005698 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80042c2:	2308      	movs	r3, #8
 80042c4:	2203      	movs	r2, #3
 80042c6:	2182      	movs	r1, #130	; 0x82
 80042c8:	4620      	mov	r0, r4
 80042ca:	f001 f9e5 	bl	8005698 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80042ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80042d2:	f001 fa39 	bl	8005748 <USBD_static_malloc>
 80042d6:	4605      	mov	r5, r0
 80042d8:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80042dc:	b1e8      	cbz	r0, 800431a <USBD_CDC_Init+0x92>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80042de:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState =0;
 80042ec:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80042f0:	7c23      	ldrb	r3, [r4, #16]
 80042f2:	b94b      	cbnz	r3, 8004308 <USBD_CDC_Init+0x80>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80042f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80042fc:	2101      	movs	r1, #1
 80042fe:	4620      	mov	r0, r4
 8004300:	f001 fa14 	bl	800572c <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004304:	2000      	movs	r0, #0
 8004306:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004308:	2340      	movs	r3, #64	; 0x40
 800430a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800430e:	2101      	movs	r1, #1
 8004310:	4620      	mov	r0, r4
 8004312:	f001 fa0b 	bl	800572c <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 8004316:	2000      	movs	r0, #0
 8004318:	bd38      	pop	{r3, r4, r5, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 800431a:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop

08004320 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8004320:	b119      	cbz	r1, 800432a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8004322:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8004326:	2000      	movs	r0, #0
 8004328:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 800432a:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop

08004330 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004330:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
 8004334:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004338:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 800433c:	2000      	movs	r0, #0
 800433e:	4770      	bx	lr

08004340 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004340:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->RxBuffer = pbuff;
 8004344:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8004348:	2000      	movs	r0, #0
 800434a:	4770      	bx	lr

0800434c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800434c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004350:	b17a      	cbz	r2, 8004372 <USBD_CDC_TransmitPacket+0x26>
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8004352:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0)
 8004354:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8004358:	b96b      	cbnz	r3, 8004376 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004360:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004364:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004368:	2181      	movs	r1, #129	; 0x81
 800436a:	f001 f9d7 	bl	800571c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800436e:	2000      	movs	r0, #0
 8004370:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004372:	2002      	movs	r0, #2
  }
}
 8004374:	4770      	bx	lr
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004376:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004378:	bd08      	pop	{r3, pc}
 800437a:	bf00      	nop

0800437c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800437c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004380:	b19a      	cbz	r2, 80043aa <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004382:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004384:	7c03      	ldrb	r3, [r0, #16]
 8004386:	b943      	cbnz	r3, 800439a <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800438c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004390:	2101      	movs	r1, #1
 8004392:	f001 f9cb 	bl	800572c <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004396:	2000      	movs	r0, #0
 8004398:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800439a:	2340      	movs	r3, #64	; 0x40
 800439c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80043a0:	2101      	movs	r1, #1
 80043a2:	f001 f9c3 	bl	800572c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80043a6:	2000      	movs	r0, #0
 80043a8:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 80043aa:	2002      	movs	r0, #2
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop

080043b0 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80043b0:	b198      	cbz	r0, 80043da <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80043b2:	b508      	push	{r3, lr}
 80043b4:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80043b6:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 80043ba:	b110      	cbz	r0, 80043c2 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80043bc:	2000      	movs	r0, #0
 80043be:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80043c2:	b109      	cbz	r1, 80043c8 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 80043c4:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 80043c8:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80043d0:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80043d2:	f001 f917 	bl	8005604 <USBD_LL_Init>
  
  return USBD_OK; 
 80043d6:	2000      	movs	r0, #0
 80043d8:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80043da:	2002      	movs	r0, #2
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80043e0:	b119      	cbz	r1, 80043ea <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80043e2:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80043e6:	2000      	movs	r0, #0
 80043e8:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80043ea:	2002      	movs	r0, #2
  }
  
  return status;
}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop

080043f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80043f0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80043f2:	f001 f949 	bl	8005688 <USBD_LL_Start>
  
  return USBD_OK;  
}
 80043f6:	2000      	movs	r0, #0
 80043f8:	bd08      	pop	{r3, pc}
 80043fa:	bf00      	nop

080043fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80043fc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80043fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004402:	b123      	cbz	r3, 800440e <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4798      	blx	r3
 8004408:	b118      	cbz	r0, 8004412 <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800440a:	2002      	movs	r0, #2
 800440c:	bd08      	pop	{r3, pc}
 800440e:	2002      	movs	r0, #2
 8004410:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
    {
      ret = USBD_OK;
 8004412:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8004414:	bd08      	pop	{r3, pc}
 8004416:	bf00      	nop

08004418 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004418:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800441a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4798      	blx	r3
  return USBD_OK;
}
 8004422:	2000      	movs	r0, #0
 8004424:	bd08      	pop	{r3, pc}
 8004426:	bf00      	nop

08004428 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800442c:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8004430:	4628      	mov	r0, r5
 8004432:	f000 f90b 	bl	800464c <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004436:	2301      	movs	r3, #1
 8004438:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800443c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8004440:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004444:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8004448:	f001 031f 	and.w	r3, r1, #31
 800444c:	2b01      	cmp	r3, #1
 800444e:	d008      	beq.n	8004462 <USBD_LL_SetupStage+0x3a>
 8004450:	b113      	cbz	r3, 8004458 <USBD_LL_SetupStage+0x30>
 8004452:	2b02      	cmp	r3, #2
 8004454:	d00a      	beq.n	800446c <USBD_LL_SetupStage+0x44>
 8004456:	e00e      	b.n	8004476 <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004458:	4629      	mov	r1, r5
 800445a:	4620      	mov	r0, r4
 800445c:	f000 fa72 	bl	8004944 <USBD_StdDevReq>
    break;
 8004460:	e00e      	b.n	8004480 <USBD_LL_SetupStage+0x58>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004462:	4629      	mov	r1, r5
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fa91 	bl	800498c <USBD_StdItfReq>
    break;
 800446a:	e009      	b.n	8004480 <USBD_LL_SetupStage+0x58>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800446c:	4629      	mov	r1, r5
 800446e:	4620      	mov	r0, r4
 8004470:	f000 faa8 	bl	80049c4 <USBD_StdEPReq>
    break;
 8004474:	e004      	b.n	8004480 <USBD_LL_SetupStage+0x58>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004476:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800447a:	4620      	mov	r0, r4
 800447c:	f001 f91e 	bl	80056bc <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8004480:	2000      	movs	r0, #0
 8004482:	bd38      	pop	{r3, r4, r5, pc}

08004484 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004484:	b510      	push	{r4, lr}
 8004486:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004488:	bb11      	cbnz	r1, 80044d0 <USBD_LL_DataOutStage+0x4c>
 800448a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800448c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8004490:	2a03      	cmp	r2, #3
 8004492:	d128      	bne.n	80044e6 <USBD_LL_DataOutStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 8004494:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8004498:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800449c:	4291      	cmp	r1, r2
 800449e:	d90a      	bls.n	80044b6 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 80044a0:	1a89      	subs	r1, r1, r2
 80044a2:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80044a6:	428a      	cmp	r2, r1
 80044a8:	bf28      	it	cs
 80044aa:	460a      	movcs	r2, r1
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 80044ac:	b292      	uxth	r2, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	f000 fb5a 	bl	8004b68 <USBD_CtlContinueRx>
 80044b4:	e017      	b.n	80044e6 <USBD_LL_DataOutStage+0x62>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	b123      	cbz	r3, 80044c8 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044be:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80044c2:	2a03      	cmp	r2, #3
 80044c4:	d100      	bne.n	80044c8 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80044c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f000 fb55 	bl	8004b78 <USBD_CtlSendStatus>
 80044ce:	e00a      	b.n	80044e6 <USBD_LL_DataOutStage+0x62>
 80044d0:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80044d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	b12b      	cbz	r3, 80044e6 <USBD_LL_DataOutStage+0x62>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044da:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80044de:	2903      	cmp	r1, #3
 80044e0:	d101      	bne.n	80044e6 <USBD_LL_DataOutStage+0x62>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80044e2:	4611      	mov	r1, r2
 80044e4:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80044e6:	2000      	movs	r0, #0
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	bf00      	nop

080044ec <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d143      	bne.n	800457c <USBD_LL_DataInStage+0x90>
 80044f4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80044f6:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80044fa:	2a02      	cmp	r2, #2
 80044fc:	d136      	bne.n	800456c <USBD_LL_DataInStage+0x80>
    {
      if(pep->rem_length > pep->maxpacket)
 80044fe:	69c1      	ldr	r1, [r0, #28]
 8004500:	6a02      	ldr	r2, [r0, #32]
 8004502:	4291      	cmp	r1, r2
 8004504:	d90c      	bls.n	8004520 <USBD_LL_DataInStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8004506:	1a8a      	subs	r2, r1, r2
 8004508:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800450a:	b292      	uxth	r2, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f000 fb13 	bl	8004b38 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004512:	2300      	movs	r3, #0
 8004514:	461a      	mov	r2, r3
 8004516:	4619      	mov	r1, r3
 8004518:	4620      	mov	r0, r4
 800451a:	f001 f907 	bl	800572c <USBD_LL_PrepareReceive>
 800451e:	e025      	b.n	800456c <USBD_LL_DataInStage+0x80>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004520:	6981      	ldr	r1, [r0, #24]
 8004522:	fbb1 f3f2 	udiv	r3, r1, r2
 8004526:	fb02 1313 	mls	r3, r2, r3, r1
 800452a:	b993      	cbnz	r3, 8004552 <USBD_LL_DataInStage+0x66>
 800452c:	428a      	cmp	r2, r1
 800452e:	d810      	bhi.n	8004552 <USBD_LL_DataInStage+0x66>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8004530:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8004534:	4299      	cmp	r1, r3
 8004536:	d20c      	bcs.n	8004552 <USBD_LL_DataInStage+0x66>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004538:	2200      	movs	r2, #0
 800453a:	4611      	mov	r1, r2
 800453c:	f000 fafc 	bl	8004b38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004540:	2100      	movs	r1, #0
 8004542:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004546:	460b      	mov	r3, r1
 8004548:	460a      	mov	r2, r1
 800454a:	4620      	mov	r0, r4
 800454c:	f001 f8ee 	bl	800572c <USBD_LL_PrepareReceive>
 8004550:	e00c      	b.n	800456c <USBD_LL_DataInStage+0x80>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004552:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	b12b      	cbz	r3, 8004566 <USBD_LL_DataInStage+0x7a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800455a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800455e:	2a03      	cmp	r2, #3
 8004560:	d101      	bne.n	8004566 <USBD_LL_DataInStage+0x7a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004562:	4620      	mov	r0, r4
 8004564:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004566:	4620      	mov	r0, r4
 8004568:	f000 fb12 	bl	8004b90 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800456c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10e      	bne.n	8004592 <USBD_LL_DataInStage+0xa6>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800457a:	e00a      	b.n	8004592 <USBD_LL_DataInStage+0xa6>
 800457c:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800457e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	b12b      	cbz	r3, 8004592 <USBD_LL_DataInStage+0xa6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004586:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800458a:	2903      	cmp	r1, #3
 800458c:	d101      	bne.n	8004592 <USBD_LL_DataInStage+0xa6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800458e:	4611      	mov	r1, r2
 8004590:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004592:	2000      	movs	r0, #0
 8004594:	bd10      	pop	{r4, pc}
 8004596:	bf00      	nop

08004598 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800459c:	2340      	movs	r3, #64	; 0x40
 800459e:	2200      	movs	r2, #0
 80045a0:	4611      	mov	r1, r2
 80045a2:	f001 f879 	bl	8005698 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80045a6:	2540      	movs	r5, #64	; 0x40
 80045a8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80045ac:	462b      	mov	r3, r5
 80045ae:	2200      	movs	r2, #0
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	4620      	mov	r0, r4
 80045b4:	f001 f870 	bl	8005698 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80045b8:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80045c0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80045c4:	b12b      	cbz	r3, 80045d2 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80045c6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	7921      	ldrb	r1, [r4, #4]
 80045ce:	4620      	mov	r0, r4
 80045d0:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80045d2:	2000      	movs	r0, #0
 80045d4:	bd38      	pop	{r3, r4, r5, pc}
 80045d6:	bf00      	nop

080045d8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80045d8:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80045da:	2000      	movs	r0, #0
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80045e0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80045e4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045e8:	2304      	movs	r3, #4
 80045ea:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80045ee:	2000      	movs	r0, #0
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop

080045f4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80045f4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80045f8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80045fc:	2000      	movs	r0, #0
 80045fe:	4770      	bx	lr

08004600 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004600:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004602:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004606:	2b03      	cmp	r3, #3
 8004608:	d104      	bne.n	8004614 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800460a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	b103      	cbz	r3, 8004614 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004612:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004614:	2000      	movs	r0, #0
 8004616:	bd08      	pop	{r3, pc}

08004618 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004618:	4603      	mov	r3, r0
    uint8_t  len = 0;
 800461a:	2000      	movs	r0, #0

    while (*buf != '\0') 
 800461c:	e002      	b.n	8004624 <USBD_GetLen+0xc>
    {
        len++;
 800461e:	3001      	adds	r0, #1
 8004620:	b2c0      	uxtb	r0, r0
        buf++;
 8004622:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	2a00      	cmp	r2, #0
 8004628:	d1f9      	bne.n	800461e <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 800462a:	4770      	bx	lr

0800462c <USBD_SetFeature>:
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800462c:	884b      	ldrh	r3, [r1, #2]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10b      	bne.n	800464a <USBD_SetFeature+0x1e>
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004632:	b510      	push	{r4, lr}
 8004634:	4604      	mov	r4, r0

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev_remote_wakeup = 1;  
 8004636:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800463a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004642:	4620      	mov	r0, r4
 8004644:	f000 fa98 	bl	8004b78 <USBD_CtlSendStatus>
 8004648:	bd10      	pop	{r4, pc}
 800464a:	4770      	bx	lr

0800464c <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 800464c:	780b      	ldrb	r3, [r1, #0]
 800464e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004650:	784b      	ldrb	r3, [r1, #1]
 8004652:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004654:	788b      	ldrb	r3, [r1, #2]
 8004656:	78ca      	ldrb	r2, [r1, #3]
 8004658:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800465c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800465e:	790b      	ldrb	r3, [r1, #4]
 8004660:	794a      	ldrb	r2, [r1, #5]
 8004662:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004666:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004668:	798b      	ldrb	r3, [r1, #6]
 800466a:	79ca      	ldrb	r2, [r1, #7]
 800466c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004670:	80c3      	strh	r3, [r0, #6]
 8004672:	4770      	bx	lr

08004674 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004674:	b510      	push	{r4, lr}
 8004676:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	f001 f81f 	bl	80056bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800467e:	2100      	movs	r1, #0
 8004680:	4620      	mov	r0, r4
 8004682:	f001 f81b 	bl	80056bc <USBD_LL_StallEP>
 8004686:	bd10      	pop	{r4, pc}

08004688 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004688:	b530      	push	{r4, r5, lr}
 800468a:	b083      	sub	sp, #12
 800468c:	4604      	mov	r4, r0
 800468e:	460d      	mov	r5, r1
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004690:	884a      	ldrh	r2, [r1, #2]
 8004692:	0a13      	lsrs	r3, r2, #8
 8004694:	3b01      	subs	r3, #1
 8004696:	2b06      	cmp	r3, #6
 8004698:	d879      	bhi.n	800478e <USBD_GetDescriptor+0x106>
 800469a:	e8df f003 	tbb	[pc, r3]
 800469e:	0c04      	.short	0x0c04
 80046a0:	5c787820 	.word	0x5c787820
 80046a4:	69          	.byte	0x69
 80046a5:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80046a6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f10d 0106 	add.w	r1, sp, #6
 80046b0:	7c00      	ldrb	r0, [r0, #16]
 80046b2:	4798      	blx	r3
    break;
 80046b4:	e06f      	b.n	8004796 <USBD_GetDescriptor+0x10e>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80046b6:	7c03      	ldrb	r3, [r0, #16]
 80046b8:	b943      	cbnz	r3, 80046cc <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80046ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f10d 0006 	add.w	r0, sp, #6
 80046c4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80046c6:	2302      	movs	r3, #2
 80046c8:	7043      	strb	r3, [r0, #1]
 80046ca:	e064      	b.n	8004796 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80046cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	f10d 0006 	add.w	r0, sp, #6
 80046d6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80046d8:	2302      	movs	r3, #2
 80046da:	7043      	strb	r3, [r0, #1]
 80046dc:	e05b      	b.n	8004796 <USBD_GetDescriptor+0x10e>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	2a05      	cmp	r2, #5
 80046e2:	d834      	bhi.n	800474e <USBD_GetDescriptor+0xc6>
 80046e4:	e8df f002 	tbb	[pc, r2]
 80046e8:	1b130b03 	.word	0x1b130b03
 80046ec:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80046ee:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f10d 0106 	add.w	r1, sp, #6
 80046f8:	7c00      	ldrb	r0, [r0, #16]
 80046fa:	4798      	blx	r3
      break;
 80046fc:	e04b      	b.n	8004796 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80046fe:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f10d 0106 	add.w	r1, sp, #6
 8004708:	7c00      	ldrb	r0, [r0, #16]
 800470a:	4798      	blx	r3
      break;
 800470c:	e043      	b.n	8004796 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800470e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f10d 0106 	add.w	r1, sp, #6
 8004718:	7c00      	ldrb	r0, [r0, #16]
 800471a:	4798      	blx	r3
      break;
 800471c:	e03b      	b.n	8004796 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800471e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f10d 0106 	add.w	r1, sp, #6
 8004728:	7c00      	ldrb	r0, [r0, #16]
 800472a:	4798      	blx	r3
      break;
 800472c:	e033      	b.n	8004796 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800472e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f10d 0106 	add.w	r1, sp, #6
 8004738:	7c00      	ldrb	r0, [r0, #16]
 800473a:	4798      	blx	r3
      break;
 800473c:	e02b      	b.n	8004796 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800473e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	f10d 0106 	add.w	r1, sp, #6
 8004748:	7c00      	ldrb	r0, [r0, #16]
 800474a:	4798      	blx	r3
      break;
 800474c:	e023      	b.n	8004796 <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800474e:	4629      	mov	r1, r5
 8004750:	f7ff ff90 	bl	8004674 <USBD_CtlError>
      return;
 8004754:	e02d      	b.n	80047b2 <USBD_GetDescriptor+0x12a>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004756:	7c03      	ldrb	r3, [r0, #16]
 8004758:	b933      	cbnz	r3, 8004768 <USBD_GetDescriptor+0xe0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800475a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	f10d 0006 	add.w	r0, sp, #6
 8004764:	4798      	blx	r3
      break;
 8004766:	e016      	b.n	8004796 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004768:	4629      	mov	r1, r5
 800476a:	f7ff ff83 	bl	8004674 <USBD_CtlError>
      return;
 800476e:	e020      	b.n	80047b2 <USBD_GetDescriptor+0x12a>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004770:	7c03      	ldrb	r3, [r0, #16]
 8004772:	b943      	cbnz	r3, 8004786 <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004774:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f10d 0006 	add.w	r0, sp, #6
 800477e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004780:	2307      	movs	r3, #7
 8004782:	7043      	strb	r3, [r0, #1]
      break; 
 8004784:	e007      	b.n	8004796 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004786:	4629      	mov	r1, r5
 8004788:	f7ff ff74 	bl	8004674 <USBD_CtlError>
      return;
 800478c:	e011      	b.n	80047b2 <USBD_GetDescriptor+0x12a>
    }

  default: 
     USBD_CtlError(pdev , req);
 800478e:	4629      	mov	r1, r5
 8004790:	f7ff ff70 	bl	8004674 <USBD_CtlError>
    return;
 8004794:	e00d      	b.n	80047b2 <USBD_GetDescriptor+0x12a>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004796:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800479a:	b153      	cbz	r3, 80047b2 <USBD_GetDescriptor+0x12a>
 800479c:	88ea      	ldrh	r2, [r5, #6]
 800479e:	b142      	cbz	r2, 80047b2 <USBD_GetDescriptor+0x12a>
  {
    
    len = MIN(len , req->wLength);
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf28      	it	cs
 80047a4:	461a      	movcs	r2, r3
 80047a6:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 80047aa:	4601      	mov	r1, r0
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 f9b5 	bl	8004b1c <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80047b2:	b003      	add	sp, #12
 80047b4:	bd30      	pop	{r4, r5, pc}
 80047b6:	bf00      	nop

080047b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4604      	mov	r4, r0
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80047bc:	888b      	ldrh	r3, [r1, #4]
 80047be:	b9e3      	cbnz	r3, 80047fa <USBD_SetAddress+0x42>
 80047c0:	88cb      	ldrh	r3, [r1, #6]
 80047c2:	b9d3      	cbnz	r3, 80047fa <USBD_SetAddress+0x42>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80047c4:	788d      	ldrb	r5, [r1, #2]
 80047c6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80047ca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d102      	bne.n	80047d8 <USBD_SetAddress+0x20>
    {
      USBD_CtlError(pdev , req);
 80047d2:	f7ff ff4f 	bl	8004674 <USBD_CtlError>
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80047d8:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80047dc:	4629      	mov	r1, r5
 80047de:	f000 ff95 	bl	800570c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f9c8 	bl	8004b78 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80047e8:	b11d      	cbz	r5, 80047f2 <USBD_SetAddress+0x3a>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80047ea:	2302      	movs	r3, #2
 80047ec:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80047f0:	bd38      	pop	{r3, r4, r5, pc}
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80047f2:	2301      	movs	r3, #1
 80047f4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80047fa:	4620      	mov	r0, r4
 80047fc:	f7ff ff3a 	bl	8004674 <USBD_CtlError>
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	bf00      	nop

08004804 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4604      	mov	r4, r0
 8004808:	460d      	mov	r5, r1
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800480a:	7889      	ldrb	r1, [r1, #2]
 800480c:	4b26      	ldr	r3, [pc, #152]	; (80048a8 <USBD_SetConfig+0xa4>)
 800480e:	7019      	strb	r1, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004810:	2901      	cmp	r1, #1
 8004812:	d903      	bls.n	800481c <USBD_SetConfig+0x18>
  {            
     USBD_CtlError(pdev , req);                              
 8004814:	4629      	mov	r1, r5
 8004816:	f7ff ff2d 	bl	8004674 <USBD_CtlError>
 800481a:	bd38      	pop	{r3, r4, r5, pc}
  } 
  else 
  {
    switch (pdev->dev_state) 
 800481c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004820:	2b02      	cmp	r3, #2
 8004822:	d002      	beq.n	800482a <USBD_SetConfig+0x26>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d015      	beq.n	8004854 <USBD_SetConfig+0x50>
 8004828:	e039      	b.n	800489e <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800482a:	b181      	cbz	r1, 800484e <USBD_SetConfig+0x4a>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800482c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800482e:	2303      	movs	r3, #3
 8004830:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004834:	f7ff fde2 	bl	80043fc <USBD_SetClassConfig>
 8004838:	2802      	cmp	r0, #2
 800483a:	d104      	bne.n	8004846 <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev , req);  
 800483c:	4629      	mov	r1, r5
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff ff18 	bl	8004674 <USBD_CtlError>
          return;
 8004844:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f996 	bl	8004b78 <USBD_CtlSendStatus>
 800484c:	bd38      	pop	{r3, r4, r5, pc}
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 800484e:	f000 f993 	bl	8004b78 <USBD_CtlSendStatus>
 8004852:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004854:	b949      	cbnz	r1, 800486a <USBD_SetConfig+0x66>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004856:	2302      	movs	r3, #2
 8004858:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800485c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800485e:	f7ff fddb 	bl	8004418 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8004862:	4620      	mov	r0, r4
 8004864:	f000 f988 	bl	8004b78 <USBD_CtlSendStatus>
 8004868:	bd38      	pop	{r3, r4, r5, pc}
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 800486a:	6843      	ldr	r3, [r0, #4]
 800486c:	4299      	cmp	r1, r3
 800486e:	d013      	beq.n	8004898 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004870:	b2d9      	uxtb	r1, r3
 8004872:	f7ff fdd1 	bl	8004418 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <USBD_SetConfig+0xa4>)
 8004878:	7819      	ldrb	r1, [r3, #0]
 800487a:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800487c:	4620      	mov	r0, r4
 800487e:	f7ff fdbd 	bl	80043fc <USBD_SetClassConfig>
 8004882:	2802      	cmp	r0, #2
 8004884:	d104      	bne.n	8004890 <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev , req);  
 8004886:	4629      	mov	r1, r5
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff fef3 	bl	8004674 <USBD_CtlError>
          return;
 800488e:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8004890:	4620      	mov	r0, r4
 8004892:	f000 f971 	bl	8004b78 <USBD_CtlSendStatus>
 8004896:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8004898:	f000 f96e 	bl	8004b78 <USBD_CtlSendStatus>
 800489c:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
      
    default:					
       USBD_CtlError(pdev , req);                     
 800489e:	4629      	mov	r1, r5
 80048a0:	f7ff fee8 	bl	8004674 <USBD_CtlError>
 80048a4:	bd38      	pop	{r3, r4, r5, pc}
 80048a6:	bf00      	nop
 80048a8:	200006e1 	.word	0x200006e1

080048ac <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80048ac:	b508      	push	{r3, lr}

  if (req->wLength != 1) 
 80048ae:	88cb      	ldrh	r3, [r1, #6]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d002      	beq.n	80048ba <USBD_GetConfig+0xe>
  {                   
     USBD_CtlError(pdev , req);
 80048b4:	f7ff fede 	bl	8004674 <USBD_CtlError>
 80048b8:	bd08      	pop	{r3, pc}
  }
  else 
  {
    switch (pdev->dev_state )  
 80048ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d002      	beq.n	80048c8 <USBD_GetConfig+0x1c>
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d008      	beq.n	80048d8 <USBD_GetConfig+0x2c>
 80048c6:	e00c      	b.n	80048e2 <USBD_GetConfig+0x36>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 80048c8:	4601      	mov	r1, r0
 80048ca:	2300      	movs	r3, #0
 80048cc:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 80048d0:	2201      	movs	r2, #1
 80048d2:	f000 f923 	bl	8004b1c <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 80048d6:	bd08      	pop	{r3, pc}
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 80048d8:	2201      	movs	r2, #1
 80048da:	1d01      	adds	r1, r0, #4
 80048dc:	f000 f91e 	bl	8004b1c <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 80048e0:	bd08      	pop	{r3, pc}
      
    default:
       USBD_CtlError(pdev , req);
 80048e2:	f7ff fec7 	bl	8004674 <USBD_CtlError>
 80048e6:	bd08      	pop	{r3, pc}

080048e8 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80048e8:	b508      	push	{r3, lr}
  
    
  switch (pdev->dev_state) 
 80048ea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80048ee:	3b02      	subs	r3, #2
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d80c      	bhi.n	800490e <USBD_GetStatus+0x26>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80048f4:	2301      	movs	r3, #1
 80048f6:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80048f8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80048fc:	b10b      	cbz	r3, 8004902 <USBD_GetStatus+0x1a>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80048fe:	2303      	movs	r3, #3
 8004900:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8004902:	2202      	movs	r2, #2
 8004904:	f100 010c 	add.w	r1, r0, #12
 8004908:	f000 f908 	bl	8004b1c <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 800490c:	bd08      	pop	{r3, pc}
    
  default :
    USBD_CtlError(pdev , req);                        
 800490e:	f7ff feb1 	bl	8004674 <USBD_CtlError>
 8004912:	bd08      	pop	{r3, pc}

08004914 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004914:	b510      	push	{r4, lr}
 8004916:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8004918:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800491c:	3b02      	subs	r3, #2
 800491e:	2b01      	cmp	r3, #1
 8004920:	d80d      	bhi.n	800493e <USBD_ClrFeature+0x2a>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004922:	884b      	ldrh	r3, [r1, #2]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10c      	bne.n	8004942 <USBD_ClrFeature+0x2e>
    {
      pdev->dev_remote_wakeup = 0; 
 8004928:	2300      	movs	r3, #0
 800492a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800492e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f91e 	bl	8004b78 <USBD_CtlSendStatus>
 800493c:	bd10      	pop	{r4, pc}
    }
    break;
    
  default :
     USBD_CtlError(pdev , req);
 800493e:	f7ff fe99 	bl	8004674 <USBD_CtlError>
 8004942:	bd10      	pop	{r4, pc}

08004944 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004944:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004946:	784b      	ldrb	r3, [r1, #1]
 8004948:	2b09      	cmp	r3, #9
 800494a:	d81b      	bhi.n	8004984 <USBD_StdDevReq+0x40>
 800494c:	e8df f003 	tbb	[pc, r3]
 8004950:	141a1711 	.word	0x141a1711
 8004954:	1a05081a 	.word	0x1a05081a
 8004958:	0b0e      	.short	0x0b0e
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800495a:	f7ff fe95 	bl	8004688 <USBD_GetDescriptor>
    break;
 800495e:	e013      	b.n	8004988 <USBD_StdDevReq+0x44>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004960:	f7ff ff2a 	bl	80047b8 <USBD_SetAddress>
    break;
 8004964:	e010      	b.n	8004988 <USBD_StdDevReq+0x44>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004966:	f7ff ff4d 	bl	8004804 <USBD_SetConfig>
    break;
 800496a:	e00d      	b.n	8004988 <USBD_StdDevReq+0x44>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800496c:	f7ff ff9e 	bl	80048ac <USBD_GetConfig>
    break;
 8004970:	e00a      	b.n	8004988 <USBD_StdDevReq+0x44>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004972:	f7ff ffb9 	bl	80048e8 <USBD_GetStatus>
    break;
 8004976:	e007      	b.n	8004988 <USBD_StdDevReq+0x44>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004978:	f7ff fe58 	bl	800462c <USBD_SetFeature>
    break;
 800497c:	e004      	b.n	8004988 <USBD_StdDevReq+0x44>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800497e:	f7ff ffc9 	bl	8004914 <USBD_ClrFeature>
    break;
 8004982:	e001      	b.n	8004988 <USBD_StdDevReq+0x44>
    
  default:  
    USBD_CtlError(pdev , req);
 8004984:	f7ff fe76 	bl	8004674 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8004988:	2000      	movs	r0, #0
 800498a:	bd08      	pop	{r3, pc}

0800498c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004992:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004996:	2b03      	cmp	r3, #3
 8004998:	d10f      	bne.n	80049ba <USBD_StdItfReq+0x2e>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800499a:	790b      	ldrb	r3, [r1, #4]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d809      	bhi.n	80049b4 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80049a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80049a8:	88eb      	ldrh	r3, [r5, #6]
 80049aa:	b943      	cbnz	r3, 80049be <USBD_StdItfReq+0x32>
      {
         USBD_CtlSendStatus(pdev);
 80049ac:	4620      	mov	r0, r4
 80049ae:	f000 f8e3 	bl	8004b78 <USBD_CtlSendStatus>
 80049b2:	e004      	b.n	80049be <USBD_StdItfReq+0x32>
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 80049b4:	f7ff fe5e 	bl	8004674 <USBD_CtlError>
 80049b8:	e001      	b.n	80049be <USBD_StdItfReq+0x32>
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80049ba:	f7ff fe5b 	bl	8004674 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 80049be:	2000      	movs	r0, #0
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	bf00      	nop

080049c4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4605      	mov	r5, r0
 80049c8:	460c      	mov	r4, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80049ca:	888a      	ldrh	r2, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80049cc:	780b      	ldrb	r3, [r1, #0]
 80049ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d104      	bne.n	80049e0 <USBD_StdEPReq+0x1c>
  {
    pdev->pClass->Setup (pdev, req);
 80049d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4798      	blx	r3
    
    return USBD_OK;
 80049de:	e07d      	b.n	8004adc <USBD_StdEPReq+0x118>
 80049e0:	b2d1      	uxtb	r1, r2
  }
  
  switch (req->bRequest) 
 80049e2:	7863      	ldrb	r3, [r4, #1]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d026      	beq.n	8004a36 <USBD_StdEPReq+0x72>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d048      	beq.n	8004a7e <USBD_StdEPReq+0xba>
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d175      	bne.n	8004adc <USBD_StdEPReq+0x118>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80049f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d002      	beq.n	80049fe <USBD_StdEPReq+0x3a>
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d007      	beq.n	8004a0c <USBD_StdEPReq+0x48>
 80049fc:	e017      	b.n	8004a2e <USBD_StdEPReq+0x6a>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d06c      	beq.n	8004adc <USBD_StdEPReq+0x118>
 8004a02:	2980      	cmp	r1, #128	; 0x80
 8004a04:	d06a      	beq.n	8004adc <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004a06:	f000 fe59 	bl	80056bc <USBD_LL_StallEP>
 8004a0a:	e067      	b.n	8004adc <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004a0c:	8863      	ldrh	r3, [r4, #2]
 8004a0e:	b923      	cbnz	r3, 8004a1a <USBD_StdEPReq+0x56>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004a10:	b119      	cbz	r1, 8004a1a <USBD_StdEPReq+0x56>
 8004a12:	2980      	cmp	r1, #128	; 0x80
 8004a14:	d001      	beq.n	8004a1a <USBD_StdEPReq+0x56>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8004a16:	f000 fe51 	bl	80056bc <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 8004a1a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 f8a6 	bl	8004b78 <USBD_CtlSendStatus>
      
      break;
 8004a2c:	e056      	b.n	8004adc <USBD_StdEPReq+0x118>
      
    default:                         
      USBD_CtlError(pdev , req);
 8004a2e:	4621      	mov	r1, r4
 8004a30:	f7ff fe20 	bl	8004674 <USBD_CtlError>
      break;    
 8004a34:	e052      	b.n	8004adc <USBD_StdEPReq+0x118>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8004a36:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d002      	beq.n	8004a44 <USBD_StdEPReq+0x80>
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d007      	beq.n	8004a52 <USBD_StdEPReq+0x8e>
 8004a42:	e018      	b.n	8004a76 <USBD_StdEPReq+0xb2>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d049      	beq.n	8004adc <USBD_StdEPReq+0x118>
 8004a48:	2980      	cmp	r1, #128	; 0x80
 8004a4a:	d047      	beq.n	8004adc <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004a4c:	f000 fe36 	bl	80056bc <USBD_LL_StallEP>
 8004a50:	e044      	b.n	8004adc <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004a52:	8863      	ldrh	r3, [r4, #2]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d141      	bne.n	8004adc <USBD_StdEPReq+0x118>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8004a58:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004a5c:	d007      	beq.n	8004a6e <USBD_StdEPReq+0xaa>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004a5e:	f000 fe35 	bl	80056cc <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004a62:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 f882 	bl	8004b78 <USBD_CtlSendStatus>
 8004a74:	e032      	b.n	8004adc <USBD_StdEPReq+0x118>
      }
      break;
      
    default:                         
      USBD_CtlError(pdev , req);
 8004a76:	4621      	mov	r1, r4
 8004a78:	f7ff fdfc 	bl	8004674 <USBD_CtlError>
      break;    
 8004a7c:	e02e      	b.n	8004adc <USBD_StdEPReq+0x118>
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004a7e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d002      	beq.n	8004a8c <USBD_StdEPReq+0xc8>
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d006      	beq.n	8004a98 <USBD_StdEPReq+0xd4>
 8004a8a:	e024      	b.n	8004ad6 <USBD_StdEPReq+0x112>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8004a8c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8004a90:	d024      	beq.n	8004adc <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004a92:	f000 fe13 	bl	80056bc <USBD_LL_StallEP>
 8004a96:	e021      	b.n	8004adc <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004a98:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004a9c:	d006      	beq.n	8004aac <USBD_StdEPReq+0xe8>
 8004a9e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8004aa2:	3401      	adds	r4, #1
 8004aa4:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8004aa8:	3404      	adds	r4, #4
 8004aaa:	e005      	b.n	8004ab8 <USBD_StdEPReq+0xf4>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004aac:	f001 047f 	and.w	r4, r1, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004ab0:	3410      	adds	r4, #16
 8004ab2:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8004ab6:	3404      	adds	r4, #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 fe0f 	bl	80056dc <USBD_LL_IsStallEP>
 8004abe:	b110      	cbz	r0, 8004ac6 <USBD_StdEPReq+0x102>
      {
        pep->status = 0x0001;     
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	e001      	b.n	8004aca <USBD_StdEPReq+0x106>
      }
      else
      {
        pep->status = 0x0000;  
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6023      	str	r3, [r4, #0]
      }
      
      USBD_CtlSendData (pdev,
 8004aca:	2202      	movs	r2, #2
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f824 	bl	8004b1c <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8004ad4:	e002      	b.n	8004adc <USBD_StdEPReq+0x118>
      
    default:                         
      USBD_CtlError(pdev , req);
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	f7ff fdcc 	bl	8004674 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8004adc:	2000      	movs	r0, #0
 8004ade:	bd38      	pop	{r3, r4, r5, pc}

08004ae0 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004ae0:	b1d0      	cbz	r0, 8004b18 <USBD_GetString+0x38>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004ae2:	b570      	push	{r4, r5, r6, lr}
 8004ae4:	460d      	mov	r5, r1
 8004ae6:	4616      	mov	r6, r2
 8004ae8:	4604      	mov	r4, r0
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004aea:	f7ff fd95 	bl	8004618 <USBD_GetLen>
 8004aee:	3001      	adds	r0, #1
 8004af0:	0040      	lsls	r0, r0, #1
 8004af2:	b280      	uxth	r0, r0
 8004af4:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8004af6:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004af8:	2303      	movs	r3, #3
 8004afa:	706b      	strb	r3, [r5, #1]
 8004afc:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8004afe:	e007      	b.n	8004b10 <USBD_GetString+0x30>
    {
      unicode[idx++] = *desc++;
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	3401      	adds	r4, #1
 8004b06:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8004b08:	3302      	adds	r3, #2
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	54a9      	strb	r1, [r5, r2]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8004b10:	7821      	ldrb	r1, [r4, #0]
 8004b12:	2900      	cmp	r1, #0
 8004b14:	d1f4      	bne.n	8004b00 <USBD_GetString+0x20>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop

08004b1c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004b20:	2202      	movs	r2, #2
 8004b22:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004b26:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8004b28:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f000 fdf5 	bl	800571c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004b32:	2000      	movs	r0, #0
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	bf00      	nop

08004b38 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004b38:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	2100      	movs	r1, #0
 8004b40:	f000 fdec 	bl	800571c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004b44:	2000      	movs	r0, #0
 8004b46:	bd08      	pop	{r3, pc}

08004b48 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004b52:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8004b56:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f000 fde5 	bl	800572c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004b62:	2000      	movs	r0, #0
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	bf00      	nop

08004b68 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004b68:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f000 fddc 	bl	800572c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004b74:	2000      	movs	r0, #0
 8004b76:	bd08      	pop	{r3, pc}

08004b78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004b78:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004b80:	2300      	movs	r3, #0
 8004b82:	461a      	mov	r2, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	f000 fdc9 	bl	800571c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	bd08      	pop	{r3, pc}
 8004b8e:	bf00      	nop

08004b90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004b90:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004b92:	2305      	movs	r3, #5
 8004b94:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004b98:	2300      	movs	r3, #0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f000 fdc5 	bl	800572c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	bd08      	pop	{r3, pc}
 8004ba6:	bf00      	nop

08004ba8 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8004ba8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004baa:	2201      	movs	r2, #1
 8004bac:	f7fd f902 	bl	8001db4 <HAL_GPIO_WritePin>
 8004bb0:	bd08      	pop	{r3, pc}
 8004bb2:	bf00      	nop

08004bb4 <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8004bb4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f7fd f8fc 	bl	8001db4 <HAL_GPIO_WritePin>
 8004bbc:	bd08      	pop	{r3, pc}
 8004bbe:	bf00      	nop

08004bc0 <hd44780_Delay>:
 Special Note(s) : NONE

 Parameters			: del		-	32-bit value to represent the delay cycles
 Return value		: NONE
 *********************************************************************************************/
void hd44780_Delay(unsigned long del) {
 8004bc0:	b508      	push	{r3, lr}
// I don't like using loops for timing, so I just set a longish hal delay to ensure it works
//	unsigned long i = 0;

//	while (i < del)
//		i++;
	HAL_Delay(10);
 8004bc2:	200a      	movs	r0, #10
 8004bc4:	f7fc fa7c 	bl	80010c0 <HAL_Delay>
 8004bc8:	bd08      	pop	{r3, pc}
 8004bca:	bf00      	nop

08004bcc <hd44780_wr_hi_nibble>:
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
}

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
	if (data & 0x10) {
 8004bd0:	f010 0f10 	tst.w	r0, #16
 8004bd4:	d004      	beq.n	8004be0 <hd44780_wr_hi_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	481d      	ldr	r0, [pc, #116]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004bda:	f7ff ffe5 	bl	8004ba8 <GPIO_SetBits>
 8004bde:	e003      	b.n	8004be8 <hd44780_wr_hi_nibble+0x1c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8004be0:	2110      	movs	r1, #16
 8004be2:	481b      	ldr	r0, [pc, #108]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004be4:	f7ff ffe6 	bl	8004bb4 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8004be8:	f014 0f20 	tst.w	r4, #32
 8004bec:	d004      	beq.n	8004bf8 <hd44780_wr_hi_nibble+0x2c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8004bee:	2120      	movs	r1, #32
 8004bf0:	4817      	ldr	r0, [pc, #92]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004bf2:	f7ff ffd9 	bl	8004ba8 <GPIO_SetBits>
 8004bf6:	e003      	b.n	8004c00 <hd44780_wr_hi_nibble+0x34>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	4815      	ldr	r0, [pc, #84]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004bfc:	f7ff ffda 	bl	8004bb4 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8004c00:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004c04:	d004      	beq.n	8004c10 <hd44780_wr_hi_nibble+0x44>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	4811      	ldr	r0, [pc, #68]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004c0a:	f7ff ffcd 	bl	8004ba8 <GPIO_SetBits>
 8004c0e:	e003      	b.n	8004c18 <hd44780_wr_hi_nibble+0x4c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8004c10:	2140      	movs	r1, #64	; 0x40
 8004c12:	480f      	ldr	r0, [pc, #60]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004c14:	f7ff ffce 	bl	8004bb4 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8004c18:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004c1c:	d004      	beq.n	8004c28 <hd44780_wr_hi_nibble+0x5c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8004c1e:	2180      	movs	r1, #128	; 0x80
 8004c20:	480b      	ldr	r0, [pc, #44]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004c22:	f7ff ffc1 	bl	8004ba8 <GPIO_SetBits>
 8004c26:	e003      	b.n	8004c30 <hd44780_wr_hi_nibble+0x64>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	4809      	ldr	r0, [pc, #36]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004c2c:	f7ff ffc2 	bl	8004bb4 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8004c30:	4c07      	ldr	r4, [pc, #28]	; (8004c50 <hd44780_wr_hi_nibble+0x84>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	2104      	movs	r1, #4
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7fd f8bc 	bl	8001db4 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8004c3c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004c40:	f7ff ffbe 	bl	8004bc0 <hd44780_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8004c44:	2200      	movs	r2, #0
 8004c46:	2104      	movs	r1, #4
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fd f8b3 	bl	8001db4 <HAL_GPIO_WritePin>
 8004c4e:	bd10      	pop	{r4, pc}
 8004c50:	48000c00 	.word	0x48000c00

08004c54 <hd44780_wr_lo_nibble>:
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4604      	mov	r4, r0
	if (data & 0x01) {
 8004c58:	f010 0f01 	tst.w	r0, #1
 8004c5c:	d004      	beq.n	8004c68 <hd44780_wr_lo_nibble+0x14>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8004c5e:	2110      	movs	r1, #16
 8004c60:	481d      	ldr	r0, [pc, #116]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004c62:	f7ff ffa1 	bl	8004ba8 <GPIO_SetBits>
 8004c66:	e003      	b.n	8004c70 <hd44780_wr_lo_nibble+0x1c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8004c68:	2110      	movs	r1, #16
 8004c6a:	481b      	ldr	r0, [pc, #108]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004c6c:	f7ff ffa2 	bl	8004bb4 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8004c70:	f014 0f02 	tst.w	r4, #2
 8004c74:	d004      	beq.n	8004c80 <hd44780_wr_lo_nibble+0x2c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8004c76:	2120      	movs	r1, #32
 8004c78:	4817      	ldr	r0, [pc, #92]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004c7a:	f7ff ff95 	bl	8004ba8 <GPIO_SetBits>
 8004c7e:	e003      	b.n	8004c88 <hd44780_wr_lo_nibble+0x34>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8004c80:	2120      	movs	r1, #32
 8004c82:	4815      	ldr	r0, [pc, #84]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004c84:	f7ff ff96 	bl	8004bb4 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8004c88:	f014 0f04 	tst.w	r4, #4
 8004c8c:	d004      	beq.n	8004c98 <hd44780_wr_lo_nibble+0x44>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8004c8e:	2140      	movs	r1, #64	; 0x40
 8004c90:	4811      	ldr	r0, [pc, #68]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004c92:	f7ff ff89 	bl	8004ba8 <GPIO_SetBits>
 8004c96:	e003      	b.n	8004ca0 <hd44780_wr_lo_nibble+0x4c>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	480f      	ldr	r0, [pc, #60]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004c9c:	f7ff ff8a 	bl	8004bb4 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8004ca0:	f014 0f08 	tst.w	r4, #8
 8004ca4:	d004      	beq.n	8004cb0 <hd44780_wr_lo_nibble+0x5c>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	480b      	ldr	r0, [pc, #44]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004caa:	f7ff ff7d 	bl	8004ba8 <GPIO_SetBits>
 8004cae:	e003      	b.n	8004cb8 <hd44780_wr_lo_nibble+0x64>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004cb4:	f7ff ff7e 	bl	8004bb4 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8004cb8:	4c07      	ldr	r4, [pc, #28]	; (8004cd8 <hd44780_wr_lo_nibble+0x84>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	2104      	movs	r1, #4
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7fd f878 	bl	8001db4 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8004cc4:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004cc8:	f7ff ff7a 	bl	8004bc0 <hd44780_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7fd f86f 	bl	8001db4 <HAL_GPIO_WritePin>
 8004cd6:	bd10      	pop	{r4, pc}
 8004cd8:	48000c00 	.word	0x48000c00

08004cdc <hd44780_write>:
}

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8004ce0:	f7ff ff74 	bl	8004bcc <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f7ff ffb5 	bl	8004c54 <hd44780_wr_lo_nibble>
 8004cea:	bd10      	pop	{r4, pc}

08004cec <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8004cec:	b510      	push	{r4, lr}
 8004cee:	4604      	mov	r4, r0
	hd44780_RS_Off();
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <hd44780_wr_cmd+0x18>)
 8004cf6:	f7fd f85d 	bl	8001db4 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7ff ffee 	bl	8004cdc <hd44780_write>
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	48000c00 	.word	0x48000c00

08004d08 <hd44780_wr_data>:
}

void hd44780_wr_data(unsigned char data) {
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4604      	mov	r4, r0
	hd44780_RS_On();
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4803      	ldr	r0, [pc, #12]	; (8004d20 <hd44780_wr_data+0x18>)
 8004d12:	f7fd f84f 	bl	8001db4 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff ffe0 	bl	8004cdc <hd44780_write>
 8004d1c:	bd10      	pop	{r4, pc}
 8004d1e:	bf00      	nop
 8004d20:	48000c00 	.word	0x48000c00

08004d24 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOD_CLK_ENABLE()
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <HD44780_Init+0xac>)
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d30:	615a      	str	r2, [r3, #20]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	9b00      	ldr	r3, [sp, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8004d3c:	23f0      	movs	r3, #240	; 0xf0
 8004d3e:	9301      	str	r3, [sp, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004d40:	2401      	movs	r4, #1
 8004d42:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8004d44:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004d46:	2603      	movs	r6, #3
 8004d48:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8004d4a:	4d22      	ldr	r5, [pc, #136]	; (8004dd4 <HD44780_Init+0xb0>)
 8004d4c:	a901      	add	r1, sp, #4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7fc ff66 	bl	8001c20 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStructure.Pin = HD44780_RS_BIT | HD44780_RW_BIT | HD44780_EN_BIT;
 8004d54:	2307      	movs	r3, #7
 8004d56:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004d58:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8004d5a:	9403      	str	r4, [sp, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004d5c:	9604      	str	r6, [sp, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 8004d5e:	a901      	add	r1, sp, #4
 8004d60:	4628      	mov	r0, r5
 8004d62:	f7fc ff5d 	bl	8001c20 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 8004d66:	2200      	movs	r2, #0
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f7fd f822 	bl	8001db4 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 8004d70:	2200      	movs	r2, #0
 8004d72:	4621      	mov	r1, r4
 8004d74:	4628      	mov	r0, r5
 8004d76:	f7fd f81d 	bl	8001db4 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f7fd f818 	bl	8001db4 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 8004d84:	4814      	ldr	r0, [pc, #80]	; (8004dd8 <HD44780_Init+0xb4>)
 8004d86:	f7ff ff1b 	bl	8004bc0 <hd44780_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8004d8a:	2030      	movs	r0, #48	; 0x30
 8004d8c:	f7ff ff1e 	bl	8004bcc <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 8004d90:	f64c 00c8 	movw	r0, #51400	; 0xc8c8
 8004d94:	f7ff ff14 	bl	8004bc0 <hd44780_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8004d98:	2030      	movs	r0, #48	; 0x30
 8004d9a:	f7ff ff17 	bl	8004bcc <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8004d9e:	f642 0028 	movw	r0, #10280	; 0x2828
 8004da2:	f7ff ff0d 	bl	8004bc0 <hd44780_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 8004da6:	2030      	movs	r0, #48	; 0x30
 8004da8:	f7ff ff10 	bl	8004bcc <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8004dac:	2020      	movs	r0, #32
 8004dae:	f7ff ff0d 	bl	8004bcc <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8004db2:	2028      	movs	r0, #40	; 0x28
 8004db4:	f7ff ff9a 	bl	8004cec <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8004db8:	200c      	movs	r0, #12
 8004dba:	f7ff ff97 	bl	8004cec <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7ff ff94 	bl	8004cec <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8004dc4:	2006      	movs	r0, #6
 8004dc6:	f7ff ff91 	bl	8004cec <hd44780_wr_cmd>

}
 8004dca:	b006      	add	sp, #24
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	48000c00 	.word	0x48000c00
 8004dd8:	0001f39c 	.word	0x0001f39c

08004ddc <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8004ddc:	b508      	push	{r3, lr}
	hd44780_wr_data(c & 0xff);
 8004dde:	f7ff ff93 	bl	8004d08 <hd44780_wr_data>
 8004de2:	bd08      	pop	{r3, pc}

08004de4 <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 8004de4:	b508      	push	{r3, lr}
	unsigned char copy_y = 0;

	if (x > (HD44780_DISP_LENGTH - 1))
 8004de6:	280f      	cmp	r0, #15
 8004de8:	d900      	bls.n	8004dec <HD44780_GotoXY+0x8>
		x = 0;
 8004dea:	2000      	movs	r0, #0

	if (y > (HD44780_DISP_ROWS - 1))
 8004dec:	2901      	cmp	r1, #1
 8004dee:	d900      	bls.n	8004df2 <HD44780_GotoXY+0xe>
		y = 0;
 8004df0:	2100      	movs	r1, #0

	switch (y) {
 8004df2:	2903      	cmp	r1, #3
 8004df4:	d803      	bhi.n	8004dfe <HD44780_GotoXY+0x1a>
 8004df6:	e8df f001 	tbb	[pc, r1]
 8004dfa:	040a      	.short	0x040a
 8004dfc:	0806      	.short	0x0806
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e006      	b.n	8004e10 <HD44780_GotoXY+0x2c>
	switch (y) {
	case 0:
		copy_y = 0x80;
		break;
	case 1:
		copy_y = 0xc0;
 8004e02:	23c0      	movs	r3, #192	; 0xc0
		break;
 8004e04:	e004      	b.n	8004e10 <HD44780_GotoXY+0x2c>
	case 2:
		copy_y = 0x94;
 8004e06:	2394      	movs	r3, #148	; 0x94
		break;
 8004e08:	e002      	b.n	8004e10 <HD44780_GotoXY+0x2c>
	case 3:
		copy_y = 0xd4;
 8004e0a:	23d4      	movs	r3, #212	; 0xd4
		break;
 8004e0c:	e000      	b.n	8004e10 <HD44780_GotoXY+0x2c>
	if (y > (HD44780_DISP_ROWS - 1))
		y = 0;

	switch (y) {
	case 0:
		copy_y = 0x80;
 8004e0e:	2380      	movs	r3, #128	; 0x80
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	hd44780_wr_cmd(x + copy_y);
 8004e10:	4418      	add	r0, r3
 8004e12:	b2c0      	uxtb	r0, r0
 8004e14:	f7ff ff6a 	bl	8004cec <hd44780_wr_cmd>
 8004e18:	bd08      	pop	{r3, pc}
 8004e1a:	bf00      	nop

08004e1c <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	9301      	str	r3, [sp, #4]

	do {
		HD44780_PutChar(str[i]);
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	5ce0      	ldrb	r0, [r4, r3]
 8004e2a:	f7ff ffd7 	bl	8004ddc <HD44780_PutChar>
		i++;
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	3301      	adds	r3, #1
 8004e32:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	5ce3      	ldrb	r3, [r4, r3]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f4      	bne.n	8004e26 <HD44780_PutStr+0xa>
}
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd10      	pop	{r4, pc}

08004e40 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8004e40:	b508      	push	{r3, lr}
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8004e42:	2001      	movs	r0, #1
 8004e44:	f7ff ff52 	bl	8004cec <hd44780_wr_cmd>
 8004e48:	bd08      	pop	{r3, pc}
 8004e4a:	bf00      	nop

08004e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8004e4c:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <MX_GPIO_Init+0x40>)
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004e56:	615a      	str	r2, [r3, #20]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004e5e:	9201      	str	r2, [sp, #4]
 8004e60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e68:	615a      	str	r2, [r3, #20]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004e70:	9202      	str	r2, [sp, #8]
 8004e72:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004e7a:	615a      	str	r2, [r3, #20]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	9b03      	ldr	r3, [sp, #12]

}
 8004e86:	b004      	add	sp, #16
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000

08004e90 <RGBColorMixer>:
 blueIntensity  : Unsigned 8bit integer (0-255)
 * RETURNS       : NULL
 */
void RGBColorMixer(uint8_t redIntensity, uint8_t greenIntensity,
		uint8_t blueIntensity) {
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, redIntensity);
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <RGBColorMixer+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6418      	str	r0, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_4, greenIntensity);
 8004e96:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <RGBColorMixer+0x18>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6419      	str	r1, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_2, blueIntensity);
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <RGBColorMixer+0x1c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ea2:	4770      	bx	lr
 8004ea4:	20000a74 	.word	0x20000a74
 8004ea8:	2000095c 	.word	0x2000095c
 8004eac:	20000998 	.word	0x20000998

08004eb0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8004eb0:	e7fe      	b.n	8004eb0 <Error_Handler>
 8004eb2:	bf00      	nop

08004eb4 <MX_ADC1_Init>:
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8004eb4:	b500      	push	{lr}
 8004eb6:	b087      	sub	sp, #28

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8004eb8:	4814      	ldr	r0, [pc, #80]	; (8004f0c <MX_ADC1_Init+0x58>)
 8004eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ebe:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ec4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004ec6:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004ec8:	2201      	movs	r2, #1
 8004eca:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ecc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ece:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ed0:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004ed2:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ed4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004eda:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004edc:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ede:	f7fc f985 	bl	80011ec <HAL_ADC_Init>
 8004ee2:	b108      	cbz	r0, 8004ee8 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8004ee4:	f7ff ffe4 	bl	8004eb0 <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8004eec:	9301      	str	r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004ef2:	9302      	str	r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ef4:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8004ef6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ef8:	4669      	mov	r1, sp
 8004efa:	4804      	ldr	r0, [pc, #16]	; (8004f0c <MX_ADC1_Init+0x58>)
 8004efc:	f7fc fc40 	bl	8001780 <HAL_ADC_ConfigChannel>
 8004f00:	b108      	cbz	r0, 8004f06 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 8004f02:	f7ff ffd5 	bl	8004eb0 <Error_Handler>
  }

}
 8004f06:	b007      	add	sp, #28
 8004f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f0c:	20000a20 	.word	0x20000a20

08004f10 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8004f10:	b500      	push	{lr}
 8004f12:	b08b      	sub	sp, #44	; 0x2c

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8004f14:	4816      	ldr	r0, [pc, #88]	; (8004f70 <MX_TIM2_Init+0x60>)
 8004f16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f1a:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 72;
 8004f1c:	2348      	movs	r3, #72	; 0x48
 8004f1e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f20:	2300      	movs	r3, #0
 8004f22:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 254;
 8004f24:	22fe      	movs	r2, #254	; 0xfe
 8004f26:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f28:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f2a:	f7fe fe1f 	bl	8003b6c <HAL_TIM_PWM_Init>
 8004f2e:	b108      	cbz	r0, 8004f34 <MX_TIM2_Init+0x24>
  {
    Error_Handler();
 8004f30:	f7ff ffbe 	bl	8004eb0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f34:	2300      	movs	r3, #0
 8004f36:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f38:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f3a:	a907      	add	r1, sp, #28
 8004f3c:	480c      	ldr	r0, [pc, #48]	; (8004f70 <MX_TIM2_Init+0x60>)
 8004f3e:	f7ff f88b 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8004f42:	b108      	cbz	r0, 8004f48 <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 8004f44:	f7ff ffb4 	bl	8004eb0 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f48:	2360      	movs	r3, #96	; 0x60
 8004f4a:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f50:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f52:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f54:	220c      	movs	r2, #12
 8004f56:	4669      	mov	r1, sp
 8004f58:	4805      	ldr	r0, [pc, #20]	; (8004f70 <MX_TIM2_Init+0x60>)
 8004f5a:	f7fe ffe1 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8004f5e:	b108      	cbz	r0, 8004f64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004f60:	f7ff ffa6 	bl	8004eb0 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8004f64:	4802      	ldr	r0, [pc, #8]	; (8004f70 <MX_TIM2_Init+0x60>)
 8004f66:	f000 fa0f 	bl	8005388 <HAL_TIM_MspPostInit>

}
 8004f6a:	b00b      	add	sp, #44	; 0x2c
 8004f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f70:	20000a74 	.word	0x20000a74

08004f74 <MX_TIM8_Init>:

/* TIM8 init function */
static void MX_TIM8_Init(void)
{
 8004f74:	b500      	push	{lr}
 8004f76:	b097      	sub	sp, #92	; 0x5c

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim8.Instance = TIM8;
 8004f78:	4823      	ldr	r0, [pc, #140]	; (8005008 <MX_TIM8_Init+0x94>)
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <MX_TIM8_Init+0x98>)
 8004f7c:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 72;
 8004f7e:	2348      	movs	r3, #72	; 0x48
 8004f80:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f82:	2300      	movs	r3, #0
 8004f84:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 254;
 8004f86:	22fe      	movs	r2, #254	; 0xfe
 8004f88:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f8a:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8004f8c:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004f8e:	f7fe fded 	bl	8003b6c <HAL_TIM_PWM_Init>
 8004f92:	b108      	cbz	r0, 8004f98 <MX_TIM8_Init+0x24>
  {
    Error_Handler();
 8004f94:	f7ff ff8c 	bl	8004eb0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004f9c:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f9e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004fa0:	a913      	add	r1, sp, #76	; 0x4c
 8004fa2:	4819      	ldr	r0, [pc, #100]	; (8005008 <MX_TIM8_Init+0x94>)
 8004fa4:	f7ff f858 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa8:	b108      	cbz	r0, 8004fae <MX_TIM8_Init+0x3a>
  {
    Error_Handler();
 8004faa:	f7ff ff81 	bl	8004eb0 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fb2:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 8004fb4:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fb6:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fbc:	920d      	str	r2, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004fbe:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004fc0:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fc6:	9210      	str	r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004fc8:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fca:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004fcc:	a908      	add	r1, sp, #32
 8004fce:	480e      	ldr	r0, [pc, #56]	; (8005008 <MX_TIM8_Init+0x94>)
 8004fd0:	f7ff f86e 	bl	80040b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004fd4:	b108      	cbz	r0, 8004fda <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8004fd6:	f7ff ff6b 	bl	8004eb0 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fda:	2360      	movs	r3, #96	; 0x60
 8004fdc:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fe2:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fe4:	9305      	str	r3, [sp, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fe6:	9306      	str	r3, [sp, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fe8:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fea:	220c      	movs	r2, #12
 8004fec:	a901      	add	r1, sp, #4
 8004fee:	4806      	ldr	r0, [pc, #24]	; (8005008 <MX_TIM8_Init+0x94>)
 8004ff0:	f7fe ff96 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8004ff4:	b108      	cbz	r0, 8004ffa <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8004ff6:	f7ff ff5b 	bl	8004eb0 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim8);
 8004ffa:	4803      	ldr	r0, [pc, #12]	; (8005008 <MX_TIM8_Init+0x94>)
 8004ffc:	f000 f9c4 	bl	8005388 <HAL_TIM_MspPostInit>

}
 8005000:	b017      	add	sp, #92	; 0x5c
 8005002:	f85d fb04 	ldr.w	pc, [sp], #4
 8005006:	bf00      	nop
 8005008:	2000095c 	.word	0x2000095c
 800500c:	40013400 	.word	0x40013400

08005010 <MX_TIM15_Init>:

/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8005010:	b500      	push	{lr}
 8005012:	b097      	sub	sp, #92	; 0x5c

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 8005014:	4821      	ldr	r0, [pc, #132]	; (800509c <MX_TIM15_Init+0x8c>)
 8005016:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <MX_TIM15_Init+0x90>)
 8005018:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 72;
 800501a:	2348      	movs	r3, #72	; 0x48
 800501c:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501e:	2300      	movs	r3, #0
 8005020:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 254;
 8005022:	22fe      	movs	r2, #254	; 0xfe
 8005024:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005026:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8005028:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800502a:	f7fe fd9f 	bl	8003b6c <HAL_TIM_PWM_Init>
 800502e:	b108      	cbz	r0, 8005034 <MX_TIM15_Init+0x24>
  {
    Error_Handler();
 8005030:	f7ff ff3e 	bl	8004eb0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005034:	2300      	movs	r3, #0
 8005036:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005038:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800503a:	a913      	add	r1, sp, #76	; 0x4c
 800503c:	4817      	ldr	r0, [pc, #92]	; (800509c <MX_TIM15_Init+0x8c>)
 800503e:	f7ff f80b 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8005042:	b108      	cbz	r0, 8005048 <MX_TIM15_Init+0x38>
  {
    Error_Handler();
 8005044:	f7ff ff34 	bl	8004eb0 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005048:	2300      	movs	r3, #0
 800504a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800504c:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800504e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005050:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005056:	920d      	str	r2, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005058:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800505a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800505c:	a908      	add	r1, sp, #32
 800505e:	480f      	ldr	r0, [pc, #60]	; (800509c <MX_TIM15_Init+0x8c>)
 8005060:	f7ff f826 	bl	80040b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005064:	b108      	cbz	r0, 800506a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8005066:	f7ff ff23 	bl	8004eb0 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800506a:	2360      	movs	r3, #96	; 0x60
 800506c:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005072:	9303      	str	r3, [sp, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005074:	9304      	str	r3, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005076:	9305      	str	r3, [sp, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005078:	9306      	str	r3, [sp, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800507a:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800507c:	2204      	movs	r2, #4
 800507e:	eb0d 0102 	add.w	r1, sp, r2
 8005082:	4806      	ldr	r0, [pc, #24]	; (800509c <MX_TIM15_Init+0x8c>)
 8005084:	f7fe ff4c 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 8005088:	b108      	cbz	r0, 800508e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800508a:	f7ff ff11 	bl	8004eb0 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 800508e:	4803      	ldr	r0, [pc, #12]	; (800509c <MX_TIM15_Init+0x8c>)
 8005090:	f000 f97a 	bl	8005388 <HAL_TIM_MspPostInit>

}
 8005094:	b017      	add	sp, #92	; 0x5c
 8005096:	f85d fb04 	ldr.w	pc, [sp], #4
 800509a:	bf00      	nop
 800509c:	20000998 	.word	0x20000998
 80050a0:	40014000 	.word	0x40014000

080050a4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80050a4:	b500      	push	{lr}
 80050a6:	b09f      	sub	sp, #124	; 0x7c

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80050ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050b0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80050b2:	2200      	movs	r2, #0
 80050b4:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050b6:	2202      	movs	r2, #2
 80050b8:	921b      	str	r2, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050ba:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80050bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80050c0:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050c2:	a814      	add	r0, sp, #80	; 0x50
 80050c4:	f7fd ff8e 	bl	8002fe4 <HAL_RCC_OscConfig>
 80050c8:	b108      	cbz	r0, 80050ce <SystemClock_Config+0x2a>
  {
    Error_Handler();
 80050ca:	f7ff fef1 	bl	8004eb0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050ce:	230f      	movs	r3, #15
 80050d0:	930f      	str	r3, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050d2:	2102      	movs	r1, #2
 80050d4:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050d6:	2300      	movs	r3, #0
 80050d8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050de:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050e0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050e2:	a80f      	add	r0, sp, #60	; 0x3c
 80050e4:	f7fe fac4 	bl	8003670 <HAL_RCC_ClockConfig>
 80050e8:	b108      	cbz	r0, 80050ee <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80050ea:	f7ff fee1 	bl	8004eb0 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_TIM8
 80050ee:	4b11      	ldr	r3, [pc, #68]	; (8005134 <SystemClock_Config+0x90>)
 80050f0:	9300      	str	r3, [sp, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80050f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050f6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80050f8:	2300      	movs	r3, #0
 80050fa:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80050fc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050fe:	4668      	mov	r0, sp
 8005100:	f7fe fbae 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8005104:	b108      	cbz	r0, 800510a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005106:	f7ff fed3 	bl	8004eb0 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800510a:	f7fe fba3 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <SystemClock_Config+0x94>)
 8005110:	fba3 3000 	umull	r3, r0, r3, r0
 8005114:	0980      	lsrs	r0, r0, #6
 8005116:	f7fc fd57 	bl	8001bc8 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800511a:	2004      	movs	r0, #4
 800511c:	f7fc fd6a 	bl	8001bf4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005120:	2200      	movs	r2, #0
 8005122:	4611      	mov	r1, r2
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	f7fc fd10 	bl	8001b4c <HAL_NVIC_SetPriority>
}
 800512c:	b01f      	add	sp, #124	; 0x7c
 800512e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005132:	bf00      	nop
 8005134:	00022080 	.word	0x00022080
 8005138:	10624dd3 	.word	0x10624dd3

0800513c <main>:
/* USER CODE BEGIN 0 */
circularQueue_t VcpQueue;		// queue used for input from vcp
/* USER CODE END 0 */

int main(void)
{
 800513c:	b500      	push	{lr}
 800513e:	b083      	sub	sp, #12

  /* USER CODE BEGIN 1 */
	initializeVcpQueue(&VcpQueue);
 8005140:	4839      	ldr	r0, [pc, #228]	; (8005228 <main+0xec>)
 8005142:	f000 fb7b 	bl	800583c <initializeVcpQueue>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005146:	f7fb ff9b 	bl	8001080 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800514a:	f7ff ffab 	bl	80050a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800514e:	f7ff fe7d 	bl	8004e4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8005152:	f7ff feaf 	bl	8004eb4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8005156:	f7ff fedb 	bl	8004f10 <MX_TIM2_Init>
  MX_TIM8_Init();
 800515a:	f7ff ff0b 	bl	8004f74 <MX_TIM8_Init>
  MX_TIM15_Init();
 800515e:	f7ff ff57 	bl	8005010 <MX_TIM15_Init>
  MX_USB_DEVICE_Init();
 8005162:	f000 f973 	bl	800544c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
	/* -2- Configure PE.8 to PE.15 IOs in output push-pull mode to drive external LEDs */
	__GPIOE_CLK_ENABLE()
 8005166:	4b31      	ldr	r3, [pc, #196]	; (800522c <main+0xf0>)
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800516e:	615a      	str	r2, [r3, #20]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	9b01      	ldr	r3, [sp, #4]
	;

	GPIO_InitStruct.Pin = (GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
 800517a:	492d      	ldr	r1, [pc, #180]	; (8005230 <main+0xf4>)
 800517c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8005180:	600b      	str	r3, [r1, #0]
			| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005182:	2301      	movs	r3, #1
 8005184:	604b      	str	r3, [r1, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005186:	608b      	str	r3, [r1, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005188:	2303      	movs	r3, #3
 800518a:	60cb      	str	r3, [r1, #12]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800518c:	4829      	ldr	r0, [pc, #164]	; (8005234 <main+0xf8>)
 800518e:	f7fc fd47 	bl	8001c20 <HAL_GPIO_Init>

	// start of LCD setup code
	HD44780_Init();
 8005192:	f7ff fdc7 	bl	8004d24 <HD44780_Init>
	HD44780_ClrScr();								  		//clear the display
 8005196:	f7ff fe53 	bl	8004e40 <HD44780_ClrScr>
	HAL_Delay(1000);
 800519a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800519e:	f7fb ff8f 	bl	80010c0 <HAL_Delay>
	HD44780_GotoXY(0, 0);			//set the character cursor to col=0, row=0
 80051a2:	2100      	movs	r1, #0
 80051a4:	4608      	mov	r0, r1
 80051a6:	f7ff fe1d 	bl	8004de4 <HD44780_GotoXY>
	HD44780_PutStr("PROG8125!");				//display text
 80051aa:	4823      	ldr	r0, [pc, #140]	; (8005238 <main+0xfc>)
 80051ac:	f7ff fe36 	bl	8004e1c <HD44780_PutStr>
	HAL_Delay(500);
 80051b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051b4:	f7fb ff84 	bl	80010c0 <HAL_Delay>

	// start ADC used for Analog to Digital input on PA0
	HAL_ADC_Start(&hadc1);
 80051b8:	4820      	ldr	r0, [pc, #128]	; (800523c <main+0x100>)
 80051ba:	f7fc f963 	bl	8001484 <HAL_ADC_Start>

	// start PWM used for RGB LED
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80051be:	210c      	movs	r1, #12
 80051c0:	481f      	ldr	r0, [pc, #124]	; (8005240 <main+0x104>)
 80051c2:	f7fe fe0f 	bl	8003de4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80051c6:	210c      	movs	r1, #12
 80051c8:	481e      	ldr	r0, [pc, #120]	; (8005244 <main+0x108>)
 80051ca:	f7fe fe0b 	bl	8003de4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80051ce:	2104      	movs	r1, #4
 80051d0:	481d      	ldr	r0, [pc, #116]	; (8005248 <main+0x10c>)
 80051d2:	f7fe fe07 	bl	8003de4 <HAL_TIM_PWM_Start>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		// call to set RGB led colours
		// pins used are PA3(Red), PC9(Green),PF10(Blue)
		RGBColorMixer(255, 85, 0);
 80051d6:	2200      	movs	r2, #0
 80051d8:	2155      	movs	r1, #85	; 0x55
 80051da:	20ff      	movs	r0, #255	; 0xff
 80051dc:	f7ff fe58 	bl	8004e90 <RGBColorMixer>
		// check if the ADC conversion is complete on PA0
		if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 80051e0:	491a      	ldr	r1, [pc, #104]	; (800524c <main+0x110>)
 80051e2:	4816      	ldr	r0, [pc, #88]	; (800523c <main+0x100>)
 80051e4:	f7fc fa14 	bl	8001610 <HAL_ADC_PollForConversion>
 80051e8:	b9b8      	cbnz	r0, 800521a <main+0xde>
			// conversion complete get the value
			adcLastRead = HAL_ADC_GetValue(&hadc1);
 80051ea:	4814      	ldr	r0, [pc, #80]	; (800523c <main+0x100>)
 80051ec:	f7fc fac4 	bl	8001778 <HAL_ADC_GetValue>
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <main+0x114>)
 80051f2:	6018      	str	r0, [r3, #0]
			adcMeasurementNumber++;
 80051f4:	4a17      	ldr	r2, [pc, #92]	; (8005254 <main+0x118>)
 80051f6:	6813      	ldr	r3, [r2, #0]
 80051f8:	3301      	adds	r3, #1
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	e00d      	b.n	800521a <main+0xde>
		// this will check for a single character to be input and echo it back
		// students will need to alter this depending on what they are looking for
		while (!isVcpEmpty(&VcpQueue)) {
			// echo back any typed characters for now
			char tmp;
			scanf("%c", &tmp);
 80051fe:	f10d 0103 	add.w	r1, sp, #3
 8005202:	4815      	ldr	r0, [pc, #84]	; (8005258 <main+0x11c>)
 8005204:	f000 fbd6 	bl	80059b4 <scanf>
			//putchar(tmp);
			if( tmp == 'a' )
 8005208:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800520c:	2b61      	cmp	r3, #97	; 0x61
 800520e:	d104      	bne.n	800521a <main+0xde>
				printf("%d\n", (unsigned int)adcLastRead );
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <main+0x114>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	4811      	ldr	r0, [pc, #68]	; (800525c <main+0x120>)
 8005216:	f000 fbb5 	bl	8005984 <printf>
			adcMeasurementNumber++;
		}

		// this will check for a single character to be input and echo it back
		// students will need to alter this depending on what they are looking for
		while (!isVcpEmpty(&VcpQueue)) {
 800521a:	4803      	ldr	r0, [pc, #12]	; (8005228 <main+0xec>)
 800521c:	f000 fb1a 	bl	8005854 <isVcpEmpty>
 8005220:	2800      	cmp	r0, #0
 8005222:	d0ec      	beq.n	80051fe <main+0xc2>
 8005224:	e7d7      	b.n	80051d6 <main+0x9a>
 8005226:	bf00      	nop
 8005228:	200009d4 	.word	0x200009d4
 800522c:	40021000 	.word	0x40021000
 8005230:	200006e8 	.word	0x200006e8
 8005234:	48001000 	.word	0x48001000
 8005238:	0800cd38 	.word	0x0800cd38
 800523c:	20000a20 	.word	0x20000a20
 8005240:	20000a74 	.word	0x20000a74
 8005244:	2000095c 	.word	0x2000095c
 8005248:	20000998 	.word	0x20000998
 800524c:	000f4240 	.word	0x000f4240
 8005250:	200006fc 	.word	0x200006fc
 8005254:	200006e4 	.word	0x200006e4
 8005258:	0800cd44 	.word	0x0800cd44
 800525c:	0800cd48 	.word	0x0800cd48

08005260 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005260:	b500      	push	{lr}
 8005262:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005264:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_MspInit+0x78>)
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	619a      	str	r2, [r3, #24]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005278:	2003      	movs	r0, #3
 800527a:	f7fc fc55 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	4611      	mov	r1, r2
 8005282:	f06f 000b 	mvn.w	r0, #11
 8005286:	f7fc fc61 	bl	8001b4c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800528a:	2200      	movs	r2, #0
 800528c:	4611      	mov	r1, r2
 800528e:	f06f 000a 	mvn.w	r0, #10
 8005292:	f7fc fc5b 	bl	8001b4c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005296:	2200      	movs	r2, #0
 8005298:	4611      	mov	r1, r2
 800529a:	f06f 0009 	mvn.w	r0, #9
 800529e:	f7fc fc55 	bl	8001b4c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80052a2:	2200      	movs	r2, #0
 80052a4:	4611      	mov	r1, r2
 80052a6:	f06f 0004 	mvn.w	r0, #4
 80052aa:	f7fc fc4f 	bl	8001b4c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80052ae:	2200      	movs	r2, #0
 80052b0:	4611      	mov	r1, r2
 80052b2:	f06f 0003 	mvn.w	r0, #3
 80052b6:	f7fc fc49 	bl	8001b4c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	4611      	mov	r1, r2
 80052be:	f06f 0001 	mvn.w	r0, #1
 80052c2:	f7fc fc43 	bl	8001b4c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80052c6:	2200      	movs	r2, #0
 80052c8:	4611      	mov	r1, r2
 80052ca:	f04f 30ff 	mov.w	r0, #4294967295
 80052ce:	f7fc fc3d 	bl	8001b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052d2:	b003      	add	sp, #12
 80052d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052d8:	40021000 	.word	0x40021000

080052dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80052dc:	6803      	ldr	r3, [r0, #0]
 80052de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e2:	d11c      	bne.n	800531e <HAL_ADC_MspInit+0x42>

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80052e4:	b500      	push	{lr}
 80052e6:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80052e8:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80052ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052f6:	615a      	str	r2, [r3, #20]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005302:	2301      	movs	r3, #1
 8005304:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005306:	2303      	movs	r3, #3
 8005308:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530a:	2300      	movs	r3, #0
 800530c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800530e:	a901      	add	r1, sp, #4
 8005310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005314:	f7fc fc84 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005318:	b007      	add	sp, #28
 800531a:	f85d fb04 	ldr.w	pc, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005320:	b084      	sub	sp, #16

  if(htim_pwm->Instance==TIM2)
 8005322:	6803      	ldr	r3, [r0, #0]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d10b      	bne.n	8005342 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800532a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	61da      	str	r2, [r3, #28]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	e01a      	b.n	8005378 <HAL_TIM_PWM_MspInit+0x58>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM8)
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_TIM_PWM_MspInit+0x5c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10a      	bne.n	800535e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HAL_TIM_PWM_MspInit+0x60>)
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005350:	619a      	str	r2, [r3, #24]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005358:	9302      	str	r3, [sp, #8]
 800535a:	9b02      	ldr	r3, [sp, #8]
 800535c:	e00c      	b.n	8005378 <HAL_TIM_PWM_MspInit+0x58>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM15)
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <HAL_TIM_PWM_MspInit+0x64>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d109      	bne.n	8005378 <HAL_TIM_PWM_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_TIM_PWM_MspInit+0x60>)
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800536c:	619a      	str	r2, [r3, #24]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005374:	9303      	str	r3, [sp, #12]
 8005376:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8005378:	b004      	add	sp, #16
 800537a:	4770      	bx	lr
 800537c:	40013400 	.word	0x40013400
 8005380:	40021000 	.word	0x40021000
 8005384:	40014000 	.word	0x40014000

08005388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005388:	b500      	push	{lr}
 800538a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800538c:	6803      	ldr	r3, [r0, #0]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d10e      	bne.n	80053b2 <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005394:	2308      	movs	r3, #8
 8005396:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053a2:	2301      	movs	r3, #1
 80053a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	a901      	add	r1, sp, #4
 80053a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053ac:	f7fc fc38 	bl	8001c20 <HAL_GPIO_Init>
 80053b0:	e023      	b.n	80053fa <HAL_TIM_MspPostInit+0x72>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <HAL_TIM_MspPostInit+0x78>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d10f      	bne.n	80053d8 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE END TIM8_MspPostInit 0 */
  
    /**TIM8 GPIO Configuration    
    PC9     ------> TIM8_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053bc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80053c8:	2304      	movs	r3, #4
 80053ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053cc:	eb0d 0103 	add.w	r1, sp, r3
 80053d0:	480c      	ldr	r0, [pc, #48]	; (8005404 <HAL_TIM_MspPostInit+0x7c>)
 80053d2:	f7fc fc25 	bl	8001c20 <HAL_GPIO_Init>
 80053d6:	e010      	b.n	80053fa <HAL_TIM_MspPostInit+0x72>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(htim->Instance==TIM15)
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <HAL_TIM_MspPostInit+0x80>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10d      	bne.n	80053fa <HAL_TIM_MspPostInit+0x72>
  /* USER CODE END TIM15_MspPostInit 0 */
  
    /**TIM15 GPIO Configuration    
    PF10     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e4:	2302      	movs	r3, #2
 80053e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e8:	2300      	movs	r3, #0
 80053ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 80053ee:	2303      	movs	r3, #3
 80053f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053f2:	a901      	add	r1, sp, #4
 80053f4:	4805      	ldr	r0, [pc, #20]	; (800540c <HAL_TIM_MspPostInit+0x84>)
 80053f6:	f7fc fc13 	bl	8001c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80053fa:	b007      	add	sp, #28
 80053fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005400:	40013400 	.word	0x40013400
 8005404:	48000800 	.word	0x48000800
 8005408:	40014000 	.word	0x40014000
 800540c:	48001400 	.word	0x48001400

08005410 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop

08005414 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005414:	e7fe      	b.n	8005414 <HardFault_Handler>
 8005416:	bf00      	nop

08005418 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005418:	e7fe      	b.n	8005418 <MemManage_Handler>
 800541a:	bf00      	nop

0800541c <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800541c:	e7fe      	b.n	800541c <BusFault_Handler>
 800541e:	bf00      	nop

08005420 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005420:	e7fe      	b.n	8005420 <UsageFault_Handler>
 8005422:	bf00      	nop

08005424 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop

08005428 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop

08005430 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005432:	f7fb fe37 	bl	80010a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005436:	f7fc fbef 	bl	8001c18 <HAL_SYSTICK_IRQHandler>
 800543a:	bd08      	pop	{r3, pc}

0800543c <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN_RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800543c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800543e:	4802      	ldr	r0, [pc, #8]	; (8005448 <USB_LP_CAN_RX0_IRQHandler+0xc>)
 8005440:	f7fd fc06 	bl	8002c50 <HAL_PCD_IRQHandler>
 8005444:	bd08      	pop	{r3, pc}
 8005446:	bf00      	nop
 8005448:	20000cdc 	.word	0x20000cdc

0800544c <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 800544c:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800544e:	4c09      	ldr	r4, [pc, #36]	; (8005474 <MX_USB_DEVICE_Init+0x28>)
 8005450:	2200      	movs	r2, #0
 8005452:	4909      	ldr	r1, [pc, #36]	; (8005478 <MX_USB_DEVICE_Init+0x2c>)
 8005454:	4620      	mov	r0, r4
 8005456:	f7fe ffab 	bl	80043b0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800545a:	4908      	ldr	r1, [pc, #32]	; (800547c <MX_USB_DEVICE_Init+0x30>)
 800545c:	4620      	mov	r0, r4
 800545e:	f7fe ffbf 	bl	80043e0 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005462:	4907      	ldr	r1, [pc, #28]	; (8005480 <MX_USB_DEVICE_Init+0x34>)
 8005464:	4620      	mov	r0, r4
 8005466:	f7fe ff5b 	bl	8004320 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800546a:	4620      	mov	r0, r4
 800546c:	f7fe ffc0 	bl	80043f0 <USBD_Start>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	bf00      	nop
 8005474:	20000ab0 	.word	0x20000ab0
 8005478:	20000124 	.word	0x20000124
 800547c:	20000048 	.word	0x20000048
 8005480:	20000114 	.word	0x20000114

08005484 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8005484:	2000      	movs	r0, #0
 8005486:	4770      	bx	lr

08005488 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005488:	2000      	movs	r0, #0
 800548a:	4770      	bx	lr

0800548c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	4606      	mov	r6, r0
  /* USER CODE BEGIN 6 */
  uint32_t incommingCount = *Len;
 8005490:	680b      	ldr	r3, [r1, #0]
  uint8_t* BufTmp = Buf;
 8005492:	4602      	mov	r2, r0
  while( incommingCount-- )
 8005494:	e005      	b.n	80054a2 <CDC_Receive_FS+0x16>
	putVcpChar(*BufTmp++);		// move the incoming data to our vcp buffer
 8005496:	1c55      	adds	r5, r2, #1
 8005498:	7810      	ldrb	r0, [r2, #0]
 800549a:	f000 f9f9 	bl	8005890 <putVcpChar>
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  uint32_t incommingCount = *Len;
  uint8_t* BufTmp = Buf;
  while( incommingCount-- )
 800549e:	4623      	mov	r3, r4
	putVcpChar(*BufTmp++);		// move the incoming data to our vcp buffer
 80054a0:	462a      	mov	r2, r5
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  uint32_t incommingCount = *Len;
  uint8_t* BufTmp = Buf;
  while( incommingCount-- )
 80054a2:	1e5c      	subs	r4, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f6      	bne.n	8005496 <CDC_Receive_FS+0xa>
	putVcpChar(*BufTmp++);		// move the incoming data to our vcp buffer

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80054a8:	4c04      	ldr	r4, [pc, #16]	; (80054bc <CDC_Receive_FS+0x30>)
 80054aa:	4631      	mov	r1, r6
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7fe ff47 	bl	8004340 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80054b2:	4620      	mov	r0, r4
 80054b4:	f7fe ff62 	bl	800437c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 80054b8:	2000      	movs	r0, #0
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	20000ab0 	.word	0x20000ab0

080054c0 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 80054c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80054c2:	4c06      	ldr	r4, [pc, #24]	; (80054dc <CDC_Init_FS+0x1c>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	4906      	ldr	r1, [pc, #24]	; (80054e0 <CDC_Init_FS+0x20>)
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7fe ff31 	bl	8004330 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80054ce:	4905      	ldr	r1, [pc, #20]	; (80054e4 <CDC_Init_FS+0x24>)
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7fe ff35 	bl	8004340 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 80054d6:	2000      	movs	r0, #0
 80054d8:	bd10      	pop	{r4, pc}
 80054da:	bf00      	nop
 80054dc:	20000ab0 	.word	0x20000ab0
 80054e0:	20000cd8 	.word	0x20000cd8
 80054e4:	20000cd4 	.word	0x20000cd4

080054e8 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <CDC_Transmit_FS+0x28>)
 80054ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if (hcdc->TxState != 0){
 80054ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054f2:	b953      	cbnz	r3, 800550a <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80054f4:	b510      	push	{r4, lr}
 80054f6:	460a      	mov	r2, r1
 80054f8:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80054fa:	4c05      	ldr	r4, [pc, #20]	; (8005510 <CDC_Transmit_FS+0x28>)
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7fe ff17 	bl	8004330 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005502:	4620      	mov	r0, r4
 8005504:	f7fe ff22 	bl	800434c <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */ 
  return result;
 8005508:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
 800550a:	2001      	movs	r0, #1
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000ab0 	.word	0x20000ab0

08005514 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8005514:	6802      	ldr	r2, [r0, #0]
 8005516:	4b15      	ldr	r3, [pc, #84]	; (800556c <HAL_PCD_MspInit+0x58>)
 8005518:	429a      	cmp	r2, r3
 800551a:	d125      	bne.n	8005568 <HAL_PCD_MspInit+0x54>
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800551c:	b510      	push	{r4, lr}
 800551e:	b086      	sub	sp, #24
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005520:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005524:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2400      	movs	r4, #0
 800552c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800552e:	2303      	movs	r3, #3
 8005530:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005532:	230e      	movs	r3, #14
 8005534:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005536:	a901      	add	r1, sp, #4
 8005538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800553c:	f7fc fb70 	bl	8001c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_PCD_MspInit+0x5c>)
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8005554:	4622      	mov	r2, r4
 8005556:	4621      	mov	r1, r4
 8005558:	2014      	movs	r0, #20
 800555a:	f7fc faf7 	bl	8001b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800555e:	2014      	movs	r0, #20
 8005560:	f7fc fb26 	bl	8001bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005564:	b006      	add	sp, #24
 8005566:	bd10      	pop	{r4, pc}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40005c00 	.word	0x40005c00
 8005570:	40021000 	.word	0x40021000

08005574 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005574:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005576:	f500 715d 	add.w	r1, r0, #884	; 0x374
 800557a:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 800557e:	f7fe ff53 	bl	8004428 <USBD_LL_SetupStage>
 8005582:	bd08      	pop	{r3, pc}

08005584 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005584:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005586:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800558a:	0093      	lsls	r3, r2, #2
 800558c:	4403      	add	r3, r0
 800558e:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8005592:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005596:	f7fe ff75 	bl	8004484 <USBD_LL_DataOutStage>
 800559a:	bd08      	pop	{r3, pc}

0800559c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800559c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800559e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80055a2:	0093      	lsls	r3, r2, #2
 80055a4:	4403      	add	r3, r0
 80055a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a8:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80055ac:	f7fe ff9e 	bl	80044ec <USBD_LL_DataInStage>
 80055b0:	bd08      	pop	{r3, pc}
 80055b2:	bf00      	nop

080055b4 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80055b4:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80055b6:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80055ba:	f7ff f821 	bl	8004600 <USBD_LL_SOF>
 80055be:	bd08      	pop	{r3, pc}

080055c0 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80055c4:	2101      	movs	r1, #1
 80055c6:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80055ca:	f7ff f805 	bl	80045d8 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80055ce:	f8d4 03a4 	ldr.w	r0, [r4, #932]	; 0x3a4
 80055d2:	f7fe ffe1 	bl	8004598 <USBD_LL_Reset>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80055dc:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80055e0:	f7fe fffe 	bl	80045e0 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80055e4:	69a3      	ldr	r3, [r4, #24]
 80055e6:	b123      	cbz	r3, 80055f2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80055e8:	4a02      	ldr	r2, [pc, #8]	; (80055f4 <HAL_PCD_SuspendCallback+0x1c>)
 80055ea:	6913      	ldr	r3, [r2, #16]
 80055ec:	f043 0306 	orr.w	r3, r3, #6
 80055f0:	6113      	str	r3, [r2, #16]
 80055f2:	bd10      	pop	{r4, pc}
 80055f4:	e000ed00 	.word	0xe000ed00

080055f8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80055f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80055fa:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80055fe:	f7fe fff9 	bl	80045f4 <USBD_LL_Resume>
 8005602:	bd08      	pop	{r3, pc}

08005604 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8005604:	b510      	push	{r4, lr}
 8005606:	4604      	mov	r4, r0
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8005608:	481d      	ldr	r0, [pc, #116]	; (8005680 <USBD_LL_Init+0x7c>)
 800560a:	f8c0 43a4 	str.w	r4, [r0, #932]	; 0x3a4
  pdev->pData = &hpcd_USB_FS;
 800560e:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <USBD_LL_Init+0x80>)
 8005614:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005616:	2308      	movs	r3, #8
 8005618:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800561a:	2202      	movs	r2, #2
 800561c:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800561e:	2300      	movs	r3, #0
 8005620:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005622:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005624:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005626:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005628:	f7fc fbca 	bl	8001dc0 <HAL_PCD_Init>
 800562c:	b108      	cbz	r0, 8005632 <USBD_LL_Init+0x2e>
  {
    Error_Handler();
 800562e:	f7ff fc3f 	bl	8004eb0 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005632:	2318      	movs	r3, #24
 8005634:	2200      	movs	r2, #0
 8005636:	4611      	mov	r1, r2
 8005638:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800563c:	f7fd fc8c 	bl	8002f58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005640:	2358      	movs	r3, #88	; 0x58
 8005642:	2200      	movs	r2, #0
 8005644:	2180      	movs	r1, #128	; 0x80
 8005646:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800564a:	f7fd fc85 	bl	8002f58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 800564e:	23c0      	movs	r3, #192	; 0xc0
 8005650:	2200      	movs	r2, #0
 8005652:	2181      	movs	r1, #129	; 0x81
 8005654:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005658:	f7fd fc7e 	bl	8002f58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800565c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005660:	2200      	movs	r2, #0
 8005662:	2101      	movs	r1, #1
 8005664:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005668:	f7fd fc76 	bl	8002f58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 800566c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005670:	2200      	movs	r2, #0
 8005672:	2182      	movs	r1, #130	; 0x82
 8005674:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005678:	f7fd fc6e 	bl	8002f58 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 800567c:	2000      	movs	r0, #0
 800567e:	bd10      	pop	{r4, pc}
 8005680:	20000cdc 	.word	0x20000cdc
 8005684:	40005c00 	.word	0x40005c00

08005688 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005688:	b508      	push	{r3, lr}
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 800568a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800568e:	f7fc fbed 	bl	8001e6c <HAL_PCD_Start>
  return USBD_OK;
}
 8005692:	2000      	movs	r0, #0
 8005694:	bd08      	pop	{r3, pc}
 8005696:	bf00      	nop

08005698 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8005698:	b510      	push	{r4, lr}
 800569a:	461c      	mov	r4, r3
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 800569c:	4613      	mov	r3, r2
 800569e:	4622      	mov	r2, r4
 80056a0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80056a4:	f7fc fbfe 	bl	8001ea4 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	bd10      	pop	{r4, pc}

080056ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80056ac:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80056ae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80056b2:	f7fc fdd9 	bl	8002268 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80056b6:	2000      	movs	r0, #0
 80056b8:	bd08      	pop	{r3, pc}
 80056ba:	bf00      	nop

080056bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80056bc:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80056be:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80056c2:	f7fd fb6f 	bl	8002da4 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80056c6:	2000      	movs	r0, #0
 80056c8:	bd08      	pop	{r3, pc}
 80056ca:	bf00      	nop

080056cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80056cc:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80056ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80056d2:	f7fd fbc9 	bl	8002e68 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80056d6:	2000      	movs	r0, #0
 80056d8:	bd08      	pop	{r3, pc}
 80056da:	bf00      	nop

080056dc <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80056dc:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 80056e0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80056e4:	d008      	beq.n	80056f8 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80056e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80056ea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80056ee:	008b      	lsls	r3, r1, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80056f6:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80056f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80056fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005700:	008b      	lsls	r3, r1, #2
 8005702:	4413      	add	r3, r2
 8005704:	f893 01ce 	ldrb.w	r0, [r3, #462]	; 0x1ce
  }
}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop

0800570c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800570c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 800570e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005712:	f7fc fbb1 	bl	8001e78 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8005716:	2000      	movs	r0, #0
 8005718:	bd08      	pop	{r3, pc}
 800571a:	bf00      	nop

0800571c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 800571c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 800571e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005722:	f7fc ff8f 	bl	8002644 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8005726:	2000      	movs	r0, #0
 8005728:	bd08      	pop	{r3, pc}
 800572a:	bf00      	nop

0800572c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 800572c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 800572e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005732:	f7fc feb5 	bl	80024a0 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8005736:	2000      	movs	r0, #0
 8005738:	bd08      	pop	{r3, pc}
 800573a:	bf00      	nop

0800573c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 800573c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800573e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005742:	f7fc ff75 	bl	8002630 <HAL_PCD_EP_GetRxCount>
}
 8005746:	bd08      	pop	{r3, pc}

08005748 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005748:	4800      	ldr	r0, [pc, #0]	; (800574c <USBD_static_malloc+0x4>)
 800574a:	4770      	bx	lr
 800574c:	20000700 	.word	0x20000700

08005750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop

08005754 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8005758:	2312      	movs	r3, #18
 800575a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800575c:	4800      	ldr	r0, [pc, #0]	; (8005760 <USBD_FS_DeviceDescriptor+0x8>)
 800575e:	4770      	bx	lr
 8005760:	20000144 	.word	0x20000144

08005764 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8005764:	2304      	movs	r3, #4
 8005766:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005768:	4800      	ldr	r0, [pc, #0]	; (800576c <USBD_FS_LangIDStrDescriptor+0x8>)
 800576a:	4770      	bx	lr
 800576c:	20000140 	.word	0x20000140

08005770 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005770:	b508      	push	{r3, lr}
 8005772:	460a      	mov	r2, r1
  if(speed == 0)
 8005774:	b920      	cbnz	r0, 8005780 <USBD_FS_ProductStrDescriptor+0x10>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005776:	4905      	ldr	r1, [pc, #20]	; (800578c <USBD_FS_ProductStrDescriptor+0x1c>)
 8005778:	4805      	ldr	r0, [pc, #20]	; (8005790 <USBD_FS_ProductStrDescriptor+0x20>)
 800577a:	f7ff f9b1 	bl	8004ae0 <USBD_GetString>
 800577e:	e003      	b.n	8005788 <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 8005780:	4902      	ldr	r1, [pc, #8]	; (800578c <USBD_FS_ProductStrDescriptor+0x1c>)
 8005782:	4803      	ldr	r0, [pc, #12]	; (8005790 <USBD_FS_ProductStrDescriptor+0x20>)
 8005784:	f7ff f9ac 	bl	8004ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8005788:	4800      	ldr	r0, [pc, #0]	; (800578c <USBD_FS_ProductStrDescriptor+0x1c>)
 800578a:	bd08      	pop	{r3, pc}
 800578c:	20001084 	.word	0x20001084
 8005790:	0800cd4c 	.word	0x0800cd4c

08005794 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005794:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005796:	4c04      	ldr	r4, [pc, #16]	; (80057a8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005798:	460a      	mov	r2, r1
 800579a:	4621      	mov	r1, r4
 800579c:	4803      	ldr	r0, [pc, #12]	; (80057ac <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800579e:	f7ff f99f 	bl	8004ae0 <USBD_GetString>
  return USBD_StrDesc;
}
 80057a2:	4620      	mov	r0, r4
 80057a4:	bd10      	pop	{r4, pc}
 80057a6:	bf00      	nop
 80057a8:	20001084 	.word	0x20001084
 80057ac:	0800cd64 	.word	0x0800cd64

080057b0 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80057b0:	b508      	push	{r3, lr}
 80057b2:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 80057b4:	b920      	cbnz	r0, 80057c0 <USBD_FS_SerialStrDescriptor+0x10>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80057b6:	4905      	ldr	r1, [pc, #20]	; (80057cc <USBD_FS_SerialStrDescriptor+0x1c>)
 80057b8:	4805      	ldr	r0, [pc, #20]	; (80057d0 <USBD_FS_SerialStrDescriptor+0x20>)
 80057ba:	f7ff f991 	bl	8004ae0 <USBD_GetString>
 80057be:	e003      	b.n	80057c8 <USBD_FS_SerialStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 80057c0:	4902      	ldr	r1, [pc, #8]	; (80057cc <USBD_FS_SerialStrDescriptor+0x1c>)
 80057c2:	4803      	ldr	r0, [pc, #12]	; (80057d0 <USBD_FS_SerialStrDescriptor+0x20>)
 80057c4:	f7ff f98c 	bl	8004ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80057c8:	4800      	ldr	r0, [pc, #0]	; (80057cc <USBD_FS_SerialStrDescriptor+0x1c>)
 80057ca:	bd08      	pop	{r3, pc}
 80057cc:	20001084 	.word	0x20001084
 80057d0:	0800cd78 	.word	0x0800cd78

080057d4 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80057d4:	b508      	push	{r3, lr}
 80057d6:	460a      	mov	r2, r1
  if(speed  == USBD_SPEED_HIGH)
 80057d8:	b920      	cbnz	r0, 80057e4 <USBD_FS_ConfigStrDescriptor+0x10>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80057da:	4905      	ldr	r1, [pc, #20]	; (80057f0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80057dc:	4805      	ldr	r0, [pc, #20]	; (80057f4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80057de:	f7ff f97f 	bl	8004ae0 <USBD_GetString>
 80057e2:	e003      	b.n	80057ec <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80057e4:	4902      	ldr	r1, [pc, #8]	; (80057f0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80057e6:	4803      	ldr	r0, [pc, #12]	; (80057f4 <USBD_FS_ConfigStrDescriptor+0x20>)
 80057e8:	f7ff f97a 	bl	8004ae0 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 80057ec:	4800      	ldr	r0, [pc, #0]	; (80057f0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80057ee:	bd08      	pop	{r3, pc}
 80057f0:	20001084 	.word	0x20001084
 80057f4:	0800cd88 	.word	0x0800cd88

080057f8 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80057f8:	b508      	push	{r3, lr}
 80057fa:	460a      	mov	r2, r1
  if(speed == 0)
 80057fc:	b920      	cbnz	r0, 8005808 <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80057fe:	4905      	ldr	r1, [pc, #20]	; (8005814 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005800:	4805      	ldr	r0, [pc, #20]	; (8005818 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005802:	f7ff f96d 	bl	8004ae0 <USBD_GetString>
 8005806:	e003      	b.n	8005810 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005808:	4902      	ldr	r1, [pc, #8]	; (8005814 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800580a:	4803      	ldr	r0, [pc, #12]	; (8005818 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800580c:	f7ff f968 	bl	8004ae0 <USBD_GetString>
  }
  return USBD_StrDesc;  
}
 8005810:	4800      	ldr	r0, [pc, #0]	; (8005814 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005812:	bd08      	pop	{r3, pc}
 8005814:	20001084 	.word	0x20001084
 8005818:	0800cd94 	.word	0x0800cd94

0800581c <_write>:
//   ptr         : pointer to character buffer to be outputed
//   len         : number of characters at ptr to be sent
// RETURNS       :
//   number of characters actually sent (in this case always assumes successful transmission of len)

int _write(int fd, char *ptr, size_t len){
 800581c:	b510      	push	{r4, lr}
 800581e:	4608      	mov	r0, r1
 8005820:	4614      	mov	r4, r2
	CDC_Transmit_FS( (uint8_t *)ptr, len);
 8005822:	4611      	mov	r1, r2
 8005824:	f7ff fe60 	bl	80054e8 <CDC_Transmit_FS>
	return len;
}
 8005828:	4620      	mov	r0, r4
 800582a:	bd10      	pop	{r4, pc}

0800582c <_write_r>:
//   len         : number of characters at ptr to be sent
// RETURNS       :
//   number of characters actually sent (in this case always assumes successful transmission of len)

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 800582c:	b508      	push	{r3, lr}
 800582e:	4608      	mov	r0, r1
 8005830:	4611      	mov	r1, r2
	return _write(fd, ptr, len);
 8005832:	461a      	mov	r2, r3
 8005834:	f7ff fff2 	bl	800581c <_write>
}
 8005838:	bd08      	pop	{r3, pc}
 800583a:	bf00      	nop

0800583c <initializeVcpQueue>:
// RETURNS       :
//   Nothing
void initializeVcpQueue(circularQueue_t *theQueue)
{
    int i;
    theQueue->validItems  =  0;
 800583c:	2300      	movs	r3, #0
 800583e:	6083      	str	r3, [r0, #8]
    theQueue->first       =  0;
 8005840:	6003      	str	r3, [r0, #0]
    theQueue->last        =  0;
 8005842:	6043      	str	r3, [r0, #4]
    for(i=0; i<MAX_ITEMS; i++)
 8005844:	e003      	b.n	800584e <initializeVcpQueue+0x12>
    {
        theQueue->data[i] = 0;
 8005846:	18c2      	adds	r2, r0, r3
 8005848:	2100      	movs	r1, #0
 800584a:	7311      	strb	r1, [r2, #12]
{
    int i;
    theQueue->validItems  =  0;
    theQueue->first       =  0;
    theQueue->last        =  0;
    for(i=0; i<MAX_ITEMS; i++)
 800584c:	3301      	adds	r3, #1
 800584e:	2b3f      	cmp	r3, #63	; 0x3f
 8005850:	ddf9      	ble.n	8005846 <initializeVcpQueue+0xa>
    {
        theQueue->data[i] = 0;
    }
    return;
}
 8005852:	4770      	bx	lr

08005854 <isVcpEmpty>:
//   theQueue    : pointer to circular queue to be used
// RETURNS       :
//   return 0 if queue is not empty, or 1 if it is
int isVcpEmpty(circularQueue_t *theQueue)
{
    if(theQueue->validItems==0)
 8005854:	6883      	ldr	r3, [r0, #8]
 8005856:	b90b      	cbnz	r3, 800585c <isVcpEmpty+0x8>
        return(1);
 8005858:	2001      	movs	r0, #1
 800585a:	4770      	bx	lr
    else
        return(0);
 800585c:	2000      	movs	r0, #0
}
 800585e:	4770      	bx	lr

08005860 <putVcpItem>:
//   theItemValue: byte to be queued
// RETURNS       :
//   return 0 on success
int putVcpItem(circularQueue_t *theQueue, uint8_t theItemValue)
{
    if(theQueue->validItems>=MAX_ITEMS)
 8005860:	6883      	ldr	r3, [r0, #8]
 8005862:	2b3f      	cmp	r3, #63	; 0x3f
 8005864:	dc0f      	bgt.n	8005886 <putVcpItem+0x26>
 //       printf("You cannot add items\n");
        return(-1);
    }
    else
    {
        theQueue->validItems++;
 8005866:	3301      	adds	r3, #1
 8005868:	6083      	str	r3, [r0, #8]
        theQueue->data[theQueue->last] = theItemValue;
 800586a:	6843      	ldr	r3, [r0, #4]
 800586c:	18c2      	adds	r2, r0, r3
 800586e:	7311      	strb	r1, [r2, #12]
        theQueue->last = (theQueue->last+1)%MAX_ITEMS;
 8005870:	3301      	adds	r3, #1
 8005872:	4a06      	ldr	r2, [pc, #24]	; (800588c <putVcpItem+0x2c>)
 8005874:	4013      	ands	r3, r2
 8005876:	d503      	bpl.n	8005880 <putVcpItem+0x20>
 8005878:	3b01      	subs	r3, #1
 800587a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800587e:	3301      	adds	r3, #1
 8005880:	6043      	str	r3, [r0, #4]
    }
    return 0;
 8005882:	2000      	movs	r0, #0
 8005884:	4770      	bx	lr
{
    if(theQueue->validItems>=MAX_ITEMS)
    {
 //       printf("The queue is full\n");
 //       printf("You cannot add items\n");
        return(-1);
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
        theQueue->validItems++;
        theQueue->data[theQueue->last] = theItemValue;
        theQueue->last = (theQueue->last+1)%MAX_ITEMS;
    }
    return 0;
}
 800588a:	4770      	bx	lr
 800588c:	8000003f 	.word	0x8000003f

08005890 <putVcpChar>:
// PARAMETERS    :
//   theItemValue: byte to be queued
// RETURNS       :
//   return 0 on success
int putVcpChar( uint8_t theItemValue)
{
 8005890:	b508      	push	{r3, lr}
	return( putVcpItem(&VcpQueue, theItemValue) );
 8005892:	4601      	mov	r1, r0
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <putVcpChar+0xc>)
 8005896:	f7ff ffe3 	bl	8005860 <putVcpItem>

}
 800589a:	bd08      	pop	{r3, pc}
 800589c:	200009d4 	.word	0x200009d4

080058a0 <getVcpItem>:
//   theQueue    : pointer to circular queue to be used
//   theItemValue: pointer to byte to be unqueued
// RETURNS       :
//   return 0 on success
int getVcpItem(circularQueue_t *theQueue, uint8_t *theItemValue)
{
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4604      	mov	r4, r0
 80058a4:	460d      	mov	r5, r1
    if(isVcpEmpty(theQueue))
 80058a6:	f7ff ffd5 	bl	8005854 <isVcpEmpty>
 80058aa:	b990      	cbnz	r0, 80058d2 <getVcpItem+0x32>
 80058ac:	4601      	mov	r1, r0
//        printf("isempty\n");
        return(-1);
    }
    else
    {
        *theItemValue=theQueue->data[theQueue->first];
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	4423      	add	r3, r4
 80058b2:	7b1b      	ldrb	r3, [r3, #12]
 80058b4:	702b      	strb	r3, [r5, #0]
        theQueue->first=(theQueue->first+1)%MAX_ITEMS;
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a08      	ldr	r2, [pc, #32]	; (80058dc <getVcpItem+0x3c>)
 80058bc:	4013      	ands	r3, r2
 80058be:	d503      	bpl.n	80058c8 <getVcpItem+0x28>
 80058c0:	3b01      	subs	r3, #1
 80058c2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80058c6:	3301      	adds	r3, #1
 80058c8:	6023      	str	r3, [r4, #0]
        theQueue->validItems--;
 80058ca:	68a3      	ldr	r3, [r4, #8]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	60a3      	str	r3, [r4, #8]
    }
    return(0);
 80058d0:	e001      	b.n	80058d6 <getVcpItem+0x36>
int getVcpItem(circularQueue_t *theQueue, uint8_t *theItemValue)
{
    if(isVcpEmpty(theQueue))
    {
//        printf("isempty\n");
        return(-1);
 80058d2:	f04f 31ff 	mov.w	r1, #4294967295
        *theItemValue=theQueue->data[theQueue->first];
        theQueue->first=(theQueue->first+1)%MAX_ITEMS;
        theQueue->validItems--;
    }
    return(0);
}
 80058d6:	4608      	mov	r0, r1
 80058d8:	bd38      	pop	{r3, r4, r5, pc}
 80058da:	bf00      	nop
 80058dc:	8000003f 	.word	0x8000003f

080058e0 <_read>:
//   ptr         : pointer of where data will be put that is read
//   len         : maximum number of characters to read
// RETURNS       :
//   number of characters actually read
int _read( int fd, char *ptr, int len )
{
 80058e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e4:	4688      	mov	r8, r1
 80058e6:	4614      	mov	r4, r2
  uint32_t count;
  uint32_t countMoved = 0;
  if( isVcpEmpty(&VcpQueue))
 80058e8:	480e      	ldr	r0, [pc, #56]	; (8005924 <_read+0x44>)
 80058ea:	f7ff ffb3 	bl	8005854 <isVcpEmpty>
 80058ee:	b9a0      	cbnz	r0, 800591a <_read+0x3a>
	  count = 0;
  else
  {
	  count = len;		// assume that len will be filled to start off
 80058f0:	4627      	mov	r7, r4
// RETURNS       :
//   number of characters actually read
int _read( int fd, char *ptr, int len )
{
  uint32_t count;
  uint32_t countMoved = 0;
 80058f2:	2600      	movs	r6, #0
  if( isVcpEmpty(&VcpQueue))
	  count = 0;
  else
  {
	  count = len;		// assume that len will be filled to start off
	  while( len-- )    // move data from vcp queue to stdin
 80058f4:	e00d      	b.n	8005912 <_read+0x32>
	  {
		  // stop if no more data in vcp queue
		  if( !isVcpEmpty(&VcpQueue) )
 80058f6:	480b      	ldr	r0, [pc, #44]	; (8005924 <_read+0x44>)
 80058f8:	f7ff ffac 	bl	8005854 <isVcpEmpty>
 80058fc:	b938      	cbnz	r0, 800590e <_read+0x2e>
		  {
			  getVcpItem(&VcpQueue, (uint8_t *)ptr);
 80058fe:	4641      	mov	r1, r8
 8005900:	4808      	ldr	r0, [pc, #32]	; (8005924 <_read+0x44>)
 8005902:	f7ff ffcd 	bl	80058a0 <getVcpItem>
			  ptr++;
 8005906:	f108 0801 	add.w	r8, r8, #1
			  countMoved++;
 800590a:	3601      	adds	r6, #1
 800590c:	e000      	b.n	8005910 <_read+0x30>
		  }
		  else
		  {
			  // return that only some of len buffer was filled
			  count = countMoved;
 800590e:	4637      	mov	r7, r6
 8005910:	462c      	mov	r4, r5
  if( isVcpEmpty(&VcpQueue))
	  count = 0;
  else
  {
	  count = len;		// assume that len will be filled to start off
	  while( len-- )    // move data from vcp queue to stdin
 8005912:	1e65      	subs	r5, r4, #1
 8005914:	2c00      	cmp	r4, #0
 8005916:	d1ee      	bne.n	80058f6 <_read+0x16>
 8005918:	e000      	b.n	800591c <_read+0x3c>
int _read( int fd, char *ptr, int len )
{
  uint32_t count;
  uint32_t countMoved = 0;
  if( isVcpEmpty(&VcpQueue))
	  count = 0;
 800591a:	2700      	movs	r7, #0
		  }
	  }

  }
  return count;
}
 800591c:	4638      	mov	r0, r7
 800591e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005922:	bf00      	nop
 8005924:	200009d4 	.word	0x200009d4

08005928 <_read_r>:
//   ptr         : pointer of where data will be put that is read
//   len         : maximum number of characters to read
// RETURNS       :
//   number of characters actually read
int _read_r( void *r, int fd, char *ptr, int len )
{
 8005928:	b508      	push	{r3, lr}
 800592a:	4608      	mov	r0, r1
 800592c:	4611      	mov	r1, r2
  return _read( fd, ptr, len);
 800592e:	461a      	mov	r2, r3
 8005930:	f7ff ffd6 	bl	80058e0 <_read>
}
 8005934:	bd08      	pop	{r3, pc}
 8005936:	bf00      	nop

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <__libc_init_array+0x3c>)
 800593c:	4c0e      	ldr	r4, [pc, #56]	; (8005978 <__libc_init_array+0x40>)
 800593e:	1ae4      	subs	r4, r4, r3
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2500      	movs	r5, #0
 8005944:	461e      	mov	r6, r3
 8005946:	42a5      	cmp	r5, r4
 8005948:	d004      	beq.n	8005954 <__libc_init_array+0x1c>
 800594a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800594e:	4798      	blx	r3
 8005950:	3501      	adds	r5, #1
 8005952:	e7f8      	b.n	8005946 <__libc_init_array+0xe>
 8005954:	f007 f9ca 	bl	800ccec <_init>
 8005958:	4c08      	ldr	r4, [pc, #32]	; (800597c <__libc_init_array+0x44>)
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <__libc_init_array+0x48>)
 800595c:	1ae4      	subs	r4, r4, r3
 800595e:	10a4      	asrs	r4, r4, #2
 8005960:	2500      	movs	r5, #0
 8005962:	461e      	mov	r6, r3
 8005964:	42a5      	cmp	r5, r4
 8005966:	d004      	beq.n	8005972 <__libc_init_array+0x3a>
 8005968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800596c:	4798      	blx	r3
 800596e:	3501      	adds	r5, #1
 8005970:	e7f8      	b.n	8005964 <__libc_init_array+0x2c>
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	0800d118 	.word	0x0800d118
 8005978:	0800d118 	.word	0x0800d118
 800597c:	0800d11c 	.word	0x0800d11c
 8005980:	0800d118 	.word	0x0800d118

08005984 <printf>:
 8005984:	b40f      	push	{r0, r1, r2, r3}
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <printf+0x2c>)
 8005988:	b513      	push	{r0, r1, r4, lr}
 800598a:	681c      	ldr	r4, [r3, #0]
 800598c:	b124      	cbz	r4, 8005998 <printf+0x14>
 800598e:	69a3      	ldr	r3, [r4, #24]
 8005990:	b913      	cbnz	r3, 8005998 <printf+0x14>
 8005992:	4620      	mov	r0, r4
 8005994:	f002 fd98 	bl	80084c8 <__sinit>
 8005998:	ab05      	add	r3, sp, #20
 800599a:	9a04      	ldr	r2, [sp, #16]
 800599c:	68a1      	ldr	r1, [r4, #8]
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f821 	bl	80059e8 <_vfprintf_r>
 80059a6:	b002      	add	sp, #8
 80059a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ac:	b004      	add	sp, #16
 80059ae:	4770      	bx	lr
 80059b0:	2000024c 	.word	0x2000024c

080059b4 <scanf>:
 80059b4:	b40f      	push	{r0, r1, r2, r3}
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <scanf+0x2c>)
 80059b8:	b513      	push	{r0, r1, r4, lr}
 80059ba:	681c      	ldr	r4, [r3, #0]
 80059bc:	b124      	cbz	r4, 80059c8 <scanf+0x14>
 80059be:	69a3      	ldr	r3, [r4, #24]
 80059c0:	b913      	cbnz	r3, 80059c8 <scanf+0x14>
 80059c2:	4620      	mov	r0, r4
 80059c4:	f002 fd80 	bl	80084c8 <__sinit>
 80059c8:	ab05      	add	r3, sp, #20
 80059ca:	9a04      	ldr	r2, [sp, #16]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	4620      	mov	r0, r4
 80059d2:	f001 fda5 	bl	8007520 <_vfscanf_r>
 80059d6:	b002      	add	sp, #8
 80059d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059dc:	b004      	add	sp, #16
 80059de:	4770      	bx	lr
 80059e0:	2000024c 	.word	0x2000024c
 80059e4:	00000000 	.word	0x00000000

080059e8 <_vfprintf_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	b0bd      	sub	sp, #244	; 0xf4
 80059ee:	468b      	mov	fp, r1
 80059f0:	9205      	str	r2, [sp, #20]
 80059f2:	461c      	mov	r4, r3
 80059f4:	461f      	mov	r7, r3
 80059f6:	4682      	mov	sl, r0
 80059f8:	f002 ff9e 	bl	8008938 <_localeconv_r>
 80059fc:	6803      	ldr	r3, [r0, #0]
 80059fe:	930d      	str	r3, [sp, #52]	; 0x34
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fa fc35 	bl	8000270 <strlen>
 8005a06:	9008      	str	r0, [sp, #32]
 8005a08:	f1ba 0f00 	cmp.w	sl, #0
 8005a0c:	d005      	beq.n	8005a1a <_vfprintf_r+0x32>
 8005a0e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005a12:	b913      	cbnz	r3, 8005a1a <_vfprintf_r+0x32>
 8005a14:	4650      	mov	r0, sl
 8005a16:	f002 fd57 	bl	80084c8 <__sinit>
 8005a1a:	4b9d      	ldr	r3, [pc, #628]	; (8005c90 <_vfprintf_r+0x2a8>)
 8005a1c:	459b      	cmp	fp, r3
 8005a1e:	d102      	bne.n	8005a26 <_vfprintf_r+0x3e>
 8005a20:	f8da b004 	ldr.w	fp, [sl, #4]
 8005a24:	e00a      	b.n	8005a3c <_vfprintf_r+0x54>
 8005a26:	4b9b      	ldr	r3, [pc, #620]	; (8005c94 <_vfprintf_r+0x2ac>)
 8005a28:	459b      	cmp	fp, r3
 8005a2a:	d102      	bne.n	8005a32 <_vfprintf_r+0x4a>
 8005a2c:	f8da b008 	ldr.w	fp, [sl, #8]
 8005a30:	e004      	b.n	8005a3c <_vfprintf_r+0x54>
 8005a32:	4b99      	ldr	r3, [pc, #612]	; (8005c98 <_vfprintf_r+0x2b0>)
 8005a34:	459b      	cmp	fp, r3
 8005a36:	bf08      	it	eq
 8005a38:	f8da b00c 	ldreq.w	fp, [sl, #12]
 8005a3c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8005a40:	0498      	lsls	r0, r3, #18
 8005a42:	d409      	bmi.n	8005a58 <_vfprintf_r+0x70>
 8005a44:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8005a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a50:	f8ab 300c 	strh.w	r3, [fp, #12]
 8005a54:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8005a58:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005a5c:	0719      	lsls	r1, r3, #28
 8005a5e:	d509      	bpl.n	8005a74 <_vfprintf_r+0x8c>
 8005a60:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005a64:	b133      	cbz	r3, 8005a74 <_vfprintf_r+0x8c>
 8005a66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005a6a:	f003 031a 	and.w	r3, r3, #26
 8005a6e:	2b0a      	cmp	r3, #10
 8005a70:	d116      	bne.n	8005aa0 <_vfprintf_r+0xb8>
 8005a72:	e009      	b.n	8005a88 <_vfprintf_r+0xa0>
 8005a74:	4659      	mov	r1, fp
 8005a76:	4650      	mov	r0, sl
 8005a78:	f001 fd7a 	bl	8007570 <__swsetup_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d0f2      	beq.n	8005a66 <_vfprintf_r+0x7e>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	f000 bfa3 	b.w	80069ce <_vfprintf_r+0xfe6>
 8005a88:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	db07      	blt.n	8005aa0 <_vfprintf_r+0xb8>
 8005a90:	4623      	mov	r3, r4
 8005a92:	9a05      	ldr	r2, [sp, #20]
 8005a94:	4659      	mov	r1, fp
 8005a96:	4650      	mov	r0, sl
 8005a98:	f000 ffa0 	bl	80069dc <__sbprintf>
 8005a9c:	f000 bf97 	b.w	80069ce <_vfprintf_r+0xfe6>
 8005aa0:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8005c88 <_vfprintf_r+0x2a0>
 8005aa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	ac2c      	add	r4, sp, #176	; 0xb0
 8005aac:	941f      	str	r4, [sp, #124]	; 0x7c
 8005aae:	9321      	str	r3, [sp, #132]	; 0x84
 8005ab0:	9320      	str	r3, [sp, #128]	; 0x80
 8005ab2:	9304      	str	r3, [sp, #16]
 8005ab4:	9311      	str	r3, [sp, #68]	; 0x44
 8005ab6:	9310      	str	r3, [sp, #64]	; 0x40
 8005ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8005aba:	9d05      	ldr	r5, [sp, #20]
 8005abc:	462b      	mov	r3, r5
 8005abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac2:	b11a      	cbz	r2, 8005acc <_vfprintf_r+0xe4>
 8005ac4:	2a25      	cmp	r2, #37	; 0x25
 8005ac6:	d001      	beq.n	8005acc <_vfprintf_r+0xe4>
 8005ac8:	461d      	mov	r5, r3
 8005aca:	e7f7      	b.n	8005abc <_vfprintf_r+0xd4>
 8005acc:	9b05      	ldr	r3, [sp, #20]
 8005ace:	1aee      	subs	r6, r5, r3
 8005ad0:	d017      	beq.n	8005b02 <_vfprintf_r+0x11a>
 8005ad2:	e884 0048 	stmia.w	r4, {r3, r6}
 8005ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ad8:	4433      	add	r3, r6
 8005ada:	9321      	str	r3, [sp, #132]	; 0x84
 8005adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005ade:	3301      	adds	r3, #1
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	9320      	str	r3, [sp, #128]	; 0x80
 8005ae4:	dc01      	bgt.n	8005aea <_vfprintf_r+0x102>
 8005ae6:	3408      	adds	r4, #8
 8005ae8:	e008      	b.n	8005afc <_vfprintf_r+0x114>
 8005aea:	aa1f      	add	r2, sp, #124	; 0x7c
 8005aec:	4659      	mov	r1, fp
 8005aee:	4650      	mov	r0, sl
 8005af0:	f006 f838 	bl	800bb64 <__sprint_r>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	f040 8633 	bne.w	8006760 <_vfprintf_r+0xd78>
 8005afa:	ac2c      	add	r4, sp, #176	; 0xb0
 8005afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afe:	4433      	add	r3, r6
 8005b00:	930a      	str	r3, [sp, #40]	; 0x28
 8005b02:	782b      	ldrb	r3, [r5, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8624 	beq.w	8006752 <_vfprintf_r+0xd6a>
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	1c6b      	adds	r3, r5, #1
 8005b0e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005b12:	4611      	mov	r1, r2
 8005b14:	f04f 39ff 	mov.w	r9, #4294967295
 8005b18:	9209      	str	r2, [sp, #36]	; 0x24
 8005b1a:	4615      	mov	r5, r2
 8005b1c:	200a      	movs	r0, #10
 8005b1e:	1c5e      	adds	r6, r3, #1
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	9605      	str	r6, [sp, #20]
 8005b24:	9302      	str	r3, [sp, #8]
 8005b26:	9b02      	ldr	r3, [sp, #8]
 8005b28:	3b20      	subs	r3, #32
 8005b2a:	2b58      	cmp	r3, #88	; 0x58
 8005b2c:	f200 826a 	bhi.w	8006004 <_vfprintf_r+0x61c>
 8005b30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b34:	0268005c 	.word	0x0268005c
 8005b38:	006c0268 	.word	0x006c0268
 8005b3c:	02680268 	.word	0x02680268
 8005b40:	02680268 	.word	0x02680268
 8005b44:	02680268 	.word	0x02680268
 8005b48:	0059006f 	.word	0x0059006f
 8005b4c:	007a0268 	.word	0x007a0268
 8005b50:	0268007d 	.word	0x0268007d
 8005b54:	00b600a4 	.word	0x00b600a4
 8005b58:	00b600b6 	.word	0x00b600b6
 8005b5c:	00b600b6 	.word	0x00b600b6
 8005b60:	00b600b6 	.word	0x00b600b6
 8005b64:	00b600b6 	.word	0x00b600b6
 8005b68:	02680268 	.word	0x02680268
 8005b6c:	02680268 	.word	0x02680268
 8005b70:	02680268 	.word	0x02680268
 8005b74:	02680268 	.word	0x02680268
 8005b78:	02680268 	.word	0x02680268
 8005b7c:	011200e6 	.word	0x011200e6
 8005b80:	01120268 	.word	0x01120268
 8005b84:	02680268 	.word	0x02680268
 8005b88:	02680268 	.word	0x02680268
 8005b8c:	026800c9 	.word	0x026800c9
 8005b90:	01590268 	.word	0x01590268
 8005b94:	02680268 	.word	0x02680268
 8005b98:	02680268 	.word	0x02680268
 8005b9c:	01a00268 	.word	0x01a00268
 8005ba0:	02680268 	.word	0x02680268
 8005ba4:	02680067 	.word	0x02680067
 8005ba8:	02680268 	.word	0x02680268
 8005bac:	02680268 	.word	0x02680268
 8005bb0:	02680268 	.word	0x02680268
 8005bb4:	02680268 	.word	0x02680268
 8005bb8:	00dd0268 	.word	0x00dd0268
 8005bbc:	01120061 	.word	0x01120061
 8005bc0:	01120112 	.word	0x01120112
 8005bc4:	006100cc 	.word	0x006100cc
 8005bc8:	02680268 	.word	0x02680268
 8005bcc:	026800cf 	.word	0x026800cf
 8005bd0:	015b013b 	.word	0x015b013b
 8005bd4:	00da0176 	.word	0x00da0176
 8005bd8:	01870268 	.word	0x01870268
 8005bdc:	01a20268 	.word	0x01a20268
 8005be0:	02680268 	.word	0x02680268
 8005be4:	01ba      	.short	0x01ba
 8005be6:	2201      	movs	r2, #1
 8005be8:	212b      	movs	r1, #43	; 0x2b
 8005bea:	e002      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005bec:	b909      	cbnz	r1, 8005bf2 <_vfprintf_r+0x20a>
 8005bee:	2201      	movs	r2, #1
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	9b05      	ldr	r3, [sp, #20]
 8005bf4:	e793      	b.n	8005b1e <_vfprintf_r+0x136>
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	f000 8087 	beq.w	8005d0a <_vfprintf_r+0x322>
 8005bfc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005c00:	e083      	b.n	8005d0a <_vfprintf_r+0x322>
 8005c02:	b10a      	cbz	r2, 8005c08 <_vfprintf_r+0x220>
 8005c04:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <_vfprintf_r+0x2b4>)
 8005c0a:	e151      	b.n	8005eb0 <_vfprintf_r+0x4c8>
 8005c0c:	f045 0501 	orr.w	r5, r5, #1
 8005c10:	e7ef      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005c12:	683e      	ldr	r6, [r7, #0]
 8005c14:	9609      	str	r6, [sp, #36]	; 0x24
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	f107 0304 	add.w	r3, r7, #4
 8005c1c:	db01      	blt.n	8005c22 <_vfprintf_r+0x23a>
 8005c1e:	461f      	mov	r7, r3
 8005c20:	e7e7      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005c22:	4276      	negs	r6, r6
 8005c24:	9609      	str	r6, [sp, #36]	; 0x24
 8005c26:	461f      	mov	r7, r3
 8005c28:	f045 0504 	orr.w	r5, r5, #4
 8005c2c:	e7e1      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005c2e:	9e05      	ldr	r6, [sp, #20]
 8005c30:	9b05      	ldr	r3, [sp, #20]
 8005c32:	7836      	ldrb	r6, [r6, #0]
 8005c34:	9602      	str	r6, [sp, #8]
 8005c36:	2e2a      	cmp	r6, #42	; 0x2a
 8005c38:	f103 0301 	add.w	r3, r3, #1
 8005c3c:	d002      	beq.n	8005c44 <_vfprintf_r+0x25c>
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	e00a      	b.n	8005c5a <_vfprintf_r+0x272>
 8005c44:	f8d7 9000 	ldr.w	r9, [r7]
 8005c48:	9305      	str	r3, [sp, #20]
 8005c4a:	1d3e      	adds	r6, r7, #4
 8005c4c:	f1b9 0f00 	cmp.w	r9, #0
 8005c50:	4637      	mov	r7, r6
 8005c52:	dace      	bge.n	8005bf2 <_vfprintf_r+0x20a>
 8005c54:	f04f 39ff 	mov.w	r9, #4294967295
 8005c58:	e7cb      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	9b02      	ldr	r3, [sp, #8]
 8005c5e:	3b30      	subs	r3, #48	; 0x30
 8005c60:	2b09      	cmp	r3, #9
 8005c62:	d808      	bhi.n	8005c76 <_vfprintf_r+0x28e>
 8005c64:	fb00 3909 	mla	r9, r0, r9, r3
 8005c68:	9b05      	ldr	r3, [sp, #20]
 8005c6a:	461e      	mov	r6, r3
 8005c6c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005c70:	9302      	str	r3, [sp, #8]
 8005c72:	4633      	mov	r3, r6
 8005c74:	e7f1      	b.n	8005c5a <_vfprintf_r+0x272>
 8005c76:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8005c7a:	e754      	b.n	8005b26 <_vfprintf_r+0x13e>
 8005c7c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005c80:	e7b7      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
	...
 8005c90:	0800cf30 	.word	0x0800cf30
 8005c94:	0800cf50 	.word	0x0800cf50
 8005c98:	0800cf70 	.word	0x0800cf70
 8005c9c:	0800cdc4 	.word	0x0800cdc4
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca4:	9b02      	ldr	r3, [sp, #8]
 8005ca6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ca8:	3b30      	subs	r3, #48	; 0x30
 8005caa:	fb00 3306 	mla	r3, r0, r6, r3
 8005cae:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	461e      	mov	r6, r3
 8005cb4:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005cb8:	9302      	str	r3, [sp, #8]
 8005cba:	9b02      	ldr	r3, [sp, #8]
 8005cbc:	9605      	str	r6, [sp, #20]
 8005cbe:	3b30      	subs	r3, #48	; 0x30
 8005cc0:	2b09      	cmp	r3, #9
 8005cc2:	d9ef      	bls.n	8005ca4 <_vfprintf_r+0x2bc>
 8005cc4:	e72f      	b.n	8005b26 <_vfprintf_r+0x13e>
 8005cc6:	f045 0508 	orr.w	r5, r5, #8
 8005cca:	e792      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005ccc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8005cd0:	e78f      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005cd2:	9b05      	ldr	r3, [sp, #20]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b6c      	cmp	r3, #108	; 0x6c
 8005cd8:	d103      	bne.n	8005ce2 <_vfprintf_r+0x2fa>
 8005cda:	9b05      	ldr	r3, [sp, #20]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	e002      	b.n	8005ce8 <_vfprintf_r+0x300>
 8005ce2:	f045 0510 	orr.w	r5, r5, #16
 8005ce6:	e784      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005ce8:	f045 0520 	orr.w	r5, r5, #32
 8005cec:	e781      	b.n	8005bf2 <_vfprintf_r+0x20a>
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	9303      	str	r3, [sp, #12]
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005cfa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005cfe:	e190      	b.n	8006022 <_vfprintf_r+0x63a>
 8005d00:	b10a      	cbz	r2, 8005d06 <_vfprintf_r+0x31e>
 8005d02:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005d06:	f045 0510 	orr.w	r5, r5, #16
 8005d0a:	06aa      	lsls	r2, r5, #26
 8005d0c:	d508      	bpl.n	8005d20 <_vfprintf_r+0x338>
 8005d0e:	3707      	adds	r7, #7
 8005d10:	f027 0707 	bic.w	r7, r7, #7
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005d1e:	e00e      	b.n	8005d3e <_vfprintf_r+0x356>
 8005d20:	f015 0f10 	tst.w	r5, #16
 8005d24:	f107 0304 	add.w	r3, r7, #4
 8005d28:	d002      	beq.n	8005d30 <_vfprintf_r+0x348>
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	683e      	ldr	r6, [r7, #0]
 8005d2e:	e005      	b.n	8005d3c <_vfprintf_r+0x354>
 8005d30:	683e      	ldr	r6, [r7, #0]
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d38:	bf18      	it	ne
 8005d3a:	b236      	sxthne	r6, r6
 8005d3c:	17f7      	asrs	r7, r6, #31
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	f177 0300 	sbcs.w	r3, r7, #0
 8005d44:	f280 80de 	bge.w	8005f04 <_vfprintf_r+0x51c>
 8005d48:	4276      	negs	r6, r6
 8005d4a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005d4e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005d52:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005d56:	e0d5      	b.n	8005f04 <_vfprintf_r+0x51c>
 8005d58:	b10a      	cbz	r2, 8005d5e <_vfprintf_r+0x376>
 8005d5a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005d5e:	3707      	adds	r7, #7
 8005d60:	f027 0707 	bic.w	r7, r7, #7
 8005d64:	f107 0308 	add.w	r3, r7, #8
 8005d68:	9303      	str	r3, [sp, #12]
 8005d6a:	ed97 7b00 	vldr	d7, [r7]
 8005d6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d72:	9b06      	ldr	r3, [sp, #24]
 8005d74:	9312      	str	r3, [sp, #72]	; 0x48
 8005d76:	9b07      	ldr	r3, [sp, #28]
 8005d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	4bab      	ldr	r3, [pc, #684]	; (8006030 <_vfprintf_r+0x648>)
 8005d84:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005d88:	f7fa fecc 	bl	8000b24 <__aeabi_dcmpun>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	f040 84ee 	bne.w	800676e <_vfprintf_r+0xd86>
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	4ba6      	ldr	r3, [pc, #664]	; (8006030 <_vfprintf_r+0x648>)
 8005d98:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005d9c:	f7fa fea4 	bl	8000ae8 <__aeabi_dcmple>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f040 84e4 	bne.w	800676e <_vfprintf_r+0xd86>
 8005da6:	f000 bdfb 	b.w	80069a0 <_vfprintf_r+0xfb8>
 8005daa:	b10a      	cbz	r2, 8005db0 <_vfprintf_r+0x3c8>
 8005dac:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005db0:	f015 0f20 	tst.w	r5, #32
 8005db4:	f107 0304 	add.w	r3, r7, #4
 8005db8:	d007      	beq.n	8005dca <_vfprintf_r+0x3e2>
 8005dba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	17ce      	asrs	r6, r1, #31
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	e9c2 0100 	strd	r0, r1, [r2]
 8005dc8:	e00b      	b.n	8005de2 <_vfprintf_r+0x3fa>
 8005dca:	06e9      	lsls	r1, r5, #27
 8005dcc:	d406      	bmi.n	8005ddc <_vfprintf_r+0x3f4>
 8005dce:	066a      	lsls	r2, r5, #25
 8005dd0:	d504      	bpl.n	8005ddc <_vfprintf_r+0x3f4>
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8005dd8:	8011      	strh	r1, [r2, #0]
 8005dda:	e002      	b.n	8005de2 <_vfprintf_r+0x3fa>
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	461f      	mov	r7, r3
 8005de4:	e669      	b.n	8005aba <_vfprintf_r+0xd2>
 8005de6:	f045 0510 	orr.w	r5, r5, #16
 8005dea:	f015 0320 	ands.w	r3, r5, #32
 8005dee:	d009      	beq.n	8005e04 <_vfprintf_r+0x41c>
 8005df0:	3707      	adds	r7, #7
 8005df2:	f027 0707 	bic.w	r7, r7, #7
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	2300      	movs	r3, #0
 8005e02:	e07b      	b.n	8005efc <_vfprintf_r+0x514>
 8005e04:	1d3a      	adds	r2, r7, #4
 8005e06:	f015 0110 	ands.w	r1, r5, #16
 8005e0a:	9203      	str	r2, [sp, #12]
 8005e0c:	d105      	bne.n	8005e1a <_vfprintf_r+0x432>
 8005e0e:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8005e12:	d002      	beq.n	8005e1a <_vfprintf_r+0x432>
 8005e14:	883e      	ldrh	r6, [r7, #0]
 8005e16:	2700      	movs	r7, #0
 8005e18:	e7f2      	b.n	8005e00 <_vfprintf_r+0x418>
 8005e1a:	683e      	ldr	r6, [r7, #0]
 8005e1c:	2700      	movs	r7, #0
 8005e1e:	e06d      	b.n	8005efc <_vfprintf_r+0x514>
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	9303      	str	r3, [sp, #12]
 8005e24:	2330      	movs	r3, #48	; 0x30
 8005e26:	2278      	movs	r2, #120	; 0x78
 8005e28:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005e2c:	4b81      	ldr	r3, [pc, #516]	; (8006034 <_vfprintf_r+0x64c>)
 8005e2e:	683e      	ldr	r6, [r7, #0]
 8005e30:	9311      	str	r3, [sp, #68]	; 0x44
 8005e32:	2700      	movs	r7, #0
 8005e34:	f045 0502 	orr.w	r5, r5, #2
 8005e38:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	9202      	str	r2, [sp, #8]
 8005e40:	e05c      	b.n	8005efc <_vfprintf_r+0x514>
 8005e42:	2600      	movs	r6, #0
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	45b1      	cmp	r9, r6
 8005e48:	9303      	str	r3, [sp, #12]
 8005e4a:	f8d7 8000 	ldr.w	r8, [r7]
 8005e4e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8005e52:	db0a      	blt.n	8005e6a <_vfprintf_r+0x482>
 8005e54:	464a      	mov	r2, r9
 8005e56:	4631      	mov	r1, r6
 8005e58:	4640      	mov	r0, r8
 8005e5a:	f7fa f9b9 	bl	80001d0 <memchr>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f000 80ea 	beq.w	8006038 <_vfprintf_r+0x650>
 8005e64:	ebc8 0900 	rsb	r9, r8, r0
 8005e68:	e0e7      	b.n	800603a <_vfprintf_r+0x652>
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7fa fa00 	bl	8000270 <strlen>
 8005e70:	4681      	mov	r9, r0
 8005e72:	e0e2      	b.n	800603a <_vfprintf_r+0x652>
 8005e74:	f045 0510 	orr.w	r5, r5, #16
 8005e78:	06ae      	lsls	r6, r5, #26
 8005e7a:	d508      	bpl.n	8005e8e <_vfprintf_r+0x4a6>
 8005e7c:	3707      	adds	r7, #7
 8005e7e:	f027 0707 	bic.w	r7, r7, #7
 8005e82:	f107 0308 	add.w	r3, r7, #8
 8005e86:	9303      	str	r3, [sp, #12]
 8005e88:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005e8c:	e00a      	b.n	8005ea4 <_vfprintf_r+0x4bc>
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	f015 0f10 	tst.w	r5, #16
 8005e94:	9303      	str	r3, [sp, #12]
 8005e96:	d103      	bne.n	8005ea0 <_vfprintf_r+0x4b8>
 8005e98:	0668      	lsls	r0, r5, #25
 8005e9a:	d501      	bpl.n	8005ea0 <_vfprintf_r+0x4b8>
 8005e9c:	883e      	ldrh	r6, [r7, #0]
 8005e9e:	e000      	b.n	8005ea2 <_vfprintf_r+0x4ba>
 8005ea0:	683e      	ldr	r6, [r7, #0]
 8005ea2:	2700      	movs	r7, #0
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e029      	b.n	8005efc <_vfprintf_r+0x514>
 8005ea8:	b10a      	cbz	r2, 8005eae <_vfprintf_r+0x4c6>
 8005eaa:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <_vfprintf_r+0x64c>)
 8005eb0:	9311      	str	r3, [sp, #68]	; 0x44
 8005eb2:	06a9      	lsls	r1, r5, #26
 8005eb4:	d508      	bpl.n	8005ec8 <_vfprintf_r+0x4e0>
 8005eb6:	3707      	adds	r7, #7
 8005eb8:	f027 0707 	bic.w	r7, r7, #7
 8005ebc:	f107 0308 	add.w	r3, r7, #8
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005ec6:	e00a      	b.n	8005ede <_vfprintf_r+0x4f6>
 8005ec8:	1d3b      	adds	r3, r7, #4
 8005eca:	f015 0f10 	tst.w	r5, #16
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	d103      	bne.n	8005eda <_vfprintf_r+0x4f2>
 8005ed2:	066a      	lsls	r2, r5, #25
 8005ed4:	d501      	bpl.n	8005eda <_vfprintf_r+0x4f2>
 8005ed6:	883e      	ldrh	r6, [r7, #0]
 8005ed8:	e000      	b.n	8005edc <_vfprintf_r+0x4f4>
 8005eda:	683e      	ldr	r6, [r7, #0]
 8005edc:	2700      	movs	r7, #0
 8005ede:	07eb      	lsls	r3, r5, #31
 8005ee0:	d50b      	bpl.n	8005efa <_vfprintf_r+0x512>
 8005ee2:	ea56 0307 	orrs.w	r3, r6, r7
 8005ee6:	d008      	beq.n	8005efa <_vfprintf_r+0x512>
 8005ee8:	2330      	movs	r3, #48	; 0x30
 8005eea:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005eee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005ef2:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8005ef6:	f045 0502 	orr.w	r5, r5, #2
 8005efa:	2302      	movs	r3, #2
 8005efc:	2200      	movs	r2, #0
 8005efe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8005f02:	e000      	b.n	8005f06 <_vfprintf_r+0x51e>
 8005f04:	2301      	movs	r3, #1
 8005f06:	f1b9 0f00 	cmp.w	r9, #0
 8005f0a:	f2c0 855a 	blt.w	80069c2 <_vfprintf_r+0xfda>
 8005f0e:	ea56 0207 	orrs.w	r2, r6, r7
 8005f12:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8005f16:	d103      	bne.n	8005f20 <_vfprintf_r+0x538>
 8005f18:	f1b9 0f00 	cmp.w	r9, #0
 8005f1c:	d05f      	beq.n	8005fde <_vfprintf_r+0x5f6>
 8005f1e:	e006      	b.n	8005f2e <_vfprintf_r+0x546>
 8005f20:	460d      	mov	r5, r1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d025      	beq.n	8005f72 <_vfprintf_r+0x58a>
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d046      	beq.n	8005fb8 <_vfprintf_r+0x5d0>
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	e007      	b.n	8005f3e <_vfprintf_r+0x556>
 8005f2e:	460d      	mov	r5, r1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d022      	beq.n	8005f7a <_vfprintf_r+0x592>
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d03d      	beq.n	8005fb4 <_vfprintf_r+0x5cc>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	2700      	movs	r7, #0
 8005f3e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005f42:	08f2      	lsrs	r2, r6, #3
 8005f44:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005f48:	08f8      	lsrs	r0, r7, #3
 8005f4a:	f006 0307 	and.w	r3, r6, #7
 8005f4e:	4607      	mov	r7, r0
 8005f50:	4616      	mov	r6, r2
 8005f52:	3330      	adds	r3, #48	; 0x30
 8005f54:	ea56 0207 	orrs.w	r2, r6, r7
 8005f58:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005f5c:	d1f1      	bne.n	8005f42 <_vfprintf_r+0x55a>
 8005f5e:	07e8      	lsls	r0, r5, #31
 8005f60:	d548      	bpl.n	8005ff4 <_vfprintf_r+0x60c>
 8005f62:	2b30      	cmp	r3, #48	; 0x30
 8005f64:	d046      	beq.n	8005ff4 <_vfprintf_r+0x60c>
 8005f66:	2330      	movs	r3, #48	; 0x30
 8005f68:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005f6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f70:	e040      	b.n	8005ff4 <_vfprintf_r+0x60c>
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	bf08      	it	eq
 8005f76:	2e0a      	cmpeq	r6, #10
 8005f78:	d205      	bcs.n	8005f86 <_vfprintf_r+0x59e>
 8005f7a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005f7e:	3630      	adds	r6, #48	; 0x30
 8005f80:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005f84:	e029      	b.n	8005fda <_vfprintf_r+0x5f2>
 8005f86:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	220a      	movs	r2, #10
 8005f90:	2300      	movs	r3, #0
 8005f92:	f7fa fe75 	bl	8000c80 <__aeabi_uldivmod>
 8005f96:	3230      	adds	r2, #48	; 0x30
 8005f98:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	220a      	movs	r2, #10
 8005fa4:	f7fa fe6c 	bl	8000c80 <__aeabi_uldivmod>
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	ea56 0307 	orrs.w	r3, r6, r7
 8005fb0:	d1eb      	bne.n	8005f8a <_vfprintf_r+0x5a2>
 8005fb2:	e012      	b.n	8005fda <_vfprintf_r+0x5f2>
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	2700      	movs	r7, #0
 8005fb8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005fbc:	f006 030f 	and.w	r3, r6, #15
 8005fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fc2:	5cd3      	ldrb	r3, [r2, r3]
 8005fc4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005fc8:	0933      	lsrs	r3, r6, #4
 8005fca:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005fce:	093a      	lsrs	r2, r7, #4
 8005fd0:	461e      	mov	r6, r3
 8005fd2:	4617      	mov	r7, r2
 8005fd4:	ea56 0307 	orrs.w	r3, r6, r7
 8005fd8:	d1f0      	bne.n	8005fbc <_vfprintf_r+0x5d4>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	e00a      	b.n	8005ff4 <_vfprintf_r+0x60c>
 8005fde:	b93b      	cbnz	r3, 8005ff0 <_vfprintf_r+0x608>
 8005fe0:	07ea      	lsls	r2, r5, #31
 8005fe2:	d505      	bpl.n	8005ff0 <_vfprintf_r+0x608>
 8005fe4:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005fe8:	2330      	movs	r3, #48	; 0x30
 8005fea:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005fee:	e001      	b.n	8005ff4 <_vfprintf_r+0x60c>
 8005ff0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005ff4:	464e      	mov	r6, r9
 8005ff6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8005ffa:	ebc8 0909 	rsb	r9, r8, r9
 8005ffe:	460d      	mov	r5, r1
 8006000:	2700      	movs	r7, #0
 8006002:	e01b      	b.n	800603c <_vfprintf_r+0x654>
 8006004:	b10a      	cbz	r2, 800600a <_vfprintf_r+0x622>
 8006006:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 83a0 	beq.w	8006752 <_vfprintf_r+0xd6a>
 8006012:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006016:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800601a:	2600      	movs	r6, #0
 800601c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8006020:	9703      	str	r7, [sp, #12]
 8006022:	f04f 0901 	mov.w	r9, #1
 8006026:	4637      	mov	r7, r6
 8006028:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800602c:	e006      	b.n	800603c <_vfprintf_r+0x654>
 800602e:	bf00      	nop
 8006030:	7fefffff 	.word	0x7fefffff
 8006034:	0800cdd5 	.word	0x0800cdd5
 8006038:	4606      	mov	r6, r0
 800603a:	4637      	mov	r7, r6
 800603c:	454e      	cmp	r6, r9
 800603e:	4633      	mov	r3, r6
 8006040:	bfb8      	it	lt
 8006042:	464b      	movlt	r3, r9
 8006044:	930b      	str	r3, [sp, #44]	; 0x2c
 8006046:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800604a:	b113      	cbz	r3, 8006052 <_vfprintf_r+0x66a>
 800604c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604e:	3301      	adds	r3, #1
 8006050:	930b      	str	r3, [sp, #44]	; 0x2c
 8006052:	f015 0302 	ands.w	r3, r5, #2
 8006056:	9314      	str	r3, [sp, #80]	; 0x50
 8006058:	bf1e      	ittt	ne
 800605a:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800605c:	3302      	addne	r3, #2
 800605e:	930b      	strne	r3, [sp, #44]	; 0x2c
 8006060:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8006064:	9315      	str	r3, [sp, #84]	; 0x54
 8006066:	d139      	bne.n	80060dc <_vfprintf_r+0x6f4>
 8006068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	930c      	str	r3, [sp, #48]	; 0x30
 8006072:	dd33      	ble.n	80060dc <_vfprintf_r+0x6f4>
 8006074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006076:	2b10      	cmp	r3, #16
 8006078:	4ba6      	ldr	r3, [pc, #664]	; (8006314 <_vfprintf_r+0x92c>)
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	dd18      	ble.n	80060b0 <_vfprintf_r+0x6c8>
 800607e:	2310      	movs	r3, #16
 8006080:	6063      	str	r3, [r4, #4]
 8006082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006084:	3310      	adds	r3, #16
 8006086:	9321      	str	r3, [sp, #132]	; 0x84
 8006088:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800608a:	3301      	adds	r3, #1
 800608c:	2b07      	cmp	r3, #7
 800608e:	9320      	str	r3, [sp, #128]	; 0x80
 8006090:	dc01      	bgt.n	8006096 <_vfprintf_r+0x6ae>
 8006092:	3408      	adds	r4, #8
 8006094:	e008      	b.n	80060a8 <_vfprintf_r+0x6c0>
 8006096:	aa1f      	add	r2, sp, #124	; 0x7c
 8006098:	4659      	mov	r1, fp
 800609a:	4650      	mov	r0, sl
 800609c:	f005 fd62 	bl	800bb64 <__sprint_r>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f040 835d 	bne.w	8006760 <_vfprintf_r+0xd78>
 80060a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80060a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060aa:	3b10      	subs	r3, #16
 80060ac:	930c      	str	r3, [sp, #48]	; 0x30
 80060ae:	e7e1      	b.n	8006074 <_vfprintf_r+0x68c>
 80060b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060b2:	6063      	str	r3, [r4, #4]
 80060b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060b8:	4413      	add	r3, r2
 80060ba:	9321      	str	r3, [sp, #132]	; 0x84
 80060bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060be:	3301      	adds	r3, #1
 80060c0:	2b07      	cmp	r3, #7
 80060c2:	9320      	str	r3, [sp, #128]	; 0x80
 80060c4:	dc01      	bgt.n	80060ca <_vfprintf_r+0x6e2>
 80060c6:	3408      	adds	r4, #8
 80060c8:	e008      	b.n	80060dc <_vfprintf_r+0x6f4>
 80060ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80060cc:	4659      	mov	r1, fp
 80060ce:	4650      	mov	r0, sl
 80060d0:	f005 fd48 	bl	800bb64 <__sprint_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f040 8343 	bne.w	8006760 <_vfprintf_r+0xd78>
 80060da:	ac2c      	add	r4, sp, #176	; 0xb0
 80060dc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80060e0:	b1bb      	cbz	r3, 8006112 <_vfprintf_r+0x72a>
 80060e2:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	2301      	movs	r3, #1
 80060ea:	6063      	str	r3, [r4, #4]
 80060ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ee:	3301      	adds	r3, #1
 80060f0:	9321      	str	r3, [sp, #132]	; 0x84
 80060f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80060f4:	3301      	adds	r3, #1
 80060f6:	2b07      	cmp	r3, #7
 80060f8:	9320      	str	r3, [sp, #128]	; 0x80
 80060fa:	dc01      	bgt.n	8006100 <_vfprintf_r+0x718>
 80060fc:	3408      	adds	r4, #8
 80060fe:	e008      	b.n	8006112 <_vfprintf_r+0x72a>
 8006100:	aa1f      	add	r2, sp, #124	; 0x7c
 8006102:	4659      	mov	r1, fp
 8006104:	4650      	mov	r0, sl
 8006106:	f005 fd2d 	bl	800bb64 <__sprint_r>
 800610a:	2800      	cmp	r0, #0
 800610c:	f040 8328 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006110:	ac2c      	add	r4, sp, #176	; 0xb0
 8006112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006114:	b1b3      	cbz	r3, 8006144 <_vfprintf_r+0x75c>
 8006116:	ab18      	add	r3, sp, #96	; 0x60
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	2302      	movs	r3, #2
 800611c:	6063      	str	r3, [r4, #4]
 800611e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006120:	3302      	adds	r3, #2
 8006122:	9321      	str	r3, [sp, #132]	; 0x84
 8006124:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006126:	3301      	adds	r3, #1
 8006128:	2b07      	cmp	r3, #7
 800612a:	9320      	str	r3, [sp, #128]	; 0x80
 800612c:	dc01      	bgt.n	8006132 <_vfprintf_r+0x74a>
 800612e:	3408      	adds	r4, #8
 8006130:	e008      	b.n	8006144 <_vfprintf_r+0x75c>
 8006132:	aa1f      	add	r2, sp, #124	; 0x7c
 8006134:	4659      	mov	r1, fp
 8006136:	4650      	mov	r0, sl
 8006138:	f005 fd14 	bl	800bb64 <__sprint_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	f040 830f 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006142:	ac2c      	add	r4, sp, #176	; 0xb0
 8006144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d135      	bne.n	80061b6 <_vfprintf_r+0x7ce>
 800614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	dd30      	ble.n	80061b6 <_vfprintf_r+0x7ce>
 8006154:	4a70      	ldr	r2, [pc, #448]	; (8006318 <_vfprintf_r+0x930>)
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	2b10      	cmp	r3, #16
 800615a:	dd18      	ble.n	800618e <_vfprintf_r+0x7a6>
 800615c:	2210      	movs	r2, #16
 800615e:	6062      	str	r2, [r4, #4]
 8006160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006162:	3210      	adds	r2, #16
 8006164:	9221      	str	r2, [sp, #132]	; 0x84
 8006166:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006168:	3201      	adds	r2, #1
 800616a:	2a07      	cmp	r2, #7
 800616c:	9220      	str	r2, [sp, #128]	; 0x80
 800616e:	dc01      	bgt.n	8006174 <_vfprintf_r+0x78c>
 8006170:	3408      	adds	r4, #8
 8006172:	e00a      	b.n	800618a <_vfprintf_r+0x7a2>
 8006174:	aa1f      	add	r2, sp, #124	; 0x7c
 8006176:	4659      	mov	r1, fp
 8006178:	4650      	mov	r0, sl
 800617a:	930c      	str	r3, [sp, #48]	; 0x30
 800617c:	f005 fcf2 	bl	800bb64 <__sprint_r>
 8006180:	2800      	cmp	r0, #0
 8006182:	f040 82ed 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006188:	ac2c      	add	r4, sp, #176	; 0xb0
 800618a:	3b10      	subs	r3, #16
 800618c:	e7e2      	b.n	8006154 <_vfprintf_r+0x76c>
 800618e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006190:	6063      	str	r3, [r4, #4]
 8006192:	4413      	add	r3, r2
 8006194:	9321      	str	r3, [sp, #132]	; 0x84
 8006196:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006198:	3301      	adds	r3, #1
 800619a:	2b07      	cmp	r3, #7
 800619c:	9320      	str	r3, [sp, #128]	; 0x80
 800619e:	dc01      	bgt.n	80061a4 <_vfprintf_r+0x7bc>
 80061a0:	3408      	adds	r4, #8
 80061a2:	e008      	b.n	80061b6 <_vfprintf_r+0x7ce>
 80061a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80061a6:	4659      	mov	r1, fp
 80061a8:	4650      	mov	r0, sl
 80061aa:	f005 fcdb 	bl	800bb64 <__sprint_r>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f040 82d6 	bne.w	8006760 <_vfprintf_r+0xd78>
 80061b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80061b6:	ebc9 0606 	rsb	r6, r9, r6
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	dd2e      	ble.n	800621c <_vfprintf_r+0x834>
 80061be:	4b56      	ldr	r3, [pc, #344]	; (8006318 <_vfprintf_r+0x930>)
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	2e10      	cmp	r6, #16
 80061c4:	dd16      	ble.n	80061f4 <_vfprintf_r+0x80c>
 80061c6:	2310      	movs	r3, #16
 80061c8:	6063      	str	r3, [r4, #4]
 80061ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061cc:	3310      	adds	r3, #16
 80061ce:	9321      	str	r3, [sp, #132]	; 0x84
 80061d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061d2:	3301      	adds	r3, #1
 80061d4:	2b07      	cmp	r3, #7
 80061d6:	9320      	str	r3, [sp, #128]	; 0x80
 80061d8:	dc01      	bgt.n	80061de <_vfprintf_r+0x7f6>
 80061da:	3408      	adds	r4, #8
 80061dc:	e008      	b.n	80061f0 <_vfprintf_r+0x808>
 80061de:	aa1f      	add	r2, sp, #124	; 0x7c
 80061e0:	4659      	mov	r1, fp
 80061e2:	4650      	mov	r0, sl
 80061e4:	f005 fcbe 	bl	800bb64 <__sprint_r>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	f040 82b9 	bne.w	8006760 <_vfprintf_r+0xd78>
 80061ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80061f0:	3e10      	subs	r6, #16
 80061f2:	e7e4      	b.n	80061be <_vfprintf_r+0x7d6>
 80061f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061f6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80061f8:	6066      	str	r6, [r4, #4]
 80061fa:	3301      	adds	r3, #1
 80061fc:	4406      	add	r6, r0
 80061fe:	2b07      	cmp	r3, #7
 8006200:	9621      	str	r6, [sp, #132]	; 0x84
 8006202:	9320      	str	r3, [sp, #128]	; 0x80
 8006204:	dc01      	bgt.n	800620a <_vfprintf_r+0x822>
 8006206:	3408      	adds	r4, #8
 8006208:	e008      	b.n	800621c <_vfprintf_r+0x834>
 800620a:	aa1f      	add	r2, sp, #124	; 0x7c
 800620c:	4659      	mov	r1, fp
 800620e:	4650      	mov	r0, sl
 8006210:	f005 fca8 	bl	800bb64 <__sprint_r>
 8006214:	2800      	cmp	r0, #0
 8006216:	f040 82a3 	bne.w	8006760 <_vfprintf_r+0xd78>
 800621a:	ac2c      	add	r4, sp, #176	; 0xb0
 800621c:	05eb      	lsls	r3, r5, #23
 800621e:	d414      	bmi.n	800624a <_vfprintf_r+0x862>
 8006220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006222:	e884 0300 	stmia.w	r4, {r8, r9}
 8006226:	444b      	add	r3, r9
 8006228:	9321      	str	r3, [sp, #132]	; 0x84
 800622a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800622c:	3301      	adds	r3, #1
 800622e:	2b07      	cmp	r3, #7
 8006230:	9320      	str	r3, [sp, #128]	; 0x80
 8006232:	f340 8244 	ble.w	80066be <_vfprintf_r+0xcd6>
 8006236:	aa1f      	add	r2, sp, #124	; 0x7c
 8006238:	4659      	mov	r1, fp
 800623a:	4650      	mov	r0, sl
 800623c:	f005 fc92 	bl	800bb64 <__sprint_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 828d 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006246:	ac2c      	add	r4, sp, #176	; 0xb0
 8006248:	e23a      	b.n	80066c0 <_vfprintf_r+0xcd8>
 800624a:	9b02      	ldr	r3, [sp, #8]
 800624c:	2b65      	cmp	r3, #101	; 0x65
 800624e:	f340 81ad 	ble.w	80065ac <_vfprintf_r+0xbc4>
 8006252:	2200      	movs	r2, #0
 8006254:	2300      	movs	r3, #0
 8006256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800625a:	f7fa fc31 	bl	8000ac0 <__aeabi_dcmpeq>
 800625e:	2800      	cmp	r0, #0
 8006260:	d05e      	beq.n	8006320 <_vfprintf_r+0x938>
 8006262:	4b2e      	ldr	r3, [pc, #184]	; (800631c <_vfprintf_r+0x934>)
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	2301      	movs	r3, #1
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800626c:	3301      	adds	r3, #1
 800626e:	9321      	str	r3, [sp, #132]	; 0x84
 8006270:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006272:	3301      	adds	r3, #1
 8006274:	2b07      	cmp	r3, #7
 8006276:	9320      	str	r3, [sp, #128]	; 0x80
 8006278:	dc01      	bgt.n	800627e <_vfprintf_r+0x896>
 800627a:	3408      	adds	r4, #8
 800627c:	e008      	b.n	8006290 <_vfprintf_r+0x8a8>
 800627e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006280:	4659      	mov	r1, fp
 8006282:	4650      	mov	r0, sl
 8006284:	f005 fc6e 	bl	800bb64 <__sprint_r>
 8006288:	2800      	cmp	r0, #0
 800628a:	f040 8269 	bne.w	8006760 <_vfprintf_r+0xd78>
 800628e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006290:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006292:	9a04      	ldr	r2, [sp, #16]
 8006294:	4293      	cmp	r3, r2
 8006296:	db02      	blt.n	800629e <_vfprintf_r+0x8b6>
 8006298:	07ef      	lsls	r7, r5, #31
 800629a:	f140 8211 	bpl.w	80066c0 <_vfprintf_r+0xcd8>
 800629e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	9b08      	ldr	r3, [sp, #32]
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	9a08      	ldr	r2, [sp, #32]
 80062a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062aa:	4413      	add	r3, r2
 80062ac:	9321      	str	r3, [sp, #132]	; 0x84
 80062ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062b0:	3301      	adds	r3, #1
 80062b2:	2b07      	cmp	r3, #7
 80062b4:	9320      	str	r3, [sp, #128]	; 0x80
 80062b6:	dc01      	bgt.n	80062bc <_vfprintf_r+0x8d4>
 80062b8:	3408      	adds	r4, #8
 80062ba:	e008      	b.n	80062ce <_vfprintf_r+0x8e6>
 80062bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80062be:	4659      	mov	r1, fp
 80062c0:	4650      	mov	r0, sl
 80062c2:	f005 fc4f 	bl	800bb64 <__sprint_r>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 824a 	bne.w	8006760 <_vfprintf_r+0xd78>
 80062cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	1e5e      	subs	r6, r3, #1
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	f340 81f4 	ble.w	80066c0 <_vfprintf_r+0xcd8>
 80062d8:	4f0f      	ldr	r7, [pc, #60]	; (8006318 <_vfprintf_r+0x930>)
 80062da:	f04f 0810 	mov.w	r8, #16
 80062de:	2e10      	cmp	r6, #16
 80062e0:	f340 8159 	ble.w	8006596 <_vfprintf_r+0xbae>
 80062e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062e6:	3310      	adds	r3, #16
 80062e8:	9321      	str	r3, [sp, #132]	; 0x84
 80062ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062ec:	3301      	adds	r3, #1
 80062ee:	2b07      	cmp	r3, #7
 80062f0:	e884 0180 	stmia.w	r4, {r7, r8}
 80062f4:	9320      	str	r3, [sp, #128]	; 0x80
 80062f6:	dc01      	bgt.n	80062fc <_vfprintf_r+0x914>
 80062f8:	3408      	adds	r4, #8
 80062fa:	e008      	b.n	800630e <_vfprintf_r+0x926>
 80062fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80062fe:	4659      	mov	r1, fp
 8006300:	4650      	mov	r0, sl
 8006302:	f005 fc2f 	bl	800bb64 <__sprint_r>
 8006306:	2800      	cmp	r0, #0
 8006308:	f040 822a 	bne.w	8006760 <_vfprintf_r+0xd78>
 800630c:	ac2c      	add	r4, sp, #176	; 0xb0
 800630e:	3e10      	subs	r6, #16
 8006310:	e7e5      	b.n	80062de <_vfprintf_r+0x8f6>
 8006312:	bf00      	nop
 8006314:	0800cda4 	.word	0x0800cda4
 8006318:	0800cde8 	.word	0x0800cde8
 800631c:	0800cde6 	.word	0x0800cde6
 8006320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006322:	2b00      	cmp	r3, #0
 8006324:	dc7c      	bgt.n	8006420 <_vfprintf_r+0xa38>
 8006326:	4b9f      	ldr	r3, [pc, #636]	; (80065a4 <_vfprintf_r+0xbbc>)
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	2301      	movs	r3, #1
 800632c:	6063      	str	r3, [r4, #4]
 800632e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006330:	3301      	adds	r3, #1
 8006332:	9321      	str	r3, [sp, #132]	; 0x84
 8006334:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006336:	3301      	adds	r3, #1
 8006338:	2b07      	cmp	r3, #7
 800633a:	9320      	str	r3, [sp, #128]	; 0x80
 800633c:	dc01      	bgt.n	8006342 <_vfprintf_r+0x95a>
 800633e:	3408      	adds	r4, #8
 8006340:	e008      	b.n	8006354 <_vfprintf_r+0x96c>
 8006342:	aa1f      	add	r2, sp, #124	; 0x7c
 8006344:	4659      	mov	r1, fp
 8006346:	4650      	mov	r0, sl
 8006348:	f005 fc0c 	bl	800bb64 <__sprint_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	f040 8207 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006352:	ac2c      	add	r4, sp, #176	; 0xb0
 8006354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006356:	b923      	cbnz	r3, 8006362 <_vfprintf_r+0x97a>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	b913      	cbnz	r3, 8006362 <_vfprintf_r+0x97a>
 800635c:	07ee      	lsls	r6, r5, #31
 800635e:	f140 81af 	bpl.w	80066c0 <_vfprintf_r+0xcd8>
 8006362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	9b08      	ldr	r3, [sp, #32]
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	9a08      	ldr	r2, [sp, #32]
 800636c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636e:	4413      	add	r3, r2
 8006370:	9321      	str	r3, [sp, #132]	; 0x84
 8006372:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006374:	3301      	adds	r3, #1
 8006376:	2b07      	cmp	r3, #7
 8006378:	9320      	str	r3, [sp, #128]	; 0x80
 800637a:	dc02      	bgt.n	8006382 <_vfprintf_r+0x99a>
 800637c:	f104 0308 	add.w	r3, r4, #8
 8006380:	e008      	b.n	8006394 <_vfprintf_r+0x9ac>
 8006382:	aa1f      	add	r2, sp, #124	; 0x7c
 8006384:	4659      	mov	r1, fp
 8006386:	4650      	mov	r0, sl
 8006388:	f005 fbec 	bl	800bb64 <__sprint_r>
 800638c:	2800      	cmp	r0, #0
 800638e:	f040 81e7 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006392:	ab2c      	add	r3, sp, #176	; 0xb0
 8006394:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006396:	4276      	negs	r6, r6
 8006398:	2e00      	cmp	r6, #0
 800639a:	dd30      	ble.n	80063fe <_vfprintf_r+0xa16>
 800639c:	4f82      	ldr	r7, [pc, #520]	; (80065a8 <_vfprintf_r+0xbc0>)
 800639e:	2410      	movs	r4, #16
 80063a0:	2e10      	cmp	r6, #16
 80063a2:	dd16      	ble.n	80063d2 <_vfprintf_r+0x9ea>
 80063a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063a6:	601f      	str	r7, [r3, #0]
 80063a8:	3210      	adds	r2, #16
 80063aa:	9221      	str	r2, [sp, #132]	; 0x84
 80063ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063ae:	605c      	str	r4, [r3, #4]
 80063b0:	3201      	adds	r2, #1
 80063b2:	2a07      	cmp	r2, #7
 80063b4:	9220      	str	r2, [sp, #128]	; 0x80
 80063b6:	dc01      	bgt.n	80063bc <_vfprintf_r+0x9d4>
 80063b8:	3308      	adds	r3, #8
 80063ba:	e008      	b.n	80063ce <_vfprintf_r+0x9e6>
 80063bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80063be:	4659      	mov	r1, fp
 80063c0:	4650      	mov	r0, sl
 80063c2:	f005 fbcf 	bl	800bb64 <__sprint_r>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f040 81ca 	bne.w	8006760 <_vfprintf_r+0xd78>
 80063cc:	ab2c      	add	r3, sp, #176	; 0xb0
 80063ce:	3e10      	subs	r6, #16
 80063d0:	e7e6      	b.n	80063a0 <_vfprintf_r+0x9b8>
 80063d2:	4a75      	ldr	r2, [pc, #468]	; (80065a8 <_vfprintf_r+0xbc0>)
 80063d4:	e883 0044 	stmia.w	r3, {r2, r6}
 80063d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063da:	4416      	add	r6, r2
 80063dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063de:	9621      	str	r6, [sp, #132]	; 0x84
 80063e0:	3201      	adds	r2, #1
 80063e2:	2a07      	cmp	r2, #7
 80063e4:	9220      	str	r2, [sp, #128]	; 0x80
 80063e6:	dc01      	bgt.n	80063ec <_vfprintf_r+0xa04>
 80063e8:	3308      	adds	r3, #8
 80063ea:	e008      	b.n	80063fe <_vfprintf_r+0xa16>
 80063ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80063ee:	4659      	mov	r1, fp
 80063f0:	4650      	mov	r0, sl
 80063f2:	f005 fbb7 	bl	800bb64 <__sprint_r>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f040 81b2 	bne.w	8006760 <_vfprintf_r+0xd78>
 80063fc:	ab2c      	add	r3, sp, #176	; 0xb0
 80063fe:	9a04      	ldr	r2, [sp, #16]
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	9904      	ldr	r1, [sp, #16]
 8006404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006406:	f8c3 8000 	str.w	r8, [r3]
 800640a:	440a      	add	r2, r1
 800640c:	9221      	str	r2, [sp, #132]	; 0x84
 800640e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006410:	3201      	adds	r2, #1
 8006412:	2a07      	cmp	r2, #7
 8006414:	9220      	str	r2, [sp, #128]	; 0x80
 8006416:	f73f af0e 	bgt.w	8006236 <_vfprintf_r+0x84e>
 800641a:	f103 0408 	add.w	r4, r3, #8
 800641e:	e14f      	b.n	80066c0 <_vfprintf_r+0xcd8>
 8006420:	9b04      	ldr	r3, [sp, #16]
 8006422:	42bb      	cmp	r3, r7
 8006424:	bfa8      	it	ge
 8006426:	463b      	movge	r3, r7
 8006428:	2b00      	cmp	r3, #0
 800642a:	461e      	mov	r6, r3
 800642c:	dd15      	ble.n	800645a <_vfprintf_r+0xa72>
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006432:	f8c4 8000 	str.w	r8, [r4]
 8006436:	4433      	add	r3, r6
 8006438:	9321      	str	r3, [sp, #132]	; 0x84
 800643a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800643c:	3301      	adds	r3, #1
 800643e:	2b07      	cmp	r3, #7
 8006440:	9320      	str	r3, [sp, #128]	; 0x80
 8006442:	dc01      	bgt.n	8006448 <_vfprintf_r+0xa60>
 8006444:	3408      	adds	r4, #8
 8006446:	e008      	b.n	800645a <_vfprintf_r+0xa72>
 8006448:	aa1f      	add	r2, sp, #124	; 0x7c
 800644a:	4659      	mov	r1, fp
 800644c:	4650      	mov	r0, sl
 800644e:	f005 fb89 	bl	800bb64 <__sprint_r>
 8006452:	2800      	cmp	r0, #0
 8006454:	f040 8184 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006458:	ac2c      	add	r4, sp, #176	; 0xb0
 800645a:	2e00      	cmp	r6, #0
 800645c:	bfac      	ite	ge
 800645e:	1bbe      	subge	r6, r7, r6
 8006460:	463e      	movlt	r6, r7
 8006462:	2e00      	cmp	r6, #0
 8006464:	dd30      	ble.n	80064c8 <_vfprintf_r+0xae0>
 8006466:	f04f 0910 	mov.w	r9, #16
 800646a:	4b4f      	ldr	r3, [pc, #316]	; (80065a8 <_vfprintf_r+0xbc0>)
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	2e10      	cmp	r6, #16
 8006470:	dd16      	ble.n	80064a0 <_vfprintf_r+0xab8>
 8006472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006474:	f8c4 9004 	str.w	r9, [r4, #4]
 8006478:	3310      	adds	r3, #16
 800647a:	9321      	str	r3, [sp, #132]	; 0x84
 800647c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800647e:	3301      	adds	r3, #1
 8006480:	2b07      	cmp	r3, #7
 8006482:	9320      	str	r3, [sp, #128]	; 0x80
 8006484:	dc01      	bgt.n	800648a <_vfprintf_r+0xaa2>
 8006486:	3408      	adds	r4, #8
 8006488:	e008      	b.n	800649c <_vfprintf_r+0xab4>
 800648a:	aa1f      	add	r2, sp, #124	; 0x7c
 800648c:	4659      	mov	r1, fp
 800648e:	4650      	mov	r0, sl
 8006490:	f005 fb68 	bl	800bb64 <__sprint_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	f040 8163 	bne.w	8006760 <_vfprintf_r+0xd78>
 800649a:	ac2c      	add	r4, sp, #176	; 0xb0
 800649c:	3e10      	subs	r6, #16
 800649e:	e7e4      	b.n	800646a <_vfprintf_r+0xa82>
 80064a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a2:	6066      	str	r6, [r4, #4]
 80064a4:	441e      	add	r6, r3
 80064a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064a8:	9621      	str	r6, [sp, #132]	; 0x84
 80064aa:	3301      	adds	r3, #1
 80064ac:	2b07      	cmp	r3, #7
 80064ae:	9320      	str	r3, [sp, #128]	; 0x80
 80064b0:	dc01      	bgt.n	80064b6 <_vfprintf_r+0xace>
 80064b2:	3408      	adds	r4, #8
 80064b4:	e008      	b.n	80064c8 <_vfprintf_r+0xae0>
 80064b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80064b8:	4659      	mov	r1, fp
 80064ba:	4650      	mov	r0, sl
 80064bc:	f005 fb52 	bl	800bb64 <__sprint_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f040 814d 	bne.w	8006760 <_vfprintf_r+0xd78>
 80064c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80064c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064ca:	9a04      	ldr	r2, [sp, #16]
 80064cc:	4293      	cmp	r3, r2
 80064ce:	4447      	add	r7, r8
 80064d0:	db01      	blt.n	80064d6 <_vfprintf_r+0xaee>
 80064d2:	07e8      	lsls	r0, r5, #31
 80064d4:	d517      	bpl.n	8006506 <_vfprintf_r+0xb1e>
 80064d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	9b08      	ldr	r3, [sp, #32]
 80064dc:	6063      	str	r3, [r4, #4]
 80064de:	9a08      	ldr	r2, [sp, #32]
 80064e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e2:	4413      	add	r3, r2
 80064e4:	9321      	str	r3, [sp, #132]	; 0x84
 80064e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80064e8:	3301      	adds	r3, #1
 80064ea:	2b07      	cmp	r3, #7
 80064ec:	9320      	str	r3, [sp, #128]	; 0x80
 80064ee:	dc01      	bgt.n	80064f4 <_vfprintf_r+0xb0c>
 80064f0:	3408      	adds	r4, #8
 80064f2:	e008      	b.n	8006506 <_vfprintf_r+0xb1e>
 80064f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80064f6:	4659      	mov	r1, fp
 80064f8:	4650      	mov	r0, sl
 80064fa:	f005 fb33 	bl	800bb64 <__sprint_r>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f040 812e 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006504:	ac2c      	add	r4, sp, #176	; 0xb0
 8006506:	9b04      	ldr	r3, [sp, #16]
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	eb08 0603 	add.w	r6, r8, r3
 800650e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006510:	1bf6      	subs	r6, r6, r7
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	429e      	cmp	r6, r3
 8006516:	bfa8      	it	ge
 8006518:	461e      	movge	r6, r3
 800651a:	2e00      	cmp	r6, #0
 800651c:	dd14      	ble.n	8006548 <_vfprintf_r+0xb60>
 800651e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006520:	6027      	str	r7, [r4, #0]
 8006522:	4433      	add	r3, r6
 8006524:	9321      	str	r3, [sp, #132]	; 0x84
 8006526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006528:	6066      	str	r6, [r4, #4]
 800652a:	3301      	adds	r3, #1
 800652c:	2b07      	cmp	r3, #7
 800652e:	9320      	str	r3, [sp, #128]	; 0x80
 8006530:	dc01      	bgt.n	8006536 <_vfprintf_r+0xb4e>
 8006532:	3408      	adds	r4, #8
 8006534:	e008      	b.n	8006548 <_vfprintf_r+0xb60>
 8006536:	aa1f      	add	r2, sp, #124	; 0x7c
 8006538:	4659      	mov	r1, fp
 800653a:	4650      	mov	r0, sl
 800653c:	f005 fb12 	bl	800bb64 <__sprint_r>
 8006540:	2800      	cmp	r0, #0
 8006542:	f040 810d 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006546:	ac2c      	add	r4, sp, #176	; 0xb0
 8006548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800654a:	9a04      	ldr	r2, [sp, #16]
 800654c:	2e00      	cmp	r6, #0
 800654e:	eba2 0303 	sub.w	r3, r2, r3
 8006552:	bfac      	ite	ge
 8006554:	1b9e      	subge	r6, r3, r6
 8006556:	461e      	movlt	r6, r3
 8006558:	2e00      	cmp	r6, #0
 800655a:	f340 80b1 	ble.w	80066c0 <_vfprintf_r+0xcd8>
 800655e:	4f12      	ldr	r7, [pc, #72]	; (80065a8 <_vfprintf_r+0xbc0>)
 8006560:	f04f 0810 	mov.w	r8, #16
 8006564:	2e10      	cmp	r6, #16
 8006566:	dd16      	ble.n	8006596 <_vfprintf_r+0xbae>
 8006568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800656a:	3310      	adds	r3, #16
 800656c:	9321      	str	r3, [sp, #132]	; 0x84
 800656e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006570:	3301      	adds	r3, #1
 8006572:	2b07      	cmp	r3, #7
 8006574:	e884 0180 	stmia.w	r4, {r7, r8}
 8006578:	9320      	str	r3, [sp, #128]	; 0x80
 800657a:	dc01      	bgt.n	8006580 <_vfprintf_r+0xb98>
 800657c:	3408      	adds	r4, #8
 800657e:	e008      	b.n	8006592 <_vfprintf_r+0xbaa>
 8006580:	aa1f      	add	r2, sp, #124	; 0x7c
 8006582:	4659      	mov	r1, fp
 8006584:	4650      	mov	r0, sl
 8006586:	f005 faed 	bl	800bb64 <__sprint_r>
 800658a:	2800      	cmp	r0, #0
 800658c:	f040 80e8 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006590:	ac2c      	add	r4, sp, #176	; 0xb0
 8006592:	3e10      	subs	r6, #16
 8006594:	e7e6      	b.n	8006564 <_vfprintf_r+0xb7c>
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <_vfprintf_r+0xbc0>)
 8006598:	e884 0048 	stmia.w	r4, {r3, r6}
 800659c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800659e:	441e      	add	r6, r3
 80065a0:	9621      	str	r6, [sp, #132]	; 0x84
 80065a2:	e642      	b.n	800622a <_vfprintf_r+0x842>
 80065a4:	0800cde6 	.word	0x0800cde6
 80065a8:	0800cde8 	.word	0x0800cde8
 80065ac:	9b04      	ldr	r3, [sp, #16]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	dc01      	bgt.n	80065b6 <_vfprintf_r+0xbce>
 80065b2:	07e9      	lsls	r1, r5, #31
 80065b4:	d573      	bpl.n	800669e <_vfprintf_r+0xcb6>
 80065b6:	2301      	movs	r3, #1
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065bc:	f8c4 8000 	str.w	r8, [r4]
 80065c0:	3301      	adds	r3, #1
 80065c2:	9321      	str	r3, [sp, #132]	; 0x84
 80065c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065c6:	3301      	adds	r3, #1
 80065c8:	2b07      	cmp	r3, #7
 80065ca:	9320      	str	r3, [sp, #128]	; 0x80
 80065cc:	dc01      	bgt.n	80065d2 <_vfprintf_r+0xbea>
 80065ce:	3408      	adds	r4, #8
 80065d0:	e008      	b.n	80065e4 <_vfprintf_r+0xbfc>
 80065d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80065d4:	4659      	mov	r1, fp
 80065d6:	4650      	mov	r0, sl
 80065d8:	f005 fac4 	bl	800bb64 <__sprint_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f040 80bf 	bne.w	8006760 <_vfprintf_r+0xd78>
 80065e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80065e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	6063      	str	r3, [r4, #4]
 80065ec:	9a08      	ldr	r2, [sp, #32]
 80065ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f0:	4413      	add	r3, r2
 80065f2:	9321      	str	r3, [sp, #132]	; 0x84
 80065f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80065f6:	3301      	adds	r3, #1
 80065f8:	2b07      	cmp	r3, #7
 80065fa:	9320      	str	r3, [sp, #128]	; 0x80
 80065fc:	dc01      	bgt.n	8006602 <_vfprintf_r+0xc1a>
 80065fe:	3408      	adds	r4, #8
 8006600:	e008      	b.n	8006614 <_vfprintf_r+0xc2c>
 8006602:	aa1f      	add	r2, sp, #124	; 0x7c
 8006604:	4659      	mov	r1, fp
 8006606:	4650      	mov	r0, sl
 8006608:	f005 faac 	bl	800bb64 <__sprint_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	f040 80a7 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006612:	ac2c      	add	r4, sp, #176	; 0xb0
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800661c:	f7fa fa50 	bl	8000ac0 <__aeabi_dcmpeq>
 8006620:	9b04      	ldr	r3, [sp, #16]
 8006622:	1e5e      	subs	r6, r3, #1
 8006624:	b9b8      	cbnz	r0, 8006656 <_vfprintf_r+0xc6e>
 8006626:	f108 0301 	add.w	r3, r8, #1
 800662a:	e884 0048 	stmia.w	r4, {r3, r6}
 800662e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006630:	9a04      	ldr	r2, [sp, #16]
 8006632:	3b01      	subs	r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	9321      	str	r3, [sp, #132]	; 0x84
 8006638:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800663a:	3301      	adds	r3, #1
 800663c:	2b07      	cmp	r3, #7
 800663e:	9320      	str	r3, [sp, #128]	; 0x80
 8006640:	dd34      	ble.n	80066ac <_vfprintf_r+0xcc4>
 8006642:	aa1f      	add	r2, sp, #124	; 0x7c
 8006644:	4659      	mov	r1, fp
 8006646:	4650      	mov	r0, sl
 8006648:	f005 fa8c 	bl	800bb64 <__sprint_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	f040 8087 	bne.w	8006760 <_vfprintf_r+0xd78>
 8006652:	ac2c      	add	r4, sp, #176	; 0xb0
 8006654:	e02b      	b.n	80066ae <_vfprintf_r+0xcc6>
 8006656:	2e00      	cmp	r6, #0
 8006658:	dd29      	ble.n	80066ae <_vfprintf_r+0xcc6>
 800665a:	4fa6      	ldr	r7, [pc, #664]	; (80068f4 <_vfprintf_r+0xf0c>)
 800665c:	f04f 0810 	mov.w	r8, #16
 8006660:	2e10      	cmp	r6, #16
 8006662:	dd15      	ble.n	8006690 <_vfprintf_r+0xca8>
 8006664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006666:	3310      	adds	r3, #16
 8006668:	9321      	str	r3, [sp, #132]	; 0x84
 800666a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800666c:	3301      	adds	r3, #1
 800666e:	2b07      	cmp	r3, #7
 8006670:	e884 0180 	stmia.w	r4, {r7, r8}
 8006674:	9320      	str	r3, [sp, #128]	; 0x80
 8006676:	dc01      	bgt.n	800667c <_vfprintf_r+0xc94>
 8006678:	3408      	adds	r4, #8
 800667a:	e007      	b.n	800668c <_vfprintf_r+0xca4>
 800667c:	aa1f      	add	r2, sp, #124	; 0x7c
 800667e:	4659      	mov	r1, fp
 8006680:	4650      	mov	r0, sl
 8006682:	f005 fa6f 	bl	800bb64 <__sprint_r>
 8006686:	2800      	cmp	r0, #0
 8006688:	d16a      	bne.n	8006760 <_vfprintf_r+0xd78>
 800668a:	ac2c      	add	r4, sp, #176	; 0xb0
 800668c:	3e10      	subs	r6, #16
 800668e:	e7e7      	b.n	8006660 <_vfprintf_r+0xc78>
 8006690:	4b98      	ldr	r3, [pc, #608]	; (80068f4 <_vfprintf_r+0xf0c>)
 8006692:	e884 0048 	stmia.w	r4, {r3, r6}
 8006696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006698:	441e      	add	r6, r3
 800669a:	9621      	str	r6, [sp, #132]	; 0x84
 800669c:	e7cc      	b.n	8006638 <_vfprintf_r+0xc50>
 800669e:	2301      	movs	r3, #1
 80066a0:	6063      	str	r3, [r4, #4]
 80066a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066a4:	f8c4 8000 	str.w	r8, [r4]
 80066a8:	3301      	adds	r3, #1
 80066aa:	e7c4      	b.n	8006636 <_vfprintf_r+0xc4e>
 80066ac:	3408      	adds	r4, #8
 80066ae:	ab1b      	add	r3, sp, #108	; 0x6c
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ba:	4413      	add	r3, r2
 80066bc:	e5b4      	b.n	8006228 <_vfprintf_r+0x840>
 80066be:	3408      	adds	r4, #8
 80066c0:	076a      	lsls	r2, r5, #29
 80066c2:	d40b      	bmi.n	80066dc <_vfprintf_r+0xcf4>
 80066c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ca:	428a      	cmp	r2, r1
 80066cc:	bfac      	ite	ge
 80066ce:	189b      	addge	r3, r3, r2
 80066d0:	185b      	addlt	r3, r3, r1
 80066d2:	930a      	str	r3, [sp, #40]	; 0x28
 80066d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d035      	beq.n	8006746 <_vfprintf_r+0xd5e>
 80066da:	e02e      	b.n	800673a <_vfprintf_r+0xd52>
 80066dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066e0:	1a9d      	subs	r5, r3, r2
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	ddee      	ble.n	80066c4 <_vfprintf_r+0xcdc>
 80066e6:	2610      	movs	r6, #16
 80066e8:	4b83      	ldr	r3, [pc, #524]	; (80068f8 <_vfprintf_r+0xf10>)
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	2d10      	cmp	r5, #16
 80066ee:	dd13      	ble.n	8006718 <_vfprintf_r+0xd30>
 80066f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f2:	6066      	str	r6, [r4, #4]
 80066f4:	3310      	adds	r3, #16
 80066f6:	9321      	str	r3, [sp, #132]	; 0x84
 80066f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80066fa:	3301      	adds	r3, #1
 80066fc:	2b07      	cmp	r3, #7
 80066fe:	9320      	str	r3, [sp, #128]	; 0x80
 8006700:	dc01      	bgt.n	8006706 <_vfprintf_r+0xd1e>
 8006702:	3408      	adds	r4, #8
 8006704:	e006      	b.n	8006714 <_vfprintf_r+0xd2c>
 8006706:	aa1f      	add	r2, sp, #124	; 0x7c
 8006708:	4659      	mov	r1, fp
 800670a:	4650      	mov	r0, sl
 800670c:	f005 fa2a 	bl	800bb64 <__sprint_r>
 8006710:	bb30      	cbnz	r0, 8006760 <_vfprintf_r+0xd78>
 8006712:	ac2c      	add	r4, sp, #176	; 0xb0
 8006714:	3d10      	subs	r5, #16
 8006716:	e7e7      	b.n	80066e8 <_vfprintf_r+0xd00>
 8006718:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800671a:	6065      	str	r5, [r4, #4]
 800671c:	441d      	add	r5, r3
 800671e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006720:	9521      	str	r5, [sp, #132]	; 0x84
 8006722:	3301      	adds	r3, #1
 8006724:	2b07      	cmp	r3, #7
 8006726:	9320      	str	r3, [sp, #128]	; 0x80
 8006728:	ddcc      	ble.n	80066c4 <_vfprintf_r+0xcdc>
 800672a:	aa1f      	add	r2, sp, #124	; 0x7c
 800672c:	4659      	mov	r1, fp
 800672e:	4650      	mov	r0, sl
 8006730:	f005 fa18 	bl	800bb64 <__sprint_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	d0c5      	beq.n	80066c4 <_vfprintf_r+0xcdc>
 8006738:	e012      	b.n	8006760 <_vfprintf_r+0xd78>
 800673a:	aa1f      	add	r2, sp, #124	; 0x7c
 800673c:	4659      	mov	r1, fp
 800673e:	4650      	mov	r0, sl
 8006740:	f005 fa10 	bl	800bb64 <__sprint_r>
 8006744:	b960      	cbnz	r0, 8006760 <_vfprintf_r+0xd78>
 8006746:	2300      	movs	r3, #0
 8006748:	9320      	str	r3, [sp, #128]	; 0x80
 800674a:	9f03      	ldr	r7, [sp, #12]
 800674c:	ac2c      	add	r4, sp, #176	; 0xb0
 800674e:	f7ff b9b4 	b.w	8005aba <_vfprintf_r+0xd2>
 8006752:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006754:	b123      	cbz	r3, 8006760 <_vfprintf_r+0xd78>
 8006756:	aa1f      	add	r2, sp, #124	; 0x7c
 8006758:	4659      	mov	r1, fp
 800675a:	4650      	mov	r0, sl
 800675c:	f005 fa02 	bl	800bb64 <__sprint_r>
 8006760:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006764:	065b      	lsls	r3, r3, #25
 8006766:	f53f a98b 	bmi.w	8005a80 <_vfprintf_r+0x98>
 800676a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800676c:	e12f      	b.n	80069ce <_vfprintf_r+0xfe6>
 800676e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006772:	4610      	mov	r0, r2
 8006774:	4619      	mov	r1, r3
 8006776:	f7fa f9d5 	bl	8000b24 <__aeabi_dcmpun>
 800677a:	b160      	cbz	r0, 8006796 <_vfprintf_r+0xdae>
 800677c:	4b5f      	ldr	r3, [pc, #380]	; (80068fc <_vfprintf_r+0xf14>)
 800677e:	4a60      	ldr	r2, [pc, #384]	; (8006900 <_vfprintf_r+0xf18>)
 8006780:	9902      	ldr	r1, [sp, #8]
 8006782:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8006786:	2947      	cmp	r1, #71	; 0x47
 8006788:	bfcc      	ite	gt
 800678a:	4690      	movgt	r8, r2
 800678c:	4698      	movle	r8, r3
 800678e:	f04f 0903 	mov.w	r9, #3
 8006792:	2600      	movs	r6, #0
 8006794:	e451      	b.n	800603a <_vfprintf_r+0x652>
 8006796:	f1b9 3fff 	cmp.w	r9, #4294967295
 800679a:	d00a      	beq.n	80067b2 <_vfprintf_r+0xdca>
 800679c:	9b02      	ldr	r3, [sp, #8]
 800679e:	f023 0320 	bic.w	r3, r3, #32
 80067a2:	2b47      	cmp	r3, #71	; 0x47
 80067a4:	d107      	bne.n	80067b6 <_vfprintf_r+0xdce>
 80067a6:	f1b9 0f00 	cmp.w	r9, #0
 80067aa:	bf08      	it	eq
 80067ac:	f04f 0901 	moveq.w	r9, #1
 80067b0:	e001      	b.n	80067b6 <_vfprintf_r+0xdce>
 80067b2:	f04f 0906 	mov.w	r9, #6
 80067b6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80067ba:	930c      	str	r3, [sp, #48]	; 0x30
 80067bc:	9b07      	ldr	r3, [sp, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da07      	bge.n	80067d2 <_vfprintf_r+0xdea>
 80067c2:	9b06      	ldr	r3, [sp, #24]
 80067c4:	930e      	str	r3, [sp, #56]	; 0x38
 80067c6:	9b07      	ldr	r3, [sp, #28]
 80067c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ce:	232d      	movs	r3, #45	; 0x2d
 80067d0:	e004      	b.n	80067dc <_vfprintf_r+0xdf4>
 80067d2:	ed9d 7b06 	vldr	d7, [sp, #24]
 80067d6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80067da:	2300      	movs	r3, #0
 80067dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80067de:	9b02      	ldr	r3, [sp, #8]
 80067e0:	f023 0720 	bic.w	r7, r3, #32
 80067e4:	2f46      	cmp	r7, #70	; 0x46
 80067e6:	d004      	beq.n	80067f2 <_vfprintf_r+0xe0a>
 80067e8:	2f45      	cmp	r7, #69	; 0x45
 80067ea:	d105      	bne.n	80067f8 <_vfprintf_r+0xe10>
 80067ec:	f109 0601 	add.w	r6, r9, #1
 80067f0:	e003      	b.n	80067fa <_vfprintf_r+0xe12>
 80067f2:	464e      	mov	r6, r9
 80067f4:	2103      	movs	r1, #3
 80067f6:	e001      	b.n	80067fc <_vfprintf_r+0xe14>
 80067f8:	464e      	mov	r6, r9
 80067fa:	2102      	movs	r1, #2
 80067fc:	ab1d      	add	r3, sp, #116	; 0x74
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	ab1a      	add	r3, sp, #104	; 0x68
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4632      	mov	r2, r6
 8006806:	ab19      	add	r3, sp, #100	; 0x64
 8006808:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800680c:	4650      	mov	r0, sl
 800680e:	f000 ffaf 	bl	8007770 <_dtoa_r>
 8006812:	2f47      	cmp	r7, #71	; 0x47
 8006814:	4680      	mov	r8, r0
 8006816:	d102      	bne.n	800681e <_vfprintf_r+0xe36>
 8006818:	07eb      	lsls	r3, r5, #31
 800681a:	f140 80ce 	bpl.w	80069ba <_vfprintf_r+0xfd2>
 800681e:	eb08 0306 	add.w	r3, r8, r6
 8006822:	2f46      	cmp	r7, #70	; 0x46
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	d111      	bne.n	800684c <_vfprintf_r+0xe64>
 8006828:	f898 3000 	ldrb.w	r3, [r8]
 800682c:	2b30      	cmp	r3, #48	; 0x30
 800682e:	d109      	bne.n	8006844 <_vfprintf_r+0xe5c>
 8006830:	2200      	movs	r2, #0
 8006832:	2300      	movs	r3, #0
 8006834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006838:	f7fa f942 	bl	8000ac0 <__aeabi_dcmpeq>
 800683c:	b910      	cbnz	r0, 8006844 <_vfprintf_r+0xe5c>
 800683e:	f1c6 0601 	rsb	r6, r6, #1
 8006842:	9619      	str	r6, [sp, #100]	; 0x64
 8006844:	9a04      	ldr	r2, [sp, #16]
 8006846:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006848:	441a      	add	r2, r3
 800684a:	9204      	str	r2, [sp, #16]
 800684c:	2200      	movs	r2, #0
 800684e:	2300      	movs	r3, #0
 8006850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006854:	f7fa f934 	bl	8000ac0 <__aeabi_dcmpeq>
 8006858:	b908      	cbnz	r0, 800685e <_vfprintf_r+0xe76>
 800685a:	2230      	movs	r2, #48	; 0x30
 800685c:	e002      	b.n	8006864 <_vfprintf_r+0xe7c>
 800685e:	9b04      	ldr	r3, [sp, #16]
 8006860:	931d      	str	r3, [sp, #116]	; 0x74
 8006862:	e007      	b.n	8006874 <_vfprintf_r+0xe8c>
 8006864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006866:	9904      	ldr	r1, [sp, #16]
 8006868:	4299      	cmp	r1, r3
 800686a:	d903      	bls.n	8006874 <_vfprintf_r+0xe8c>
 800686c:	1c59      	adds	r1, r3, #1
 800686e:	911d      	str	r1, [sp, #116]	; 0x74
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e7f7      	b.n	8006864 <_vfprintf_r+0xe7c>
 8006874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006876:	2f47      	cmp	r7, #71	; 0x47
 8006878:	ebc8 0303 	rsb	r3, r8, r3
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	d108      	bne.n	8006892 <_vfprintf_r+0xeaa>
 8006880:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006882:	1cdf      	adds	r7, r3, #3
 8006884:	db01      	blt.n	800688a <_vfprintf_r+0xea2>
 8006886:	4599      	cmp	r9, r3
 8006888:	da69      	bge.n	800695e <_vfprintf_r+0xf76>
 800688a:	9b02      	ldr	r3, [sp, #8]
 800688c:	3b02      	subs	r3, #2
 800688e:	9302      	str	r3, [sp, #8]
 8006890:	e002      	b.n	8006898 <_vfprintf_r+0xeb0>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	2b65      	cmp	r3, #101	; 0x65
 8006896:	dc4b      	bgt.n	8006930 <_vfprintf_r+0xf48>
 8006898:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800689a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800689e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 80068a2:	3b01      	subs	r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	9319      	str	r3, [sp, #100]	; 0x64
 80068a8:	bfba      	itte	lt
 80068aa:	425b      	neglt	r3, r3
 80068ac:	222d      	movlt	r2, #45	; 0x2d
 80068ae:	222b      	movge	r2, #43	; 0x2b
 80068b0:	2b09      	cmp	r3, #9
 80068b2:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80068b6:	dd25      	ble.n	8006904 <_vfprintf_r+0xf1c>
 80068b8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80068bc:	200a      	movs	r0, #10
 80068be:	fb93 f1f0 	sdiv	r1, r3, r0
 80068c2:	fb00 3311 	mls	r3, r0, r1, r3
 80068c6:	3330      	adds	r3, #48	; 0x30
 80068c8:	2909      	cmp	r1, #9
 80068ca:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80068ce:	460b      	mov	r3, r1
 80068d0:	dcf5      	bgt.n	80068be <_vfprintf_r+0xed6>
 80068d2:	3330      	adds	r3, #48	; 0x30
 80068d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068d8:	1e51      	subs	r1, r2, #1
 80068da:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80068de:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80068e2:	4281      	cmp	r1, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	d214      	bcs.n	8006912 <_vfprintf_r+0xf2a>
 80068e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ec:	f803 2b01 	strb.w	r2, [r3], #1
 80068f0:	e7f7      	b.n	80068e2 <_vfprintf_r+0xefa>
 80068f2:	bf00      	nop
 80068f4:	0800cde8 	.word	0x0800cde8
 80068f8:	0800cda4 	.word	0x0800cda4
 80068fc:	0800cdbc 	.word	0x0800cdbc
 8006900:	0800cdc0 	.word	0x0800cdc0
 8006904:	2230      	movs	r2, #48	; 0x30
 8006906:	4413      	add	r3, r2
 8006908:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800690c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8006910:	aa1c      	add	r2, sp, #112	; 0x70
 8006912:	ab1b      	add	r3, sp, #108	; 0x6c
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	9a04      	ldr	r2, [sp, #16]
 8006918:	9310      	str	r3, [sp, #64]	; 0x40
 800691a:	2a01      	cmp	r2, #1
 800691c:	eb03 0902 	add.w	r9, r3, r2
 8006920:	dc02      	bgt.n	8006928 <_vfprintf_r+0xf40>
 8006922:	f015 0701 	ands.w	r7, r5, #1
 8006926:	d032      	beq.n	800698e <_vfprintf_r+0xfa6>
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	2700      	movs	r7, #0
 800692c:	4499      	add	r9, r3
 800692e:	e02e      	b.n	800698e <_vfprintf_r+0xfa6>
 8006930:	9b02      	ldr	r3, [sp, #8]
 8006932:	2b66      	cmp	r3, #102	; 0x66
 8006934:	d113      	bne.n	800695e <_vfprintf_r+0xf76>
 8006936:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006938:	2b00      	cmp	r3, #0
 800693a:	dd07      	ble.n	800694c <_vfprintf_r+0xf64>
 800693c:	f1b9 0f00 	cmp.w	r9, #0
 8006940:	d101      	bne.n	8006946 <_vfprintf_r+0xf5e>
 8006942:	07ee      	lsls	r6, r5, #31
 8006944:	d521      	bpl.n	800698a <_vfprintf_r+0xfa2>
 8006946:	9a08      	ldr	r2, [sp, #32]
 8006948:	4413      	add	r3, r2
 800694a:	e006      	b.n	800695a <_vfprintf_r+0xf72>
 800694c:	f1b9 0f00 	cmp.w	r9, #0
 8006950:	d101      	bne.n	8006956 <_vfprintf_r+0xf6e>
 8006952:	07ed      	lsls	r5, r5, #31
 8006954:	d514      	bpl.n	8006980 <_vfprintf_r+0xf98>
 8006956:	9b08      	ldr	r3, [sp, #32]
 8006958:	3301      	adds	r3, #1
 800695a:	444b      	add	r3, r9
 800695c:	e015      	b.n	800698a <_vfprintf_r+0xfa2>
 800695e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006960:	9a04      	ldr	r2, [sp, #16]
 8006962:	4293      	cmp	r3, r2
 8006964:	db03      	blt.n	800696e <_vfprintf_r+0xf86>
 8006966:	07e8      	lsls	r0, r5, #31
 8006968:	d50d      	bpl.n	8006986 <_vfprintf_r+0xf9e>
 800696a:	9a08      	ldr	r2, [sp, #32]
 800696c:	e006      	b.n	800697c <_vfprintf_r+0xf94>
 800696e:	9a04      	ldr	r2, [sp, #16]
 8006970:	9908      	ldr	r1, [sp, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	440a      	add	r2, r1
 8006976:	dc05      	bgt.n	8006984 <_vfprintf_r+0xf9c>
 8006978:	f1c3 0301 	rsb	r3, r3, #1
 800697c:	4413      	add	r3, r2
 800697e:	e002      	b.n	8006986 <_vfprintf_r+0xf9e>
 8006980:	2301      	movs	r3, #1
 8006982:	e002      	b.n	800698a <_vfprintf_r+0xfa2>
 8006984:	4613      	mov	r3, r2
 8006986:	2267      	movs	r2, #103	; 0x67
 8006988:	9202      	str	r2, [sp, #8]
 800698a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800698c:	4699      	mov	r9, r3
 800698e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006990:	b113      	cbz	r3, 8006998 <_vfprintf_r+0xfb0>
 8006992:	232d      	movs	r3, #45	; 0x2d
 8006994:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006998:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800699a:	2600      	movs	r6, #0
 800699c:	f7ff bb4e 	b.w	800603c <_vfprintf_r+0x654>
 80069a0:	2200      	movs	r2, #0
 80069a2:	2300      	movs	r3, #0
 80069a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a8:	f7fa f894 	bl	8000ad4 <__aeabi_dcmplt>
 80069ac:	b110      	cbz	r0, 80069b4 <_vfprintf_r+0xfcc>
 80069ae:	232d      	movs	r3, #45	; 0x2d
 80069b0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <_vfprintf_r+0xfec>)
 80069b6:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <_vfprintf_r+0xff0>)
 80069b8:	e6e2      	b.n	8006780 <_vfprintf_r+0xd98>
 80069ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069bc:	1a1b      	subs	r3, r3, r0
 80069be:	9304      	str	r3, [sp, #16]
 80069c0:	e75e      	b.n	8006880 <_vfprintf_r+0xe98>
 80069c2:	ea56 0207 	orrs.w	r2, r6, r7
 80069c6:	f47f aaac 	bne.w	8005f22 <_vfprintf_r+0x53a>
 80069ca:	f7ff bab1 	b.w	8005f30 <_vfprintf_r+0x548>
 80069ce:	b03d      	add	sp, #244	; 0xf4
 80069d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d4:	0800cdb4 	.word	0x0800cdb4
 80069d8:	0800cdb8 	.word	0x0800cdb8

080069dc <__sbprintf>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	460c      	mov	r4, r1
 80069e0:	8989      	ldrh	r1, [r1, #12]
 80069e2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80069e6:	f021 0102 	bic.w	r1, r1, #2
 80069ea:	f8ad 100c 	strh.w	r1, [sp, #12]
 80069ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80069f0:	9119      	str	r1, [sp, #100]	; 0x64
 80069f2:	89e1      	ldrh	r1, [r4, #14]
 80069f4:	f8ad 100e 	strh.w	r1, [sp, #14]
 80069f8:	6a21      	ldr	r1, [r4, #32]
 80069fa:	9108      	str	r1, [sp, #32]
 80069fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80069fe:	910a      	str	r1, [sp, #40]	; 0x28
 8006a00:	a91a      	add	r1, sp, #104	; 0x68
 8006a02:	9100      	str	r1, [sp, #0]
 8006a04:	9104      	str	r1, [sp, #16]
 8006a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a0a:	9102      	str	r1, [sp, #8]
 8006a0c:	9105      	str	r1, [sp, #20]
 8006a0e:	2100      	movs	r1, #0
 8006a10:	9106      	str	r1, [sp, #24]
 8006a12:	4669      	mov	r1, sp
 8006a14:	4606      	mov	r6, r0
 8006a16:	f7fe ffe7 	bl	80059e8 <_vfprintf_r>
 8006a1a:	1e05      	subs	r5, r0, #0
 8006a1c:	db07      	blt.n	8006a2e <__sbprintf+0x52>
 8006a1e:	4669      	mov	r1, sp
 8006a20:	4630      	mov	r0, r6
 8006a22:	f001 fcd5 	bl	80083d0 <_fflush_r>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	bf18      	it	ne
 8006a2a:	f04f 35ff 	movne.w	r5, #4294967295
 8006a2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006a32:	065b      	lsls	r3, r3, #25
 8006a34:	bf48      	it	mi
 8006a36:	89a3      	ldrhmi	r3, [r4, #12]
 8006a38:	4628      	mov	r0, r5
 8006a3a:	bf44      	itt	mi
 8006a3c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8006a40:	81a3      	strhmi	r3, [r4, #12]
 8006a42:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8006a46:	bd70      	pop	{r4, r5, r6, pc}

08006a48 <__svfscanf_r>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	461f      	mov	r7, r3
 8006a4e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8006a52:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 8006a56:	460d      	mov	r5, r1
 8006a58:	0499      	lsls	r1, r3, #18
 8006a5a:	4681      	mov	r9, r0
 8006a5c:	9206      	str	r2, [sp, #24]
 8006a5e:	d406      	bmi.n	8006a6e <__svfscanf_r+0x26>
 8006a60:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8006a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a6a:	81ab      	strh	r3, [r5, #12]
 8006a6c:	666a      	str	r2, [r5, #100]	; 0x64
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9305      	str	r3, [sp, #20]
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	4698      	mov	r8, r3
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	9b06      	ldr	r3, [sp, #24]
 8006a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a7e:	9306      	str	r3, [sp, #24]
 8006a80:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	f000 853f 	beq.w	8007506 <__svfscanf_r+0xabe>
 8006a88:	4b9a      	ldr	r3, [pc, #616]	; (8006cf4 <__svfscanf_r+0x2ac>)
 8006a8a:	6819      	ldr	r1, [r3, #0]
 8006a8c:	188b      	adds	r3, r1, r2
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8006a98:	b1cb      	cbz	r3, 8006ace <__svfscanf_r+0x86>
 8006a9a:	686b      	ldr	r3, [r5, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dd0f      	ble.n	8006ac0 <__svfscanf_r+0x78>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	4994      	ldr	r1, [pc, #592]	; (8006cf4 <__svfscanf_r+0x2ac>)
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	6809      	ldr	r1, [r1, #0]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	7852      	ldrb	r2, [r2, #1]
 8006aac:	0712      	lsls	r2, r2, #28
 8006aae:	d5e3      	bpl.n	8006a78 <__svfscanf_r+0x30>
 8006ab0:	686a      	ldr	r2, [r5, #4]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	606a      	str	r2, [r5, #4]
 8006abc:	602b      	str	r3, [r5, #0]
 8006abe:	e7ec      	b.n	8006a9a <__svfscanf_r+0x52>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4648      	mov	r0, r9
 8006ac4:	f002 fe14 	bl	80096f0 <__srefill_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d0e9      	beq.n	8006aa0 <__svfscanf_r+0x58>
 8006acc:	e7d4      	b.n	8006a78 <__svfscanf_r+0x30>
 8006ace:	2a25      	cmp	r2, #37	; 0x25
 8006ad0:	d155      	bne.n	8006b7e <__svfscanf_r+0x136>
 8006ad2:	9a06      	ldr	r2, [sp, #24]
 8006ad4:	4626      	mov	r6, r4
 8006ad6:	200a      	movs	r0, #10
 8006ad8:	9b06      	ldr	r3, [sp, #24]
 8006ada:	3301      	adds	r3, #1
 8006adc:	9306      	str	r3, [sp, #24]
 8006ade:	7813      	ldrb	r3, [r2, #0]
 8006ae0:	2b63      	cmp	r3, #99	; 0x63
 8006ae2:	f000 808f 	beq.w	8006c04 <__svfscanf_r+0x1bc>
 8006ae6:	d828      	bhi.n	8006b3a <__svfscanf_r+0xf2>
 8006ae8:	2b44      	cmp	r3, #68	; 0x44
 8006aea:	f000 80b5 	beq.w	8006c58 <__svfscanf_r+0x210>
 8006aee:	d812      	bhi.n	8006b16 <__svfscanf_r+0xce>
 8006af0:	2b2a      	cmp	r3, #42	; 0x2a
 8006af2:	d05f      	beq.n	8006bb4 <__svfscanf_r+0x16c>
 8006af4:	d805      	bhi.n	8006b02 <__svfscanf_r+0xba>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8507 	beq.w	800750a <__svfscanf_r+0xac2>
 8006afc:	2b25      	cmp	r3, #37	; 0x25
 8006afe:	d03e      	beq.n	8006b7e <__svfscanf_r+0x136>
 8006b00:	e0a4      	b.n	8006c4c <__svfscanf_r+0x204>
 8006b02:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b06:	2a09      	cmp	r2, #9
 8006b08:	f200 80a0 	bhi.w	8006c4c <__svfscanf_r+0x204>
 8006b0c:	fb00 3606 	mla	r6, r0, r6, r3
 8006b10:	3e30      	subs	r6, #48	; 0x30
 8006b12:	9a06      	ldr	r2, [sp, #24]
 8006b14:	e7e0      	b.n	8006ad8 <__svfscanf_r+0x90>
 8006b16:	2b4c      	cmp	r3, #76	; 0x4c
 8006b18:	d058      	beq.n	8006bcc <__svfscanf_r+0x184>
 8006b1a:	d804      	bhi.n	8006b26 <__svfscanf_r+0xde>
 8006b1c:	2b45      	cmp	r3, #69	; 0x45
 8006b1e:	d064      	beq.n	8006bea <__svfscanf_r+0x1a2>
 8006b20:	2b47      	cmp	r3, #71	; 0x47
 8006b22:	d062      	beq.n	8006bea <__svfscanf_r+0x1a2>
 8006b24:	e092      	b.n	8006c4c <__svfscanf_r+0x204>
 8006b26:	2b58      	cmp	r3, #88	; 0x58
 8006b28:	d05c      	beq.n	8006be4 <__svfscanf_r+0x19c>
 8006b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8006b2c:	d060      	beq.n	8006bf0 <__svfscanf_r+0x1a8>
 8006b2e:	2b4f      	cmp	r3, #79	; 0x4f
 8006b30:	f040 808c 	bne.w	8006c4c <__svfscanf_r+0x204>
 8006b34:	f044 0401 	orr.w	r4, r4, #1
 8006b38:	e04e      	b.n	8006bd8 <__svfscanf_r+0x190>
 8006b3a:	2b6c      	cmp	r3, #108	; 0x6c
 8006b3c:	d03d      	beq.n	8006bba <__svfscanf_r+0x172>
 8006b3e:	d80d      	bhi.n	8006b5c <__svfscanf_r+0x114>
 8006b40:	2b67      	cmp	r3, #103	; 0x67
 8006b42:	d803      	bhi.n	8006b4c <__svfscanf_r+0x104>
 8006b44:	2b65      	cmp	r3, #101	; 0x65
 8006b46:	f0c0 8089 	bcc.w	8006c5c <__svfscanf_r+0x214>
 8006b4a:	e04e      	b.n	8006bea <__svfscanf_r+0x1a2>
 8006b4c:	2b68      	cmp	r3, #104	; 0x68
 8006b4e:	d040      	beq.n	8006bd2 <__svfscanf_r+0x18a>
 8006b50:	2b69      	cmp	r3, #105	; 0x69
 8006b52:	d17b      	bne.n	8006c4c <__svfscanf_r+0x204>
 8006b54:	4b68      	ldr	r3, [pc, #416]	; (8006cf8 <__svfscanf_r+0x2b0>)
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e082      	b.n	8006c62 <__svfscanf_r+0x21a>
 8006b5c:	2b70      	cmp	r3, #112	; 0x70
 8006b5e:	d056      	beq.n	8006c0e <__svfscanf_r+0x1c6>
 8006b60:	d804      	bhi.n	8006b6c <__svfscanf_r+0x124>
 8006b62:	2b6e      	cmp	r3, #110	; 0x6e
 8006b64:	d059      	beq.n	8006c1a <__svfscanf_r+0x1d2>
 8006b66:	2b6f      	cmp	r3, #111	; 0x6f
 8006b68:	d036      	beq.n	8006bd8 <__svfscanf_r+0x190>
 8006b6a:	e06f      	b.n	8006c4c <__svfscanf_r+0x204>
 8006b6c:	2b75      	cmp	r3, #117	; 0x75
 8006b6e:	d037      	beq.n	8006be0 <__svfscanf_r+0x198>
 8006b70:	2b78      	cmp	r3, #120	; 0x78
 8006b72:	d037      	beq.n	8006be4 <__svfscanf_r+0x19c>
 8006b74:	2b73      	cmp	r3, #115	; 0x73
 8006b76:	d169      	bne.n	8006c4c <__svfscanf_r+0x204>
 8006b78:	f04f 0a02 	mov.w	sl, #2
 8006b7c:	e074      	b.n	8006c68 <__svfscanf_r+0x220>
 8006b7e:	686b      	ldr	r3, [r5, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd0f      	ble.n	8006ba4 <__svfscanf_r+0x15c>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	9a06      	ldr	r2, [sp, #24]
 8006b88:	7819      	ldrb	r1, [r3, #0]
 8006b8a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8006b8e:	4291      	cmp	r1, r2
 8006b90:	f040 84b9 	bne.w	8007506 <__svfscanf_r+0xabe>
 8006b94:	686a      	ldr	r2, [r5, #4]
 8006b96:	3301      	adds	r3, #1
 8006b98:	3a01      	subs	r2, #1
 8006b9a:	606a      	str	r2, [r5, #4]
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	f108 0801 	add.w	r8, r8, #1
 8006ba2:	e769      	b.n	8006a78 <__svfscanf_r+0x30>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4648      	mov	r0, r9
 8006ba8:	f002 fda2 	bl	80096f0 <__srefill_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0e9      	beq.n	8006b84 <__svfscanf_r+0x13c>
 8006bb0:	f000 bc9e 	b.w	80074f0 <__svfscanf_r+0xaa8>
 8006bb4:	f044 0410 	orr.w	r4, r4, #16
 8006bb8:	e7ab      	b.n	8006b12 <__svfscanf_r+0xca>
 8006bba:	7853      	ldrb	r3, [r2, #1]
 8006bbc:	2b6c      	cmp	r3, #108	; 0x6c
 8006bbe:	d102      	bne.n	8006bc6 <__svfscanf_r+0x17e>
 8006bc0:	1c93      	adds	r3, r2, #2
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	e002      	b.n	8006bcc <__svfscanf_r+0x184>
 8006bc6:	f044 0401 	orr.w	r4, r4, #1
 8006bca:	e7a2      	b.n	8006b12 <__svfscanf_r+0xca>
 8006bcc:	f044 0402 	orr.w	r4, r4, #2
 8006bd0:	e79f      	b.n	8006b12 <__svfscanf_r+0xca>
 8006bd2:	f044 0404 	orr.w	r4, r4, #4
 8006bd6:	e79c      	b.n	8006b12 <__svfscanf_r+0xca>
 8006bd8:	4b48      	ldr	r3, [pc, #288]	; (8006cfc <__svfscanf_r+0x2b4>)
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	2308      	movs	r3, #8
 8006bde:	e040      	b.n	8006c62 <__svfscanf_r+0x21a>
 8006be0:	4b46      	ldr	r3, [pc, #280]	; (8006cfc <__svfscanf_r+0x2b4>)
 8006be2:	e03c      	b.n	8006c5e <__svfscanf_r+0x216>
 8006be4:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8006be8:	e013      	b.n	8006c12 <__svfscanf_r+0x1ca>
 8006bea:	f04f 0a04 	mov.w	sl, #4
 8006bee:	e03b      	b.n	8006c68 <__svfscanf_r+0x220>
 8006bf0:	9906      	ldr	r1, [sp, #24]
 8006bf2:	a812      	add	r0, sp, #72	; 0x48
 8006bf4:	f002 fe20 	bl	8009838 <__sccl>
 8006bf8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006bfc:	9006      	str	r0, [sp, #24]
 8006bfe:	f04f 0a01 	mov.w	sl, #1
 8006c02:	e031      	b.n	8006c68 <__svfscanf_r+0x220>
 8006c04:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006c08:	f04f 0a00 	mov.w	sl, #0
 8006c0c:	e02c      	b.n	8006c68 <__svfscanf_r+0x220>
 8006c0e:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 8006c12:	4b3a      	ldr	r3, [pc, #232]	; (8006cfc <__svfscanf_r+0x2b4>)
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	2310      	movs	r3, #16
 8006c18:	e023      	b.n	8006c62 <__svfscanf_r+0x21a>
 8006c1a:	06e6      	lsls	r6, r4, #27
 8006c1c:	f53f af2c 	bmi.w	8006a78 <__svfscanf_r+0x30>
 8006c20:	f014 0f04 	tst.w	r4, #4
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	f107 0304 	add.w	r3, r7, #4
 8006c2a:	d002      	beq.n	8006c32 <__svfscanf_r+0x1ea>
 8006c2c:	f8a2 8000 	strh.w	r8, [r2]
 8006c30:	e003      	b.n	8006c3a <__svfscanf_r+0x1f2>
 8006c32:	07e0      	lsls	r0, r4, #31
 8006c34:	d503      	bpl.n	8006c3e <__svfscanf_r+0x1f6>
 8006c36:	f8c2 8000 	str.w	r8, [r2]
 8006c3a:	461f      	mov	r7, r3
 8006c3c:	e71c      	b.n	8006a78 <__svfscanf_r+0x30>
 8006c3e:	07a1      	lsls	r1, r4, #30
 8006c40:	d5f9      	bpl.n	8006c36 <__svfscanf_r+0x1ee>
 8006c42:	4640      	mov	r0, r8
 8006c44:	17c1      	asrs	r1, r0, #31
 8006c46:	e9c2 0100 	strd	r0, r1, [r2]
 8006c4a:	e7f6      	b.n	8006c3a <__svfscanf_r+0x1f2>
 8006c4c:	440b      	add	r3, r1
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <__svfscanf_r+0x214>
 8006c58:	f044 0401 	orr.w	r4, r4, #1
 8006c5c:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <__svfscanf_r+0x2b0>)
 8006c5e:	9305      	str	r3, [sp, #20]
 8006c60:	230a      	movs	r3, #10
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	f04f 0a03 	mov.w	sl, #3
 8006c68:	686b      	ldr	r3, [r5, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dd02      	ble.n	8006c74 <__svfscanf_r+0x22c>
 8006c6e:	0663      	lsls	r3, r4, #25
 8006c70:	d422      	bmi.n	8006cb8 <__svfscanf_r+0x270>
 8006c72:	e010      	b.n	8006c96 <__svfscanf_r+0x24e>
 8006c74:	4629      	mov	r1, r5
 8006c76:	4648      	mov	r0, r9
 8006c78:	f002 fd3a 	bl	80096f0 <__srefill_r>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d0f6      	beq.n	8006c6e <__svfscanf_r+0x226>
 8006c80:	f000 bc36 	b.w	80074f0 <__svfscanf_r+0xaa8>
 8006c84:	686a      	ldr	r2, [r5, #4]
 8006c86:	3a01      	subs	r2, #1
 8006c88:	2a00      	cmp	r2, #0
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	606a      	str	r2, [r5, #4]
 8006c90:	dd0a      	ble.n	8006ca8 <__svfscanf_r+0x260>
 8006c92:	3301      	adds	r3, #1
 8006c94:	602b      	str	r3, [r5, #0]
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	4a16      	ldr	r2, [pc, #88]	; (8006cf4 <__svfscanf_r+0x2ac>)
 8006c9a:	7819      	ldrb	r1, [r3, #0]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	7852      	ldrb	r2, [r2, #1]
 8006ca2:	0710      	lsls	r0, r2, #28
 8006ca4:	d4ee      	bmi.n	8006c84 <__svfscanf_r+0x23c>
 8006ca6:	e007      	b.n	8006cb8 <__svfscanf_r+0x270>
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4648      	mov	r0, r9
 8006cac:	f002 fd20 	bl	80096f0 <__srefill_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0f0      	beq.n	8006c96 <__svfscanf_r+0x24e>
 8006cb4:	f000 bc1c 	b.w	80074f0 <__svfscanf_r+0xaa8>
 8006cb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cbc:	f1ba 0f03 	cmp.w	sl, #3
 8006cc0:	d805      	bhi.n	8006cce <__svfscanf_r+0x286>
 8006cc2:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8006cc6:	008a      	.short	0x008a
 8006cc8:	019800dd 	.word	0x019800dd
 8006ccc:	0265      	.short	0x0265
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	bf08      	it	eq
 8006cd2:	2601      	moveq	r6, #1
 8006cd4:	f014 0301 	ands.w	r3, r4, #1
 8006cd8:	f004 0410 	and.w	r4, r4, #16
 8006cdc:	d056      	beq.n	8006d8c <__svfscanf_r+0x344>
 8006cde:	2208      	movs	r2, #8
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	a810      	add	r0, sp, #64	; 0x40
 8006ce4:	f002 f901 	bl	8008eea <memset>
 8006ce8:	b954      	cbnz	r4, 8006d00 <__svfscanf_r+0x2b8>
 8006cea:	f8d7 b000 	ldr.w	fp, [r7]
 8006cee:	3704      	adds	r7, #4
 8006cf0:	e008      	b.n	8006d04 <__svfscanf_r+0x2bc>
 8006cf2:	bf00      	nop
 8006cf4:	20000158 	.word	0x20000158
 8006cf8:	0800a5b1 	.word	0x0800a5b1
 8006cfc:	0800a81d 	.word	0x0800a81d
 8006d00:	f04f 0b00 	mov.w	fp, #0
 8006d04:	2300      	movs	r3, #0
 8006d06:	9307      	str	r3, [sp, #28]
 8006d08:	f001 fe10 	bl	800892c <__locale_mb_cur_max>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	f000 83ee 	beq.w	80074f0 <__svfscanf_r+0xaa8>
 8006d14:	682a      	ldr	r2, [r5, #0]
 8006d16:	a852      	add	r0, sp, #328	; 0x148
 8006d18:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006d1c:	54c1      	strb	r1, [r0, r3]
 8006d1e:	f103 0a01 	add.w	sl, r3, #1
 8006d22:	686b      	ldr	r3, [r5, #4]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	e885 000c 	stmia.w	r5, {r2, r3}
 8006d2a:	ab10      	add	r3, sp, #64	; 0x40
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4602      	mov	r2, r0
 8006d30:	4659      	mov	r1, fp
 8006d32:	4653      	mov	r3, sl
 8006d34:	4648      	mov	r0, r9
 8006d36:	f002 f893 	bl	8008e60 <_mbrtowc_r>
 8006d3a:	1c41      	adds	r1, r0, #1
 8006d3c:	f000 83d8 	beq.w	80074f0 <__svfscanf_r+0xaa8>
 8006d40:	b938      	cbnz	r0, 8006d52 <__svfscanf_r+0x30a>
 8006d42:	44d0      	add	r8, sl
 8006d44:	3e01      	subs	r6, #1
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	f040 83e2 	bne.w	8007510 <__svfscanf_r+0xac8>
 8006d4c:	f8cb 4000 	str.w	r4, [fp]
 8006d50:	e004      	b.n	8006d5c <__svfscanf_r+0x314>
 8006d52:	3002      	adds	r0, #2
 8006d54:	d006      	beq.n	8006d64 <__svfscanf_r+0x31c>
 8006d56:	44d0      	add	r8, sl
 8006d58:	3e01      	subs	r6, #1
 8006d5a:	b90c      	cbnz	r4, 8006d60 <__svfscanf_r+0x318>
 8006d5c:	f10b 0b04 	add.w	fp, fp, #4
 8006d60:	f04f 0a00 	mov.w	sl, #0
 8006d64:	686b      	ldr	r3, [r5, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	dc0c      	bgt.n	8006d84 <__svfscanf_r+0x33c>
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f002 fcbf 	bl	80096f0 <__srefill_r>
 8006d72:	b138      	cbz	r0, 8006d84 <__svfscanf_r+0x33c>
 8006d74:	f1ba 0f00 	cmp.w	sl, #0
 8006d78:	f040 83ba 	bne.w	80074f0 <__svfscanf_r+0xaa8>
 8006d7c:	2c00      	cmp	r4, #0
 8006d7e:	f000 80f0 	beq.w	8006f62 <__svfscanf_r+0x51a>
 8006d82:	e679      	b.n	8006a78 <__svfscanf_r+0x30>
 8006d84:	2e00      	cmp	r6, #0
 8006d86:	d0f9      	beq.n	8006d7c <__svfscanf_r+0x334>
 8006d88:	4653      	mov	r3, sl
 8006d8a:	e7bc      	b.n	8006d06 <__svfscanf_r+0x2be>
 8006d8c:	b1c4      	cbz	r4, 8006dc0 <__svfscanf_r+0x378>
 8006d8e:	461c      	mov	r4, r3
 8006d90:	686b      	ldr	r3, [r5, #4]
 8006d92:	682a      	ldr	r2, [r5, #0]
 8006d94:	42b3      	cmp	r3, r6
 8006d96:	da0d      	bge.n	8006db4 <__svfscanf_r+0x36c>
 8006d98:	441c      	add	r4, r3
 8006d9a:	1af6      	subs	r6, r6, r3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	4629      	mov	r1, r5
 8006da2:	4648      	mov	r0, r9
 8006da4:	f002 fca4 	bl	80096f0 <__srefill_r>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d0f1      	beq.n	8006d90 <__svfscanf_r+0x348>
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	f040 80f7 	bne.w	8006fa0 <__svfscanf_r+0x558>
 8006db2:	e39d      	b.n	80074f0 <__svfscanf_r+0xaa8>
 8006db4:	1b9b      	subs	r3, r3, r6
 8006db6:	606b      	str	r3, [r5, #4]
 8006db8:	1993      	adds	r3, r2, r6
 8006dba:	4434      	add	r4, r6
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	e0ef      	b.n	8006fa0 <__svfscanf_r+0x558>
 8006dc0:	9500      	str	r5, [sp, #0]
 8006dc2:	4633      	mov	r3, r6
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	4648      	mov	r0, r9
 8006dca:	1d3c      	adds	r4, r7, #4
 8006dcc:	f001 fbee 	bl	80085ac <_fread_r>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f000 838d 	beq.w	80074f0 <__svfscanf_r+0xaa8>
 8006dd6:	4480      	add	r8, r0
 8006dd8:	e108      	b.n	8006fec <__svfscanf_r+0x5a4>
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	bf08      	it	eq
 8006dde:	f04f 36ff 	moveq.w	r6, #4294967295
 8006de2:	06e2      	lsls	r2, r4, #27
 8006de4:	d51f      	bpl.n	8006e26 <__svfscanf_r+0x3de>
 8006de6:	46b2      	mov	sl, r6
 8006de8:	2400      	movs	r4, #0
 8006dea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8006df6:	b192      	cbz	r2, 8006e1e <__svfscanf_r+0x3d6>
 8006df8:	686a      	ldr	r2, [r5, #4]
 8006dfa:	3401      	adds	r4, #1
 8006dfc:	3a01      	subs	r2, #1
 8006dfe:	3301      	adds	r3, #1
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	606a      	str	r2, [r5, #4]
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f000 80ca 	beq.w	8006f9e <__svfscanf_r+0x556>
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	dcef      	bgt.n	8006dee <__svfscanf_r+0x3a6>
 8006e0e:	4629      	mov	r1, r5
 8006e10:	4648      	mov	r0, r9
 8006e12:	f002 fc6d 	bl	80096f0 <__srefill_r>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d0e9      	beq.n	8006dee <__svfscanf_r+0x3a6>
 8006e1a:	46a2      	mov	sl, r4
 8006e1c:	e0bf      	b.n	8006f9e <__svfscanf_r+0x556>
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	f040 80be 	bne.w	8006fa0 <__svfscanf_r+0x558>
 8006e24:	e36f      	b.n	8007506 <__svfscanf_r+0xabe>
 8006e26:	683c      	ldr	r4, [r7, #0]
 8006e28:	f107 0a04 	add.w	sl, r7, #4
 8006e2c:	4426      	add	r6, r4
 8006e2e:	4627      	mov	r7, r4
 8006e30:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8006e3c:	b1aa      	cbz	r2, 8006e6a <__svfscanf_r+0x422>
 8006e3e:	686a      	ldr	r2, [r5, #4]
 8006e40:	3a01      	subs	r2, #1
 8006e42:	606a      	str	r2, [r5, #4]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	602a      	str	r2, [r5, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f807 3b01 	strb.w	r3, [r7], #1
 8006e4e:	42be      	cmp	r6, r7
 8006e50:	d00c      	beq.n	8006e6c <__svfscanf_r+0x424>
 8006e52:	686b      	ldr	r3, [r5, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	dced      	bgt.n	8006e34 <__svfscanf_r+0x3ec>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4648      	mov	r0, r9
 8006e5c:	f002 fc48 	bl	80096f0 <__srefill_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d0e7      	beq.n	8006e34 <__svfscanf_r+0x3ec>
 8006e64:	42bc      	cmp	r4, r7
 8006e66:	f000 8343 	beq.w	80074f0 <__svfscanf_r+0xaa8>
 8006e6a:	463e      	mov	r6, r7
 8006e6c:	1b34      	subs	r4, r6, r4
 8006e6e:	f000 834a 	beq.w	8007506 <__svfscanf_r+0xabe>
 8006e72:	2300      	movs	r3, #0
 8006e74:	7033      	strb	r3, [r6, #0]
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	9303      	str	r3, [sp, #12]
 8006e7c:	4657      	mov	r7, sl
 8006e7e:	e08f      	b.n	8006fa0 <__svfscanf_r+0x558>
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	bf08      	it	eq
 8006e84:	f04f 36ff 	moveq.w	r6, #4294967295
 8006e88:	f014 0301 	ands.w	r3, r4, #1
 8006e8c:	f004 0410 	and.w	r4, r4, #16
 8006e90:	d06a      	beq.n	8006f68 <__svfscanf_r+0x520>
 8006e92:	2208      	movs	r2, #8
 8006e94:	2100      	movs	r1, #0
 8006e96:	a810      	add	r0, sp, #64	; 0x40
 8006e98:	f002 f827 	bl	8008eea <memset>
 8006e9c:	b91c      	cbnz	r4, 8006ea6 <__svfscanf_r+0x45e>
 8006e9e:	f8d7 b000 	ldr.w	fp, [r7]
 8006ea2:	3704      	adds	r7, #4
 8006ea4:	e001      	b.n	8006eaa <__svfscanf_r+0x462>
 8006ea6:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8006eaa:	2300      	movs	r3, #0
 8006eac:	682a      	ldr	r2, [r5, #0]
 8006eae:	49a5      	ldr	r1, [pc, #660]	; (8007144 <__svfscanf_r+0x6fc>)
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	6809      	ldr	r1, [r1, #0]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	7852      	ldrb	r2, [r2, #1]
 8006eb8:	0711      	lsls	r1, r2, #28
 8006eba:	d44d      	bmi.n	8006f58 <__svfscanf_r+0x510>
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	d04b      	beq.n	8006f58 <__svfscanf_r+0x510>
 8006ec0:	9307      	str	r3, [sp, #28]
 8006ec2:	f001 fd33 	bl	800892c <__locale_mb_cur_max>
 8006ec6:	9b07      	ldr	r3, [sp, #28]
 8006ec8:	4283      	cmp	r3, r0
 8006eca:	f000 8311 	beq.w	80074f0 <__svfscanf_r+0xaa8>
 8006ece:	682a      	ldr	r2, [r5, #0]
 8006ed0:	a852      	add	r0, sp, #328	; 0x148
 8006ed2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006ed6:	54c1      	strb	r1, [r0, r3]
 8006ed8:	f103 0a01 	add.w	sl, r3, #1
 8006edc:	686b      	ldr	r3, [r5, #4]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	e885 000c 	stmia.w	r5, {r2, r3}
 8006ee4:	ab10      	add	r3, sp, #64	; 0x40
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4653      	mov	r3, sl
 8006eec:	4659      	mov	r1, fp
 8006eee:	4648      	mov	r0, r9
 8006ef0:	f001 ffb6 	bl	8008e60 <_mbrtowc_r>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	f000 82fb 	beq.w	80074f0 <__svfscanf_r+0xaa8>
 8006efa:	b910      	cbnz	r0, 8006f02 <__svfscanf_r+0x4ba>
 8006efc:	f8cb 0000 	str.w	r0, [fp]
 8006f00:	e001      	b.n	8006f06 <__svfscanf_r+0x4be>
 8006f02:	3002      	adds	r0, #2
 8006f04:	d019      	beq.n	8006f3a <__svfscanf_r+0x4f2>
 8006f06:	f8db 0000 	ldr.w	r0, [fp]
 8006f0a:	f001 fcfd 	bl	8008908 <iswspace>
 8006f0e:	b160      	cbz	r0, 8006f2a <__svfscanf_r+0x4e2>
 8006f10:	ae52      	add	r6, sp, #328	; 0x148
 8006f12:	f1ba 0f00 	cmp.w	sl, #0
 8006f16:	d01f      	beq.n	8006f58 <__svfscanf_r+0x510>
 8006f18:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	f816 100a 	ldrb.w	r1, [r6, sl]
 8006f22:	4648      	mov	r0, r9
 8006f24:	f004 fda2 	bl	800ba6c <_ungetc_r>
 8006f28:	e7f3      	b.n	8006f12 <__svfscanf_r+0x4ca>
 8006f2a:	44d0      	add	r8, sl
 8006f2c:	3e01      	subs	r6, #1
 8006f2e:	b91c      	cbnz	r4, 8006f38 <__svfscanf_r+0x4f0>
 8006f30:	f10b 0b04 	add.w	fp, fp, #4
 8006f34:	46a2      	mov	sl, r4
 8006f36:	e000      	b.n	8006f3a <__svfscanf_r+0x4f2>
 8006f38:	4682      	mov	sl, r0
 8006f3a:	686b      	ldr	r3, [r5, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dc09      	bgt.n	8006f54 <__svfscanf_r+0x50c>
 8006f40:	4629      	mov	r1, r5
 8006f42:	4648      	mov	r0, r9
 8006f44:	f002 fbd4 	bl	80096f0 <__srefill_r>
 8006f48:	b120      	cbz	r0, 8006f54 <__svfscanf_r+0x50c>
 8006f4a:	f1ba 0f00 	cmp.w	sl, #0
 8006f4e:	f040 82cf 	bne.w	80074f0 <__svfscanf_r+0xaa8>
 8006f52:	e001      	b.n	8006f58 <__svfscanf_r+0x510>
 8006f54:	4653      	mov	r3, sl
 8006f56:	e7a9      	b.n	8006eac <__svfscanf_r+0x464>
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	f47f ad8d 	bne.w	8006a78 <__svfscanf_r+0x30>
 8006f5e:	f8cb 4000 	str.w	r4, [fp]
 8006f62:	9b03      	ldr	r3, [sp, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	e586      	b.n	8006a76 <__svfscanf_r+0x2e>
 8006f68:	b1e4      	cbz	r4, 8006fa4 <__svfscanf_r+0x55c>
 8006f6a:	461c      	mov	r4, r3
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	4975      	ldr	r1, [pc, #468]	; (8007144 <__svfscanf_r+0x6fc>)
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	6809      	ldr	r1, [r1, #0]
 8006f74:	440a      	add	r2, r1
 8006f76:	7852      	ldrb	r2, [r2, #1]
 8006f78:	0712      	lsls	r2, r2, #28
 8006f7a:	d411      	bmi.n	8006fa0 <__svfscanf_r+0x558>
 8006f7c:	686a      	ldr	r2, [r5, #4]
 8006f7e:	3401      	adds	r4, #1
 8006f80:	3a01      	subs	r2, #1
 8006f82:	3301      	adds	r3, #1
 8006f84:	42b4      	cmp	r4, r6
 8006f86:	606a      	str	r2, [r5, #4]
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	d009      	beq.n	8006fa0 <__svfscanf_r+0x558>
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	dced      	bgt.n	8006f6c <__svfscanf_r+0x524>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4648      	mov	r0, r9
 8006f94:	f002 fbac 	bl	80096f0 <__srefill_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0e7      	beq.n	8006f6c <__svfscanf_r+0x524>
 8006f9c:	e000      	b.n	8006fa0 <__svfscanf_r+0x558>
 8006f9e:	4654      	mov	r4, sl
 8006fa0:	44a0      	add	r8, r4
 8006fa2:	e569      	b.n	8006a78 <__svfscanf_r+0x30>
 8006fa4:	1d3c      	adds	r4, r7, #4
 8006fa6:	683f      	ldr	r7, [r7, #0]
 8006fa8:	443e      	add	r6, r7
 8006faa:	46ba      	mov	sl, r7
 8006fac:	6829      	ldr	r1, [r5, #0]
 8006fae:	4a65      	ldr	r2, [pc, #404]	; (8007144 <__svfscanf_r+0x6fc>)
 8006fb0:	780b      	ldrb	r3, [r1, #0]
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	071b      	lsls	r3, r3, #28
 8006fba:	d412      	bmi.n	8006fe2 <__svfscanf_r+0x59a>
 8006fbc:	686b      	ldr	r3, [r5, #4]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	606b      	str	r3, [r5, #4]
 8006fc2:	1c4b      	adds	r3, r1, #1
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	780b      	ldrb	r3, [r1, #0]
 8006fc8:	f80a 3b01 	strb.w	r3, [sl], #1
 8006fcc:	4556      	cmp	r6, sl
 8006fce:	d009      	beq.n	8006fe4 <__svfscanf_r+0x59c>
 8006fd0:	686b      	ldr	r3, [r5, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	dcea      	bgt.n	8006fac <__svfscanf_r+0x564>
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4648      	mov	r0, r9
 8006fda:	f002 fb89 	bl	80096f0 <__srefill_r>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d0e4      	beq.n	8006fac <__svfscanf_r+0x564>
 8006fe2:	4656      	mov	r6, sl
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	7033      	strb	r3, [r6, #0]
 8006fe8:	1bf6      	subs	r6, r6, r7
 8006fea:	44b0      	add	r8, r6
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	4627      	mov	r7, r4
 8006ff4:	e540      	b.n	8006a78 <__svfscanf_r+0x30>
 8006ff6:	1e73      	subs	r3, r6, #1
 8006ff8:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006ffc:	bf88      	it	hi
 8006ffe:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8007002:	4a51      	ldr	r2, [pc, #324]	; (8007148 <__svfscanf_r+0x700>)
 8007004:	bf8a      	itet	hi
 8007006:	eb06 030c 	addhi.w	r3, r6, ip
 800700a:	2300      	movls	r3, #0
 800700c:	f240 165d 	movwhi	r6, #349	; 0x15d
 8007010:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8007014:	f04f 0b00 	mov.w	fp, #0
 8007018:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800701c:	f8d5 c000 	ldr.w	ip, [r5]
 8007020:	f89c 1000 	ldrb.w	r1, [ip]
 8007024:	2939      	cmp	r1, #57	; 0x39
 8007026:	d809      	bhi.n	800703c <__svfscanf_r+0x5f4>
 8007028:	2938      	cmp	r1, #56	; 0x38
 800702a:	d231      	bcs.n	8007090 <__svfscanf_r+0x648>
 800702c:	2930      	cmp	r1, #48	; 0x30
 800702e:	d015      	beq.n	800705c <__svfscanf_r+0x614>
 8007030:	d829      	bhi.n	8007086 <__svfscanf_r+0x63e>
 8007032:	292b      	cmp	r1, #43	; 0x2b
 8007034:	d038      	beq.n	80070a8 <__svfscanf_r+0x660>
 8007036:	292d      	cmp	r1, #45	; 0x2d
 8007038:	d036      	beq.n	80070a8 <__svfscanf_r+0x660>
 800703a:	e05d      	b.n	80070f8 <__svfscanf_r+0x6b0>
 800703c:	2958      	cmp	r1, #88	; 0x58
 800703e:	d038      	beq.n	80070b2 <__svfscanf_r+0x66a>
 8007040:	d805      	bhi.n	800704e <__svfscanf_r+0x606>
 8007042:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 8007046:	f1be 0f05 	cmp.w	lr, #5
 800704a:	d927      	bls.n	800709c <__svfscanf_r+0x654>
 800704c:	e054      	b.n	80070f8 <__svfscanf_r+0x6b0>
 800704e:	2961      	cmp	r1, #97	; 0x61
 8007050:	d352      	bcc.n	80070f8 <__svfscanf_r+0x6b0>
 8007052:	2966      	cmp	r1, #102	; 0x66
 8007054:	d922      	bls.n	800709c <__svfscanf_r+0x654>
 8007056:	2978      	cmp	r1, #120	; 0x78
 8007058:	d02b      	beq.n	80070b2 <__svfscanf_r+0x66a>
 800705a:	e04d      	b.n	80070f8 <__svfscanf_r+0x6b0>
 800705c:	0520      	lsls	r0, r4, #20
 800705e:	d533      	bpl.n	80070c8 <__svfscanf_r+0x680>
 8007060:	9804      	ldr	r0, [sp, #16]
 8007062:	b918      	cbnz	r0, 800706c <__svfscanf_r+0x624>
 8007064:	2008      	movs	r0, #8
 8007066:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800706a:	9004      	str	r0, [sp, #16]
 800706c:	0560      	lsls	r0, r4, #21
 800706e:	d502      	bpl.n	8007076 <__svfscanf_r+0x62e>
 8007070:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 8007074:	e028      	b.n	80070c8 <__svfscanf_r+0x680>
 8007076:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 800707a:	b10b      	cbz	r3, 8007080 <__svfscanf_r+0x638>
 800707c:	3b01      	subs	r3, #1
 800707e:	3601      	adds	r6, #1
 8007080:	f10b 0b01 	add.w	fp, fp, #1
 8007084:	e024      	b.n	80070d0 <__svfscanf_r+0x688>
 8007086:	9804      	ldr	r0, [sp, #16]
 8007088:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 800708c:	9004      	str	r0, [sp, #16]
 800708e:	e008      	b.n	80070a2 <__svfscanf_r+0x65a>
 8007090:	9804      	ldr	r0, [sp, #16]
 8007092:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8007096:	9004      	str	r0, [sp, #16]
 8007098:	2808      	cmp	r0, #8
 800709a:	e001      	b.n	80070a0 <__svfscanf_r+0x658>
 800709c:	9804      	ldr	r0, [sp, #16]
 800709e:	280a      	cmp	r0, #10
 80070a0:	dd2a      	ble.n	80070f8 <__svfscanf_r+0x6b0>
 80070a2:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 80070a6:	e00f      	b.n	80070c8 <__svfscanf_r+0x680>
 80070a8:	0620      	lsls	r0, r4, #24
 80070aa:	d525      	bpl.n	80070f8 <__svfscanf_r+0x6b0>
 80070ac:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80070b0:	e00a      	b.n	80070c8 <__svfscanf_r+0x680>
 80070b2:	f404 6ec0 	and.w	lr, r4, #1536	; 0x600
 80070b6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 80070ba:	d11d      	bne.n	80070f8 <__svfscanf_r+0x6b0>
 80070bc:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 80070c0:	2010      	movs	r0, #16
 80070c2:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 80070c6:	9004      	str	r0, [sp, #16]
 80070c8:	f88a 1000 	strb.w	r1, [sl]
 80070cc:	f10a 0a01 	add.w	sl, sl, #1
 80070d0:	6869      	ldr	r1, [r5, #4]
 80070d2:	3901      	subs	r1, #1
 80070d4:	2900      	cmp	r1, #0
 80070d6:	6069      	str	r1, [r5, #4]
 80070d8:	dd03      	ble.n	80070e2 <__svfscanf_r+0x69a>
 80070da:	f10c 0001 	add.w	r0, ip, #1
 80070de:	6028      	str	r0, [r5, #0]
 80070e0:	e008      	b.n	80070f4 <__svfscanf_r+0x6ac>
 80070e2:	4629      	mov	r1, r5
 80070e4:	4648      	mov	r0, r9
 80070e6:	9208      	str	r2, [sp, #32]
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	f002 fb01 	bl	80096f0 <__srefill_r>
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	9a08      	ldr	r2, [sp, #32]
 80070f2:	b908      	cbnz	r0, 80070f8 <__svfscanf_r+0x6b0>
 80070f4:	3e01      	subs	r6, #1
 80070f6:	d191      	bne.n	800701c <__svfscanf_r+0x5d4>
 80070f8:	05e3      	lsls	r3, r4, #23
 80070fa:	d50f      	bpl.n	800711c <__svfscanf_r+0x6d4>
 80070fc:	ab52      	add	r3, sp, #328	; 0x148
 80070fe:	459a      	cmp	sl, r3
 8007100:	d908      	bls.n	8007114 <__svfscanf_r+0x6cc>
 8007102:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8007106:	462a      	mov	r2, r5
 8007108:	4648      	mov	r0, r9
 800710a:	f004 fcaf 	bl	800ba6c <_ungetc_r>
 800710e:	f10a 36ff 	add.w	r6, sl, #4294967295
 8007112:	46b2      	mov	sl, r6
 8007114:	ab52      	add	r3, sp, #328	; 0x148
 8007116:	459a      	cmp	sl, r3
 8007118:	f000 81f5 	beq.w	8007506 <__svfscanf_r+0xabe>
 800711c:	f014 0210 	ands.w	r2, r4, #16
 8007120:	d130      	bne.n	8007184 <__svfscanf_r+0x73c>
 8007122:	9b04      	ldr	r3, [sp, #16]
 8007124:	9e05      	ldr	r6, [sp, #20]
 8007126:	f88a 2000 	strb.w	r2, [sl]
 800712a:	a952      	add	r1, sp, #328	; 0x148
 800712c:	4648      	mov	r0, r9
 800712e:	47b0      	blx	r6
 8007130:	f014 0f20 	tst.w	r4, #32
 8007134:	f107 0304 	add.w	r3, r7, #4
 8007138:	d11e      	bne.n	8007178 <__svfscanf_r+0x730>
 800713a:	0766      	lsls	r6, r4, #29
 800713c:	d506      	bpl.n	800714c <__svfscanf_r+0x704>
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	8010      	strh	r0, [r2, #0]
 8007142:	e01b      	b.n	800717c <__svfscanf_r+0x734>
 8007144:	20000158 	.word	0x20000158
 8007148:	0800cdfe 	.word	0x0800cdfe
 800714c:	f014 0201 	ands.w	r2, r4, #1
 8007150:	d112      	bne.n	8007178 <__svfscanf_r+0x730>
 8007152:	07a1      	lsls	r1, r4, #30
 8007154:	d510      	bpl.n	8007178 <__svfscanf_r+0x730>
 8007156:	4bac      	ldr	r3, [pc, #688]	; (8007408 <__svfscanf_r+0x9c0>)
 8007158:	9905      	ldr	r1, [sp, #20]
 800715a:	4299      	cmp	r1, r3
 800715c:	4648      	mov	r0, r9
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	a952      	add	r1, sp, #328	; 0x148
 8007162:	d102      	bne.n	800716a <__svfscanf_r+0x722>
 8007164:	f003 fbd8 	bl	800a918 <_strtoull_r>
 8007168:	e001      	b.n	800716e <__svfscanf_r+0x726>
 800716a:	f003 faa7 	bl	800a6bc <_strtoll_r>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	3704      	adds	r7, #4
 8007172:	e9c3 0100 	strd	r0, r1, [r3]
 8007176:	e002      	b.n	800717e <__svfscanf_r+0x736>
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	461f      	mov	r7, r3
 800717e:	9b03      	ldr	r3, [sp, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	ab52      	add	r3, sp, #328	; 0x148
 8007186:	ebc3 0a0a 	rsb	sl, r3, sl
 800718a:	44da      	add	sl, fp
 800718c:	44d0      	add	r8, sl
 800718e:	e473      	b.n	8006a78 <__svfscanf_r+0x30>
 8007190:	4648      	mov	r0, r9
 8007192:	f001 fbd1 	bl	8008938 <_localeconv_r>
 8007196:	6803      	ldr	r3, [r0, #0]
 8007198:	930b      	str	r3, [sp, #44]	; 0x2c
 800719a:	1e73      	subs	r3, r6, #1
 800719c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80071a0:	bf88      	it	hi
 80071a2:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	bf8b      	itete	hi
 80071ac:	eb06 030c 	addhi.w	r3, r6, ip
 80071b0:	2300      	movls	r3, #0
 80071b2:	9307      	strhi	r3, [sp, #28]
 80071b4:	9307      	strls	r3, [sp, #28]
 80071b6:	bf88      	it	hi
 80071b8:	f240 165d 	movwhi	r6, #349	; 0x15d
 80071bc:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
 80071c0:	4652      	mov	r2, sl
 80071c2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80071c6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80071ca:	4653      	mov	r3, sl
 80071cc:	f8cd a020 	str.w	sl, [sp, #32]
 80071d0:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80071d4:	f8d5 c000 	ldr.w	ip, [r5]
 80071d8:	f89c 1000 	ldrb.w	r1, [ip]
 80071dc:	294e      	cmp	r1, #78	; 0x4e
 80071de:	d048      	beq.n	8007272 <__svfscanf_r+0x82a>
 80071e0:	d815      	bhi.n	800720e <__svfscanf_r+0x7c6>
 80071e2:	2939      	cmp	r1, #57	; 0x39
 80071e4:	d809      	bhi.n	80071fa <__svfscanf_r+0x7b2>
 80071e6:	2931      	cmp	r1, #49	; 0x31
 80071e8:	d236      	bcs.n	8007258 <__svfscanf_r+0x810>
 80071ea:	292d      	cmp	r1, #45	; 0x2d
 80071ec:	d03b      	beq.n	8007266 <__svfscanf_r+0x81e>
 80071ee:	2930      	cmp	r1, #48	; 0x30
 80071f0:	d026      	beq.n	8007240 <__svfscanf_r+0x7f8>
 80071f2:	292b      	cmp	r1, #43	; 0x2b
 80071f4:	f040 8097 	bne.w	8007326 <__svfscanf_r+0x8de>
 80071f8:	e035      	b.n	8007266 <__svfscanf_r+0x81e>
 80071fa:	2945      	cmp	r1, #69	; 0x45
 80071fc:	d07c      	beq.n	80072f8 <__svfscanf_r+0x8b0>
 80071fe:	d802      	bhi.n	8007206 <__svfscanf_r+0x7be>
 8007200:	2941      	cmp	r1, #65	; 0x41
 8007202:	d049      	beq.n	8007298 <__svfscanf_r+0x850>
 8007204:	e08f      	b.n	8007326 <__svfscanf_r+0x8de>
 8007206:	2946      	cmp	r1, #70	; 0x46
 8007208:	d064      	beq.n	80072d4 <__svfscanf_r+0x88c>
 800720a:	2949      	cmp	r1, #73	; 0x49
 800720c:	e011      	b.n	8007232 <__svfscanf_r+0x7ea>
 800720e:	2966      	cmp	r1, #102	; 0x66
 8007210:	d060      	beq.n	80072d4 <__svfscanf_r+0x88c>
 8007212:	d80a      	bhi.n	800722a <__svfscanf_r+0x7e2>
 8007214:	2959      	cmp	r1, #89	; 0x59
 8007216:	d069      	beq.n	80072ec <__svfscanf_r+0x8a4>
 8007218:	d802      	bhi.n	8007220 <__svfscanf_r+0x7d8>
 800721a:	2954      	cmp	r1, #84	; 0x54
 800721c:	d060      	beq.n	80072e0 <__svfscanf_r+0x898>
 800721e:	e082      	b.n	8007326 <__svfscanf_r+0x8de>
 8007220:	2961      	cmp	r1, #97	; 0x61
 8007222:	d039      	beq.n	8007298 <__svfscanf_r+0x850>
 8007224:	2965      	cmp	r1, #101	; 0x65
 8007226:	d067      	beq.n	80072f8 <__svfscanf_r+0x8b0>
 8007228:	e07d      	b.n	8007326 <__svfscanf_r+0x8de>
 800722a:	296e      	cmp	r1, #110	; 0x6e
 800722c:	d021      	beq.n	8007272 <__svfscanf_r+0x82a>
 800722e:	d802      	bhi.n	8007236 <__svfscanf_r+0x7ee>
 8007230:	2969      	cmp	r1, #105	; 0x69
 8007232:	d035      	beq.n	80072a0 <__svfscanf_r+0x858>
 8007234:	e077      	b.n	8007326 <__svfscanf_r+0x8de>
 8007236:	2974      	cmp	r1, #116	; 0x74
 8007238:	d052      	beq.n	80072e0 <__svfscanf_r+0x898>
 800723a:	2979      	cmp	r1, #121	; 0x79
 800723c:	d056      	beq.n	80072ec <__svfscanf_r+0x8a4>
 800723e:	e072      	b.n	8007326 <__svfscanf_r+0x8de>
 8007240:	05e0      	lsls	r0, r4, #23
 8007242:	d509      	bpl.n	8007258 <__svfscanf_r+0x810>
 8007244:	9907      	ldr	r1, [sp, #28]
 8007246:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800724a:	3301      	adds	r3, #1
 800724c:	2900      	cmp	r1, #0
 800724e:	d07a      	beq.n	8007346 <__svfscanf_r+0x8fe>
 8007250:	3901      	subs	r1, #1
 8007252:	9107      	str	r1, [sp, #28]
 8007254:	3601      	adds	r6, #1
 8007256:	e076      	b.n	8007346 <__svfscanf_r+0x8fe>
 8007258:	eb12 0f0a 	cmn.w	r2, sl
 800725c:	f040 808c 	bne.w	8007378 <__svfscanf_r+0x930>
 8007260:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
 8007264:	e06b      	b.n	800733e <__svfscanf_r+0x8f6>
 8007266:	0620      	lsls	r0, r4, #24
 8007268:	f140 8086 	bpl.w	8007378 <__svfscanf_r+0x930>
 800726c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8007270:	e065      	b.n	800733e <__svfscanf_r+0x8f6>
 8007272:	b94a      	cbnz	r2, 8007288 <__svfscanf_r+0x840>
 8007274:	b953      	cbnz	r3, 800728c <__svfscanf_r+0x844>
 8007276:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 800727a:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 800727e:	d105      	bne.n	800728c <__svfscanf_r+0x844>
 8007280:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8007284:	2201      	movs	r2, #1
 8007286:	e05a      	b.n	800733e <__svfscanf_r+0x8f6>
 8007288:	2a02      	cmp	r2, #2
 800728a:	d057      	beq.n	800733c <__svfscanf_r+0x8f4>
 800728c:	f1ba 0f01 	cmp.w	sl, #1
 8007290:	d01b      	beq.n	80072ca <__svfscanf_r+0x882>
 8007292:	f1ba 0f04 	cmp.w	sl, #4
 8007296:	e017      	b.n	80072c8 <__svfscanf_r+0x880>
 8007298:	2a01      	cmp	r2, #1
 800729a:	d16d      	bne.n	8007378 <__svfscanf_r+0x930>
 800729c:	2202      	movs	r2, #2
 800729e:	e04e      	b.n	800733e <__svfscanf_r+0x8f6>
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	d10b      	bne.n	80072be <__svfscanf_r+0x876>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d167      	bne.n	800737a <__svfscanf_r+0x932>
 80072aa:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 80072ae:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 80072b2:	d164      	bne.n	800737e <__svfscanf_r+0x936>
 80072b4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 80072b8:	f04f 0a01 	mov.w	sl, #1
 80072bc:	e03f      	b.n	800733e <__svfscanf_r+0x8f6>
 80072be:	f1ba 0f03 	cmp.w	sl, #3
 80072c2:	d002      	beq.n	80072ca <__svfscanf_r+0x882>
 80072c4:	f1ba 0f05 	cmp.w	sl, #5
 80072c8:	d156      	bne.n	8007378 <__svfscanf_r+0x930>
 80072ca:	f10a 0a01 	add.w	sl, sl, #1
 80072ce:	fa5f fa8a 	uxtb.w	sl, sl
 80072d2:	e034      	b.n	800733e <__svfscanf_r+0x8f6>
 80072d4:	f1ba 0f02 	cmp.w	sl, #2
 80072d8:	d14e      	bne.n	8007378 <__svfscanf_r+0x930>
 80072da:	f04f 0a03 	mov.w	sl, #3
 80072de:	e02e      	b.n	800733e <__svfscanf_r+0x8f6>
 80072e0:	f1ba 0f06 	cmp.w	sl, #6
 80072e4:	d148      	bne.n	8007378 <__svfscanf_r+0x930>
 80072e6:	f04f 0a07 	mov.w	sl, #7
 80072ea:	e028      	b.n	800733e <__svfscanf_r+0x8f6>
 80072ec:	f1ba 0f07 	cmp.w	sl, #7
 80072f0:	d142      	bne.n	8007378 <__svfscanf_r+0x930>
 80072f2:	f04f 0a08 	mov.w	sl, #8
 80072f6:	e022      	b.n	800733e <__svfscanf_r+0x8f6>
 80072f8:	f404 6ea0 	and.w	lr, r4, #1280	; 0x500
 80072fc:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8007300:	d003      	beq.n	800730a <__svfscanf_r+0x8c2>
 8007302:	0560      	lsls	r0, r4, #21
 8007304:	d538      	bpl.n	8007378 <__svfscanf_r+0x930>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d039      	beq.n	800737e <__svfscanf_r+0x936>
 800730a:	05a0      	lsls	r0, r4, #22
 800730c:	bf5e      	ittt	pl
 800730e:	9808      	ldrpl	r0, [sp, #32]
 8007310:	f8cd b028 	strpl.w	fp, [sp, #40]	; 0x28
 8007314:	1a1b      	subpl	r3, r3, r0
 8007316:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 800731a:	bf58      	it	pl
 800731c:	9309      	strpl	r3, [sp, #36]	; 0x24
 800731e:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
 8007322:	2300      	movs	r3, #0
 8007324:	e00b      	b.n	800733e <__svfscanf_r+0x8f6>
 8007326:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007328:	f890 e000 	ldrb.w	lr, [r0]
 800732c:	4571      	cmp	r1, lr
 800732e:	d123      	bne.n	8007378 <__svfscanf_r+0x930>
 8007330:	05a0      	lsls	r0, r4, #22
 8007332:	d521      	bpl.n	8007378 <__svfscanf_r+0x930>
 8007334:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 8007338:	9308      	str	r3, [sp, #32]
 800733a:	e000      	b.n	800733e <__svfscanf_r+0x8f6>
 800733c:	2203      	movs	r2, #3
 800733e:	f88b 1000 	strb.w	r1, [fp]
 8007342:	f10b 0b01 	add.w	fp, fp, #1
 8007346:	6869      	ldr	r1, [r5, #4]
 8007348:	3901      	subs	r1, #1
 800734a:	2900      	cmp	r1, #0
 800734c:	f106 36ff 	add.w	r6, r6, #4294967295
 8007350:	f108 0801 	add.w	r8, r8, #1
 8007354:	6069      	str	r1, [r5, #4]
 8007356:	dd03      	ble.n	8007360 <__svfscanf_r+0x918>
 8007358:	f10c 0001 	add.w	r0, ip, #1
 800735c:	6028      	str	r0, [r5, #0]
 800735e:	e008      	b.n	8007372 <__svfscanf_r+0x92a>
 8007360:	4629      	mov	r1, r5
 8007362:	4648      	mov	r0, r9
 8007364:	920d      	str	r2, [sp, #52]	; 0x34
 8007366:	930c      	str	r3, [sp, #48]	; 0x30
 8007368:	f002 f9c2 	bl	80096f0 <__srefill_r>
 800736c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800736e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007370:	b910      	cbnz	r0, 8007378 <__svfscanf_r+0x930>
 8007372:	2e00      	cmp	r6, #0
 8007374:	f47f af2e 	bne.w	80071d4 <__svfscanf_r+0x78c>
 8007378:	b10b      	cbz	r3, 800737e <__svfscanf_r+0x936>
 800737a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800737e:	3a01      	subs	r2, #1
 8007380:	2a01      	cmp	r2, #1
 8007382:	d80a      	bhi.n	800739a <__svfscanf_r+0x952>
 8007384:	ac52      	add	r4, sp, #328	; 0x148
 8007386:	45a3      	cmp	fp, r4
 8007388:	f240 80bd 	bls.w	8007506 <__svfscanf_r+0xabe>
 800738c:	462a      	mov	r2, r5
 800738e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007392:	4648      	mov	r0, r9
 8007394:	f004 fb6a 	bl	800ba6c <_ungetc_r>
 8007398:	e7f5      	b.n	8007386 <__svfscanf_r+0x93e>
 800739a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800739e:	2a06      	cmp	r2, #6
 80073a0:	d822      	bhi.n	80073e8 <__svfscanf_r+0x9a0>
 80073a2:	f1ba 0f02 	cmp.w	sl, #2
 80073a6:	d801      	bhi.n	80073ac <__svfscanf_r+0x964>
 80073a8:	ac52      	add	r4, sp, #328	; 0x148
 80073aa:	e013      	b.n	80073d4 <__svfscanf_r+0x98c>
 80073ac:	f1aa 0a03 	sub.w	sl, sl, #3
 80073b0:	fa5f fa8a 	uxtb.w	sl, sl
 80073b4:	ebca 060b 	rsb	r6, sl, fp
 80073b8:	45b3      	cmp	fp, r6
 80073ba:	d008      	beq.n	80073ce <__svfscanf_r+0x986>
 80073bc:	462a      	mov	r2, r5
 80073be:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	4648      	mov	r0, r9
 80073c6:	f004 fb51 	bl	800ba6c <_ungetc_r>
 80073ca:	9b07      	ldr	r3, [sp, #28]
 80073cc:	e7f4      	b.n	80073b8 <__svfscanf_r+0x970>
 80073ce:	ebca 0808 	rsb	r8, sl, r8
 80073d2:	e009      	b.n	80073e8 <__svfscanf_r+0x9a0>
 80073d4:	45a3      	cmp	fp, r4
 80073d6:	f240 8096 	bls.w	8007506 <__svfscanf_r+0xabe>
 80073da:	462a      	mov	r2, r5
 80073dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073e0:	4648      	mov	r0, r9
 80073e2:	f004 fb43 	bl	800ba6c <_ungetc_r>
 80073e6:	e7f5      	b.n	80073d4 <__svfscanf_r+0x98c>
 80073e8:	05e1      	lsls	r1, r4, #23
 80073ea:	d52d      	bpl.n	8007448 <__svfscanf_r+0xa00>
 80073ec:	0562      	lsls	r2, r4, #21
 80073ee:	d50d      	bpl.n	800740c <__svfscanf_r+0x9c4>
 80073f0:	ac52      	add	r4, sp, #328	; 0x148
 80073f2:	45a3      	cmp	fp, r4
 80073f4:	f240 8087 	bls.w	8007506 <__svfscanf_r+0xabe>
 80073f8:	462a      	mov	r2, r5
 80073fa:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073fe:	4648      	mov	r0, r9
 8007400:	f004 fb34 	bl	800ba6c <_ungetc_r>
 8007404:	e7f5      	b.n	80073f2 <__svfscanf_r+0x9aa>
 8007406:	bf00      	nop
 8007408:	0800a81d 	.word	0x0800a81d
 800740c:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
 8007410:	2965      	cmp	r1, #101	; 0x65
 8007412:	f10b 36ff 	add.w	r6, fp, #4294967295
 8007416:	f108 3aff 	add.w	sl, r8, #4294967295
 800741a:	d00d      	beq.n	8007438 <__svfscanf_r+0x9f0>
 800741c:	2945      	cmp	r1, #69	; 0x45
 800741e:	d00b      	beq.n	8007438 <__svfscanf_r+0x9f0>
 8007420:	462a      	mov	r2, r5
 8007422:	4648      	mov	r0, r9
 8007424:	9307      	str	r3, [sp, #28]
 8007426:	f004 fb21 	bl	800ba6c <_ungetc_r>
 800742a:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
 800742e:	9b07      	ldr	r3, [sp, #28]
 8007430:	f1ab 0602 	sub.w	r6, fp, #2
 8007434:	f1a8 0a02 	sub.w	sl, r8, #2
 8007438:	462a      	mov	r2, r5
 800743a:	4648      	mov	r0, r9
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	f004 fb15 	bl	800ba6c <_ungetc_r>
 8007442:	9b07      	ldr	r3, [sp, #28]
 8007444:	46d0      	mov	r8, sl
 8007446:	46b3      	mov	fp, r6
 8007448:	f014 0210 	ands.w	r2, r4, #16
 800744c:	f47f ab14 	bne.w	8006a78 <__svfscanf_r+0x30>
 8007450:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
 8007454:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007458:	f88b 2000 	strb.w	r2, [fp]
 800745c:	d104      	bne.n	8007468 <__svfscanf_r+0xa20>
 800745e:	9a08      	ldr	r2, [sp, #32]
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	425a      	negs	r2, r3
 8007464:	b963      	cbnz	r3, 8007480 <__svfscanf_r+0xa38>
 8007466:	e015      	b.n	8007494 <__svfscanf_r+0xa4c>
 8007468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746a:	b19b      	cbz	r3, 8007494 <__svfscanf_r+0xa4c>
 800746c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800746e:	230a      	movs	r3, #10
 8007470:	3101      	adds	r1, #1
 8007472:	4648      	mov	r0, r9
 8007474:	f003 f89c 	bl	800a5b0 <_strtol_r>
 8007478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800747e:	1ac2      	subs	r2, r0, r3
 8007480:	f20d 239b 	addw	r3, sp, #667	; 0x29b
 8007484:	459b      	cmp	fp, r3
 8007486:	bf28      	it	cs
 8007488:	f20d 2b9a 	addwcs	fp, sp, #666	; 0x29a
 800748c:	4923      	ldr	r1, [pc, #140]	; (800751c <__svfscanf_r+0xad4>)
 800748e:	4658      	mov	r0, fp
 8007490:	f002 fa0a 	bl	80098a8 <sprintf>
 8007494:	2200      	movs	r2, #0
 8007496:	a952      	add	r1, sp, #328	; 0x148
 8007498:	4648      	mov	r0, r9
 800749a:	f002 fa89 	bl	80099b0 <_strtod_r>
 800749e:	f014 0f01 	tst.w	r4, #1
 80074a2:	ec5b ab10 	vmov	sl, fp, d0
 80074a6:	f107 0604 	add.w	r6, r7, #4
 80074aa:	d102      	bne.n	80074b2 <__svfscanf_r+0xa6a>
 80074ac:	f014 0402 	ands.w	r4, r4, #2
 80074b0:	d003      	beq.n	80074ba <__svfscanf_r+0xa72>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	e9c3 ab00 	strd	sl, fp, [r3]
 80074b8:	e014      	b.n	80074e4 <__svfscanf_r+0xa9c>
 80074ba:	ee10 2a10 	vmov	r2, s0
 80074be:	465b      	mov	r3, fp
 80074c0:	ee10 0a10 	vmov	r0, s0
 80074c4:	4659      	mov	r1, fp
 80074c6:	683f      	ldr	r7, [r7, #0]
 80074c8:	f7f9 fb2c 	bl	8000b24 <__aeabi_dcmpun>
 80074cc:	b128      	cbz	r0, 80074da <__svfscanf_r+0xa92>
 80074ce:	4620      	mov	r0, r4
 80074d0:	f002 f9e4 	bl	800989c <nanf>
 80074d4:	ed87 0a00 	vstr	s0, [r7]
 80074d8:	e004      	b.n	80074e4 <__svfscanf_r+0xa9c>
 80074da:	4650      	mov	r0, sl
 80074dc:	4659      	mov	r1, fp
 80074de:	f7f9 fb7f 	bl	8000be0 <__aeabi_d2f>
 80074e2:	6038      	str	r0, [r7, #0]
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	4637      	mov	r7, r6
 80074ec:	f7ff bac4 	b.w	8006a78 <__svfscanf_r+0x30>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	b153      	cbz	r3, 800750a <__svfscanf_r+0xac2>
 80074f4:	89ab      	ldrh	r3, [r5, #12]
 80074f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	bf18      	it	ne
 80074fe:	f04f 33ff 	movne.w	r3, #4294967295
 8007502:	4618      	mov	r0, r3
 8007504:	e006      	b.n	8007514 <__svfscanf_r+0xacc>
 8007506:	9803      	ldr	r0, [sp, #12]
 8007508:	e004      	b.n	8007514 <__svfscanf_r+0xacc>
 800750a:	f04f 30ff 	mov.w	r0, #4294967295
 800750e:	e001      	b.n	8007514 <__svfscanf_r+0xacc>
 8007510:	4682      	mov	sl, r0
 8007512:	e427      	b.n	8006d64 <__svfscanf_r+0x31c>
 8007514:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8007518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751c:	0800cdf8 	.word	0x0800cdf8

08007520 <_vfscanf_r>:
 8007520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007524:	460c      	mov	r4, r1
 8007526:	4616      	mov	r6, r2
 8007528:	461f      	mov	r7, r3
 800752a:	4605      	mov	r5, r0
 800752c:	b118      	cbz	r0, 8007536 <_vfscanf_r+0x16>
 800752e:	6983      	ldr	r3, [r0, #24]
 8007530:	b90b      	cbnz	r3, 8007536 <_vfscanf_r+0x16>
 8007532:	f000 ffc9 	bl	80084c8 <__sinit>
 8007536:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <_vfscanf_r+0x44>)
 8007538:	429c      	cmp	r4, r3
 800753a:	d101      	bne.n	8007540 <_vfscanf_r+0x20>
 800753c:	686c      	ldr	r4, [r5, #4]
 800753e:	e008      	b.n	8007552 <_vfscanf_r+0x32>
 8007540:	4b09      	ldr	r3, [pc, #36]	; (8007568 <_vfscanf_r+0x48>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <_vfscanf_r+0x2a>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e003      	b.n	8007552 <_vfscanf_r+0x32>
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <_vfscanf_r+0x4c>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	463b      	mov	r3, r7
 8007554:	4632      	mov	r2, r6
 8007556:	4621      	mov	r1, r4
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800755e:	f7ff ba73 	b.w	8006a48 <__svfscanf_r>
 8007562:	bf00      	nop
 8007564:	0800cf30 	.word	0x0800cf30
 8007568:	0800cf50 	.word	0x0800cf50
 800756c:	0800cf70 	.word	0x0800cf70

08007570 <__swsetup_r>:
 8007570:	4b32      	ldr	r3, [pc, #200]	; (800763c <__swsetup_r+0xcc>)
 8007572:	b570      	push	{r4, r5, r6, lr}
 8007574:	681d      	ldr	r5, [r3, #0]
 8007576:	4606      	mov	r6, r0
 8007578:	460c      	mov	r4, r1
 800757a:	b125      	cbz	r5, 8007586 <__swsetup_r+0x16>
 800757c:	69ab      	ldr	r3, [r5, #24]
 800757e:	b913      	cbnz	r3, 8007586 <__swsetup_r+0x16>
 8007580:	4628      	mov	r0, r5
 8007582:	f000 ffa1 	bl	80084c8 <__sinit>
 8007586:	4b2e      	ldr	r3, [pc, #184]	; (8007640 <__swsetup_r+0xd0>)
 8007588:	429c      	cmp	r4, r3
 800758a:	d101      	bne.n	8007590 <__swsetup_r+0x20>
 800758c:	686c      	ldr	r4, [r5, #4]
 800758e:	e008      	b.n	80075a2 <__swsetup_r+0x32>
 8007590:	4b2c      	ldr	r3, [pc, #176]	; (8007644 <__swsetup_r+0xd4>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d101      	bne.n	800759a <__swsetup_r+0x2a>
 8007596:	68ac      	ldr	r4, [r5, #8]
 8007598:	e003      	b.n	80075a2 <__swsetup_r+0x32>
 800759a:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <__swsetup_r+0xd8>)
 800759c:	429c      	cmp	r4, r3
 800759e:	bf08      	it	eq
 80075a0:	68ec      	ldreq	r4, [r5, #12]
 80075a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	0715      	lsls	r5, r2, #28
 80075aa:	d41d      	bmi.n	80075e8 <__swsetup_r+0x78>
 80075ac:	06d0      	lsls	r0, r2, #27
 80075ae:	d402      	bmi.n	80075b6 <__swsetup_r+0x46>
 80075b0:	2209      	movs	r2, #9
 80075b2:	6032      	str	r2, [r6, #0]
 80075b4:	e03a      	b.n	800762c <__swsetup_r+0xbc>
 80075b6:	0751      	lsls	r1, r2, #29
 80075b8:	d512      	bpl.n	80075e0 <__swsetup_r+0x70>
 80075ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075bc:	b141      	cbz	r1, 80075d0 <__swsetup_r+0x60>
 80075be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d002      	beq.n	80075cc <__swsetup_r+0x5c>
 80075c6:	4630      	mov	r0, r6
 80075c8:	f001 f8a6 	bl	8008718 <_free_r>
 80075cc:	2300      	movs	r3, #0
 80075ce:	6363      	str	r3, [r4, #52]	; 0x34
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	2300      	movs	r3, #0
 80075da:	6063      	str	r3, [r4, #4]
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	f043 0308 	orr.w	r3, r3, #8
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	b94b      	cbnz	r3, 8007600 <__swsetup_r+0x90>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f6:	d003      	beq.n	8007600 <__swsetup_r+0x90>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4630      	mov	r0, r6
 80075fc:	f001 f9cc 	bl	8008998 <__smakebuf_r>
 8007600:	89a2      	ldrh	r2, [r4, #12]
 8007602:	f012 0301 	ands.w	r3, r2, #1
 8007606:	d005      	beq.n	8007614 <__swsetup_r+0xa4>
 8007608:	2300      	movs	r3, #0
 800760a:	60a3      	str	r3, [r4, #8]
 800760c:	6963      	ldr	r3, [r4, #20]
 800760e:	425b      	negs	r3, r3
 8007610:	61a3      	str	r3, [r4, #24]
 8007612:	e003      	b.n	800761c <__swsetup_r+0xac>
 8007614:	0792      	lsls	r2, r2, #30
 8007616:	bf58      	it	pl
 8007618:	6963      	ldrpl	r3, [r4, #20]
 800761a:	60a3      	str	r3, [r4, #8]
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	b95b      	cbnz	r3, 8007638 <__swsetup_r+0xc8>
 8007620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007624:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8007628:	b280      	uxth	r0, r0
 800762a:	b130      	cbz	r0, 800763a <__swsetup_r+0xca>
 800762c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	f04f 30ff 	mov.w	r0, #4294967295
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	2000      	movs	r0, #0
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	2000024c 	.word	0x2000024c
 8007640:	0800cf30 	.word	0x0800cf30
 8007644:	0800cf50 	.word	0x0800cf50
 8007648:	0800cf70 	.word	0x0800cf70

0800764c <quorem>:
 800764c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	6903      	ldr	r3, [r0, #16]
 8007652:	690c      	ldr	r4, [r1, #16]
 8007654:	429c      	cmp	r4, r3
 8007656:	4680      	mov	r8, r0
 8007658:	f300 8083 	bgt.w	8007762 <quorem+0x116>
 800765c:	3c01      	subs	r4, #1
 800765e:	f101 0714 	add.w	r7, r1, #20
 8007662:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007666:	f100 0614 	add.w	r6, r0, #20
 800766a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800766e:	eb06 030e 	add.w	r3, r6, lr
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	3501      	adds	r5, #1
 8007676:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800767a:	fbb3 f5f5 	udiv	r5, r3, r5
 800767e:	eb07 090e 	add.w	r9, r7, lr
 8007682:	2d00      	cmp	r5, #0
 8007684:	d039      	beq.n	80076fa <quorem+0xae>
 8007686:	f04f 0a00 	mov.w	sl, #0
 800768a:	4638      	mov	r0, r7
 800768c:	46b4      	mov	ip, r6
 800768e:	46d3      	mov	fp, sl
 8007690:	f850 2b04 	ldr.w	r2, [r0], #4
 8007694:	b293      	uxth	r3, r2
 8007696:	fb05 a303 	mla	r3, r5, r3, sl
 800769a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800769e:	b29b      	uxth	r3, r3
 80076a0:	ebc3 030b 	rsb	r3, r3, fp
 80076a4:	0c12      	lsrs	r2, r2, #16
 80076a6:	f8bc b000 	ldrh.w	fp, [ip]
 80076aa:	fb05 a202 	mla	r2, r5, r2, sl
 80076ae:	fa13 f38b 	uxtah	r3, r3, fp
 80076b2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80076b6:	fa1f fb82 	uxth.w	fp, r2
 80076ba:	f8dc 2000 	ldr.w	r2, [ip]
 80076be:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80076c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076cc:	4581      	cmp	r9, r0
 80076ce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80076d2:	f84c 3b04 	str.w	r3, [ip], #4
 80076d6:	d2db      	bcs.n	8007690 <quorem+0x44>
 80076d8:	f856 300e 	ldr.w	r3, [r6, lr]
 80076dc:	b96b      	cbnz	r3, 80076fa <quorem+0xae>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	429e      	cmp	r6, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	d302      	bcc.n	80076ee <quorem+0xa2>
 80076e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80076ec:	e005      	b.n	80076fa <quorem+0xae>
 80076ee:	6812      	ldr	r2, [r2, #0]
 80076f0:	3b04      	subs	r3, #4
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	d1f8      	bne.n	80076e8 <quorem+0x9c>
 80076f6:	3c01      	subs	r4, #1
 80076f8:	e7f3      	b.n	80076e2 <quorem+0x96>
 80076fa:	4640      	mov	r0, r8
 80076fc:	f001 fe4b 	bl	8009396 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	db2c      	blt.n	800775e <quorem+0x112>
 8007704:	3501      	adds	r5, #1
 8007706:	4630      	mov	r0, r6
 8007708:	f04f 0e00 	mov.w	lr, #0
 800770c:	f857 1b04 	ldr.w	r1, [r7], #4
 8007710:	f8d0 c000 	ldr.w	ip, [r0]
 8007714:	b28a      	uxth	r2, r1
 8007716:	ebc2 030e 	rsb	r3, r2, lr
 800771a:	0c09      	lsrs	r1, r1, #16
 800771c:	fa13 f38c 	uxtah	r3, r3, ip
 8007720:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8007724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007728:	b29b      	uxth	r3, r3
 800772a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772e:	45b9      	cmp	r9, r7
 8007730:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007734:	f840 3b04 	str.w	r3, [r0], #4
 8007738:	d2e8      	bcs.n	800770c <quorem+0xc0>
 800773a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800773e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007742:	b962      	cbnz	r2, 800775e <quorem+0x112>
 8007744:	3b04      	subs	r3, #4
 8007746:	429e      	cmp	r6, r3
 8007748:	461a      	mov	r2, r3
 800774a:	d302      	bcc.n	8007752 <quorem+0x106>
 800774c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007750:	e005      	b.n	800775e <quorem+0x112>
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	3b04      	subs	r3, #4
 8007756:	2a00      	cmp	r2, #0
 8007758:	d1f8      	bne.n	800774c <quorem+0x100>
 800775a:	3c01      	subs	r4, #1
 800775c:	e7f3      	b.n	8007746 <quorem+0xfa>
 800775e:	4628      	mov	r0, r5
 8007760:	e000      	b.n	8007764 <quorem+0x118>
 8007762:	2000      	movs	r0, #0
 8007764:	b003      	add	sp, #12
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	0000      	movs	r0, r0
 800776c:	0000      	movs	r0, r0
	...

08007770 <_dtoa_r>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ec59 8b10 	vmov	r8, r9, d0
 8007778:	b097      	sub	sp, #92	; 0x5c
 800777a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800777c:	9106      	str	r1, [sp, #24]
 800777e:	4682      	mov	sl, r0
 8007780:	9209      	str	r2, [sp, #36]	; 0x24
 8007782:	9310      	str	r3, [sp, #64]	; 0x40
 8007784:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8007786:	e9cd 8900 	strd	r8, r9, [sp]
 800778a:	b945      	cbnz	r5, 800779e <_dtoa_r+0x2e>
 800778c:	2010      	movs	r0, #16
 800778e:	f001 f93f 	bl	8008a10 <malloc>
 8007792:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8007796:	6045      	str	r5, [r0, #4]
 8007798:	6085      	str	r5, [r0, #8]
 800779a:	6005      	str	r5, [r0, #0]
 800779c:	60c5      	str	r5, [r0, #12]
 800779e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80077a2:	6819      	ldr	r1, [r3, #0]
 80077a4:	b159      	cbz	r1, 80077be <_dtoa_r+0x4e>
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	604a      	str	r2, [r1, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	4093      	lsls	r3, r2
 80077ae:	608b      	str	r3, [r1, #8]
 80077b0:	4650      	mov	r0, sl
 80077b2:	f001 fbd9 	bl	8008f68 <_Bfree>
 80077b6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	9b01      	ldr	r3, [sp, #4]
 80077c0:	4a9f      	ldr	r2, [pc, #636]	; (8007a40 <_dtoa_r+0x2d0>)
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfbf      	itttt	lt
 80077c6:	2301      	movlt	r3, #1
 80077c8:	6023      	strlt	r3, [r4, #0]
 80077ca:	9b01      	ldrlt	r3, [sp, #4]
 80077cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077d0:	bfb8      	it	lt
 80077d2:	9301      	strlt	r3, [sp, #4]
 80077d4:	9f01      	ldr	r7, [sp, #4]
 80077d6:	bfa4      	itt	ge
 80077d8:	2300      	movge	r3, #0
 80077da:	6023      	strge	r3, [r4, #0]
 80077dc:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80077e0:	0d1b      	lsrs	r3, r3, #20
 80077e2:	051b      	lsls	r3, r3, #20
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d11d      	bne.n	8007824 <_dtoa_r+0xb4>
 80077e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	b943      	cbnz	r3, 8007806 <_dtoa_r+0x96>
 80077f4:	4a93      	ldr	r2, [pc, #588]	; (8007a44 <_dtoa_r+0x2d4>)
 80077f6:	4b94      	ldr	r3, [pc, #592]	; (8007a48 <_dtoa_r+0x2d8>)
 80077f8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 80077fc:	2800      	cmp	r0, #0
 80077fe:	bf14      	ite	ne
 8007800:	4618      	movne	r0, r3
 8007802:	4610      	moveq	r0, r2
 8007804:	e000      	b.n	8007808 <_dtoa_r+0x98>
 8007806:	4890      	ldr	r0, [pc, #576]	; (8007a48 <_dtoa_r+0x2d8>)
 8007808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 854a 	beq.w	80082a4 <_dtoa_r+0xb34>
 8007810:	78c3      	ldrb	r3, [r0, #3]
 8007812:	b113      	cbz	r3, 800781a <_dtoa_r+0xaa>
 8007814:	f100 0308 	add.w	r3, r0, #8
 8007818:	e000      	b.n	800781c <_dtoa_r+0xac>
 800781a:	1cc3      	adds	r3, r0, #3
 800781c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	f000 bd40 	b.w	80082a4 <_dtoa_r+0xb34>
 8007824:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007828:	2200      	movs	r2, #0
 800782a:	2300      	movs	r3, #0
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f9 f946 	bl	8000ac0 <__aeabi_dcmpeq>
 8007834:	4680      	mov	r8, r0
 8007836:	b158      	cbz	r0, 8007850 <_dtoa_r+0xe0>
 8007838:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800783a:	2301      	movs	r3, #1
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8522 	beq.w	800828a <_dtoa_r+0xb1a>
 8007846:	4881      	ldr	r0, [pc, #516]	; (8007a4c <_dtoa_r+0x2dc>)
 8007848:	6018      	str	r0, [r3, #0]
 800784a:	3801      	subs	r0, #1
 800784c:	f000 bd2a 	b.w	80082a4 <_dtoa_r+0xb34>
 8007850:	aa14      	add	r2, sp, #80	; 0x50
 8007852:	a915      	add	r1, sp, #84	; 0x54
 8007854:	ec45 4b10 	vmov	d0, r4, r5
 8007858:	4650      	mov	r0, sl
 800785a:	f001 fe8c 	bl	8009576 <__d2b>
 800785e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007862:	9002      	str	r0, [sp, #8]
 8007864:	b15e      	cbz	r6, 800787e <_dtoa_r+0x10e>
 8007866:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800786a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800786e:	4620      	mov	r0, r4
 8007870:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007874:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8007878:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800787c:	e01d      	b.n	80078ba <_dtoa_r+0x14a>
 800787e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007880:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007882:	441e      	add	r6, r3
 8007884:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8007888:	2b20      	cmp	r3, #32
 800788a:	dd0a      	ble.n	80078a2 <_dtoa_r+0x132>
 800788c:	9a00      	ldr	r2, [sp, #0]
 800788e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8007892:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007896:	fa22 f000 	lsr.w	r0, r2, r0
 800789a:	fa07 f303 	lsl.w	r3, r7, r3
 800789e:	4318      	orrs	r0, r3
 80078a0:	e004      	b.n	80078ac <_dtoa_r+0x13c>
 80078a2:	f1c3 0020 	rsb	r0, r3, #32
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	fa03 f000 	lsl.w	r0, r3, r0
 80078ac:	f7f8 fe2a 	bl	8000504 <__aeabi_ui2d>
 80078b0:	2301      	movs	r3, #1
 80078b2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80078b6:	3e01      	subs	r6, #1
 80078b8:	9311      	str	r3, [sp, #68]	; 0x44
 80078ba:	2200      	movs	r2, #0
 80078bc:	4b64      	ldr	r3, [pc, #400]	; (8007a50 <_dtoa_r+0x2e0>)
 80078be:	f7f8 fce3 	bl	8000288 <__aeabi_dsub>
 80078c2:	a359      	add	r3, pc, #356	; (adr r3, 8007a28 <_dtoa_r+0x2b8>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f7f8 fe92 	bl	80005f0 <__aeabi_dmul>
 80078cc:	a358      	add	r3, pc, #352	; (adr r3, 8007a30 <_dtoa_r+0x2c0>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f7f8 fcdb 	bl	800028c <__adddf3>
 80078d6:	4604      	mov	r4, r0
 80078d8:	4630      	mov	r0, r6
 80078da:	460d      	mov	r5, r1
 80078dc:	f7f8 fe22 	bl	8000524 <__aeabi_i2d>
 80078e0:	a355      	add	r3, pc, #340	; (adr r3, 8007a38 <_dtoa_r+0x2c8>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fe83 	bl	80005f0 <__aeabi_dmul>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f8 fccb 	bl	800028c <__adddf3>
 80078f6:	4604      	mov	r4, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	f7f9 f929 	bl	8000b50 <__aeabi_d2iz>
 80078fe:	2200      	movs	r2, #0
 8007900:	4683      	mov	fp, r0
 8007902:	2300      	movs	r3, #0
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f9 f8e4 	bl	8000ad4 <__aeabi_dcmplt>
 800790c:	b158      	cbz	r0, 8007926 <_dtoa_r+0x1b6>
 800790e:	4658      	mov	r0, fp
 8007910:	f7f8 fe08 	bl	8000524 <__aeabi_i2d>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	f7f9 f8d0 	bl	8000ac0 <__aeabi_dcmpeq>
 8007920:	b908      	cbnz	r0, 8007926 <_dtoa_r+0x1b6>
 8007922:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007926:	f1bb 0f16 	cmp.w	fp, #22
 800792a:	d80d      	bhi.n	8007948 <_dtoa_r+0x1d8>
 800792c:	4949      	ldr	r1, [pc, #292]	; (8007a54 <_dtoa_r+0x2e4>)
 800792e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800793a:	f7f9 f8e9 	bl	8000b10 <__aeabi_dcmpgt>
 800793e:	b130      	cbz	r0, 800794e <_dtoa_r+0x1de>
 8007940:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <_dtoa_r+0x1da>
 8007948:	2301      	movs	r3, #1
 800794a:	930d      	str	r3, [sp, #52]	; 0x34
 800794c:	e000      	b.n	8007950 <_dtoa_r+0x1e0>
 800794e:	900d      	str	r0, [sp, #52]	; 0x34
 8007950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007952:	1b9e      	subs	r6, r3, r6
 8007954:	1e73      	subs	r3, r6, #1
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	bf43      	ittte	mi
 800795a:	f1c3 0900 	rsbmi	r9, r3, #0
 800795e:	2300      	movmi	r3, #0
 8007960:	9305      	strmi	r3, [sp, #20]
 8007962:	f04f 0900 	movpl.w	r9, #0
 8007966:	f1bb 0f00 	cmp.w	fp, #0
 800796a:	db07      	blt.n	800797c <_dtoa_r+0x20c>
 800796c:	9b05      	ldr	r3, [sp, #20]
 800796e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007972:	445b      	add	r3, fp
 8007974:	9305      	str	r3, [sp, #20]
 8007976:	2300      	movs	r3, #0
 8007978:	9307      	str	r3, [sp, #28]
 800797a:	e006      	b.n	800798a <_dtoa_r+0x21a>
 800797c:	f1cb 0300 	rsb	r3, fp, #0
 8007980:	9307      	str	r3, [sp, #28]
 8007982:	2300      	movs	r3, #0
 8007984:	ebcb 0909 	rsb	r9, fp, r9
 8007988:	930c      	str	r3, [sp, #48]	; 0x30
 800798a:	9b06      	ldr	r3, [sp, #24]
 800798c:	2b09      	cmp	r3, #9
 800798e:	d827      	bhi.n	80079e0 <_dtoa_r+0x270>
 8007990:	2b05      	cmp	r3, #5
 8007992:	bfc4      	itt	gt
 8007994:	3b04      	subgt	r3, #4
 8007996:	9306      	strgt	r3, [sp, #24]
 8007998:	9b06      	ldr	r3, [sp, #24]
 800799a:	f1a3 0302 	sub.w	r3, r3, #2
 800799e:	bfcc      	ite	gt
 80079a0:	2500      	movgt	r5, #0
 80079a2:	2501      	movle	r5, #1
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d820      	bhi.n	80079ea <_dtoa_r+0x27a>
 80079a8:	e8df f003 	tbb	[pc, r3]
 80079ac:	04020e06 	.word	0x04020e06
 80079b0:	2301      	movs	r3, #1
 80079b2:	e002      	b.n	80079ba <_dtoa_r+0x24a>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e008      	b.n	80079ca <_dtoa_r+0x25a>
 80079b8:	2300      	movs	r3, #0
 80079ba:	9308      	str	r3, [sp, #32]
 80079bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd1c      	ble.n	80079fc <_dtoa_r+0x28c>
 80079c2:	9303      	str	r3, [sp, #12]
 80079c4:	4698      	mov	r8, r3
 80079c6:	e01e      	b.n	8007a06 <_dtoa_r+0x296>
 80079c8:	2300      	movs	r3, #0
 80079ca:	9308      	str	r3, [sp, #32]
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	445b      	add	r3, fp
 80079d0:	f103 0801 	add.w	r8, r3, #1
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	4643      	mov	r3, r8
 80079d8:	2b01      	cmp	r3, #1
 80079da:	bfb8      	it	lt
 80079dc:	2301      	movlt	r3, #1
 80079de:	e012      	b.n	8007a06 <_dtoa_r+0x296>
 80079e0:	2501      	movs	r5, #1
 80079e2:	2300      	movs	r3, #0
 80079e4:	9306      	str	r3, [sp, #24]
 80079e6:	9508      	str	r5, [sp, #32]
 80079e8:	e001      	b.n	80079ee <_dtoa_r+0x27e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	9308      	str	r3, [sp, #32]
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295
 80079f2:	9303      	str	r3, [sp, #12]
 80079f4:	4698      	mov	r8, r3
 80079f6:	2200      	movs	r2, #0
 80079f8:	2312      	movs	r3, #18
 80079fa:	e003      	b.n	8007a04 <_dtoa_r+0x294>
 80079fc:	2301      	movs	r3, #1
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	4698      	mov	r8, r3
 8007a02:	461a      	mov	r2, r3
 8007a04:	9209      	str	r2, [sp, #36]	; 0x24
 8007a06:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	6062      	str	r2, [r4, #4]
 8007a0e:	2104      	movs	r1, #4
 8007a10:	f101 0214 	add.w	r2, r1, #20
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d81f      	bhi.n	8007a58 <_dtoa_r+0x2e8>
 8007a18:	6862      	ldr	r2, [r4, #4]
 8007a1a:	3201      	adds	r2, #1
 8007a1c:	6062      	str	r2, [r4, #4]
 8007a1e:	0049      	lsls	r1, r1, #1
 8007a20:	e7f6      	b.n	8007a10 <_dtoa_r+0x2a0>
 8007a22:	bf00      	nop
 8007a24:	f3af 8000 	nop.w
 8007a28:	636f4361 	.word	0x636f4361
 8007a2c:	3fd287a7 	.word	0x3fd287a7
 8007a30:	8b60c8b3 	.word	0x8b60c8b3
 8007a34:	3fc68a28 	.word	0x3fc68a28
 8007a38:	509f79fb 	.word	0x509f79fb
 8007a3c:	3fd34413 	.word	0x3fd34413
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	0800cf21 	.word	0x0800cf21
 8007a48:	0800cf2a 	.word	0x0800cf2a
 8007a4c:	0800cde7 	.word	0x0800cde7
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	0800cfa0 	.word	0x0800cfa0
 8007a58:	6861      	ldr	r1, [r4, #4]
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	f001 fa4f 	bl	8008efe <_Balloc>
 8007a60:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8007a64:	6020      	str	r0, [r4, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	f1b8 0f0e 	cmp.w	r8, #14
 8007a6e:	f200 815d 	bhi.w	8007d2c <_dtoa_r+0x5bc>
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	f000 815a 	beq.w	8007d2c <_dtoa_r+0x5bc>
 8007a78:	ed9d 7b00 	vldr	d7, [sp]
 8007a7c:	f1bb 0f00 	cmp.w	fp, #0
 8007a80:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007a84:	dd31      	ble.n	8007aea <_dtoa_r+0x37a>
 8007a86:	4aa0      	ldr	r2, [pc, #640]	; (8007d08 <_dtoa_r+0x598>)
 8007a88:	f00b 030f 	and.w	r3, fp, #15
 8007a8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a90:	ed93 7b00 	vldr	d7, [r3]
 8007a94:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007a98:	06e2      	lsls	r2, r4, #27
 8007a9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a9e:	d50c      	bpl.n	8007aba <_dtoa_r+0x34a>
 8007aa0:	4b9a      	ldr	r3, [pc, #616]	; (8007d0c <_dtoa_r+0x59c>)
 8007aa2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007aa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aaa:	f7f8 fecb 	bl	8000844 <__aeabi_ddiv>
 8007aae:	f004 040f 	and.w	r4, r4, #15
 8007ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ab6:	2603      	movs	r6, #3
 8007ab8:	e000      	b.n	8007abc <_dtoa_r+0x34c>
 8007aba:	2602      	movs	r6, #2
 8007abc:	4d93      	ldr	r5, [pc, #588]	; (8007d0c <_dtoa_r+0x59c>)
 8007abe:	b16c      	cbz	r4, 8007adc <_dtoa_r+0x36c>
 8007ac0:	07e3      	lsls	r3, r4, #31
 8007ac2:	d508      	bpl.n	8007ad6 <_dtoa_r+0x366>
 8007ac4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007acc:	f7f8 fd90 	bl	80005f0 <__aeabi_dmul>
 8007ad0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	1064      	asrs	r4, r4, #1
 8007ad8:	3508      	adds	r5, #8
 8007ada:	e7f0      	b.n	8007abe <_dtoa_r+0x34e>
 8007adc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ae4:	f7f8 feae 	bl	8000844 <__aeabi_ddiv>
 8007ae8:	e020      	b.n	8007b2c <_dtoa_r+0x3bc>
 8007aea:	f1cb 0400 	rsb	r4, fp, #0
 8007aee:	b304      	cbz	r4, 8007b32 <_dtoa_r+0x3c2>
 8007af0:	4b85      	ldr	r3, [pc, #532]	; (8007d08 <_dtoa_r+0x598>)
 8007af2:	4d86      	ldr	r5, [pc, #536]	; (8007d0c <_dtoa_r+0x59c>)
 8007af4:	f004 020f 	and.w	r2, r4, #15
 8007af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b04:	f7f8 fd74 	bl	80005f0 <__aeabi_dmul>
 8007b08:	e9cd 0100 	strd	r0, r1, [sp]
 8007b0c:	1124      	asrs	r4, r4, #4
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2602      	movs	r6, #2
 8007b12:	b154      	cbz	r4, 8007b2a <_dtoa_r+0x3ba>
 8007b14:	07e7      	lsls	r7, r4, #31
 8007b16:	d505      	bpl.n	8007b24 <_dtoa_r+0x3b4>
 8007b18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b1c:	f7f8 fd68 	bl	80005f0 <__aeabi_dmul>
 8007b20:	3601      	adds	r6, #1
 8007b22:	2301      	movs	r3, #1
 8007b24:	1064      	asrs	r4, r4, #1
 8007b26:	3508      	adds	r5, #8
 8007b28:	e7f3      	b.n	8007b12 <_dtoa_r+0x3a2>
 8007b2a:	b11b      	cbz	r3, 8007b34 <_dtoa_r+0x3c4>
 8007b2c:	e9cd 0100 	strd	r0, r1, [sp]
 8007b30:	e000      	b.n	8007b34 <_dtoa_r+0x3c4>
 8007b32:	2602      	movs	r6, #2
 8007b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b36:	b1eb      	cbz	r3, 8007b74 <_dtoa_r+0x404>
 8007b38:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4b74      	ldr	r3, [pc, #464]	; (8007d10 <_dtoa_r+0x5a0>)
 8007b40:	4620      	mov	r0, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	f7f8 ffc6 	bl	8000ad4 <__aeabi_dcmplt>
 8007b48:	b1a0      	cbz	r0, 8007b74 <_dtoa_r+0x404>
 8007b4a:	f1b8 0f00 	cmp.w	r8, #0
 8007b4e:	d011      	beq.n	8007b74 <_dtoa_r+0x404>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f340 80e6 	ble.w	8007d24 <_dtoa_r+0x5b4>
 8007b58:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b5e:	2200      	movs	r2, #0
 8007b60:	4b6c      	ldr	r3, [pc, #432]	; (8007d14 <_dtoa_r+0x5a4>)
 8007b62:	4620      	mov	r0, r4
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7f8 fd43 	bl	80005f0 <__aeabi_dmul>
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e9cd 0100 	strd	r0, r1, [sp]
 8007b70:	9f03      	ldr	r7, [sp, #12]
 8007b72:	e002      	b.n	8007b7a <_dtoa_r+0x40a>
 8007b74:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007b78:	4647      	mov	r7, r8
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f7f8 fcd2 	bl	8000524 <__aeabi_i2d>
 8007b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b84:	f7f8 fd34 	bl	80005f0 <__aeabi_dmul>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4b63      	ldr	r3, [pc, #396]	; (8007d18 <_dtoa_r+0x5a8>)
 8007b8c:	f7f8 fb7e 	bl	800028c <__adddf3>
 8007b90:	4604      	mov	r4, r0
 8007b92:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007b96:	b9cf      	cbnz	r7, 8007bcc <_dtoa_r+0x45c>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4b60      	ldr	r3, [pc, #384]	; (8007d1c <_dtoa_r+0x5ac>)
 8007b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba0:	f7f8 fb72 	bl	8000288 <__aeabi_dsub>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8007bac:	f7f8 ffb0 	bl	8000b10 <__aeabi_dcmpgt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f040 8241 	bne.w	8008038 <_dtoa_r+0x8c8>
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc0:	f7f8 ff88 	bl	8000ad4 <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 822e 	bne.w	8008026 <_dtoa_r+0x8b6>
 8007bca:	e0ab      	b.n	8007d24 <_dtoa_r+0x5b4>
 8007bcc:	9a08      	ldr	r2, [sp, #32]
 8007bce:	4b4e      	ldr	r3, [pc, #312]	; (8007d08 <_dtoa_r+0x598>)
 8007bd0:	1e79      	subs	r1, r7, #1
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	d04a      	beq.n	8007c6c <_dtoa_r+0x4fc>
 8007bd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	2000      	movs	r0, #0
 8007be0:	494f      	ldr	r1, [pc, #316]	; (8007d20 <_dtoa_r+0x5b0>)
 8007be2:	f7f8 fe2f 	bl	8000844 <__aeabi_ddiv>
 8007be6:	4622      	mov	r2, r4
 8007be8:	462b      	mov	r3, r5
 8007bea:	f7f8 fb4d 	bl	8000288 <__aeabi_dsub>
 8007bee:	9c04      	ldr	r4, [sp, #16]
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	460e      	mov	r6, r1
 8007bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bf8:	f7f8 ffaa 	bl	8000b50 <__aeabi_d2iz>
 8007bfc:	9012      	str	r0, [sp, #72]	; 0x48
 8007bfe:	f7f8 fc91 	bl	8000524 <__aeabi_i2d>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c0a:	f7f8 fb3d 	bl	8000288 <__aeabi_dsub>
 8007c0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c10:	3330      	adds	r3, #48	; 0x30
 8007c12:	f804 3b01 	strb.w	r3, [r4], #1
 8007c16:	462a      	mov	r2, r5
 8007c18:	4633      	mov	r3, r6
 8007c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c1e:	f7f8 ff59 	bl	8000ad4 <__aeabi_dcmplt>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f040 8321 	bne.w	800826a <_dtoa_r+0xafa>
 8007c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	4938      	ldr	r1, [pc, #224]	; (8007d10 <_dtoa_r+0x5a0>)
 8007c30:	f7f8 fb2a 	bl	8000288 <__aeabi_dsub>
 8007c34:	462a      	mov	r2, r5
 8007c36:	4633      	mov	r3, r6
 8007c38:	f7f8 ff4c 	bl	8000ad4 <__aeabi_dcmplt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f040 80d2 	bne.w	8007de6 <_dtoa_r+0x676>
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	1ae3      	subs	r3, r4, r3
 8007c46:	42bb      	cmp	r3, r7
 8007c48:	da6c      	bge.n	8007d24 <_dtoa_r+0x5b4>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <_dtoa_r+0x5a4>)
 8007c4e:	4628      	mov	r0, r5
 8007c50:	4631      	mov	r1, r6
 8007c52:	f7f8 fccd 	bl	80005f0 <__aeabi_dmul>
 8007c56:	2200      	movs	r2, #0
 8007c58:	4605      	mov	r5, r0
 8007c5a:	460e      	mov	r6, r1
 8007c5c:	4b2d      	ldr	r3, [pc, #180]	; (8007d14 <_dtoa_r+0x5a4>)
 8007c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c62:	f7f8 fcc5 	bl	80005f0 <__aeabi_dmul>
 8007c66:	e9cd 0100 	strd	r0, r1, [sp]
 8007c6a:	e7c3      	b.n	8007bf4 <_dtoa_r+0x484>
 8007c6c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007c70:	4622      	mov	r2, r4
 8007c72:	462b      	mov	r3, r5
 8007c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c78:	f7f8 fcba 	bl	80005f0 <__aeabi_dmul>
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007c82:	19dc      	adds	r4, r3, r7
 8007c84:	461d      	mov	r5, r3
 8007c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c8a:	f7f8 ff61 	bl	8000b50 <__aeabi_d2iz>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	f7f8 fc48 	bl	8000524 <__aeabi_i2d>
 8007c94:	3630      	adds	r6, #48	; 0x30
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c9e:	f7f8 faf3 	bl	8000288 <__aeabi_dsub>
 8007ca2:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca6:	42ac      	cmp	r4, r5
 8007ca8:	e9cd 0100 	strd	r0, r1, [sp]
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	d123      	bne.n	8007cfa <_dtoa_r+0x58a>
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <_dtoa_r+0x5b0>)
 8007cb4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007cb8:	f7f8 fae8 	bl	800028c <__adddf3>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cc4:	f7f8 ff24 	bl	8000b10 <__aeabi_dcmpgt>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	f040 808c 	bne.w	8007de6 <_dtoa_r+0x676>
 8007cce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	4912      	ldr	r1, [pc, #72]	; (8007d20 <_dtoa_r+0x5b0>)
 8007cd6:	f7f8 fad7 	bl	8000288 <__aeabi_dsub>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ce2:	f7f8 fef7 	bl	8000ad4 <__aeabi_dcmplt>
 8007ce6:	b1e8      	cbz	r0, 8007d24 <_dtoa_r+0x5b4>
 8007ce8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8007cec:	2b30      	cmp	r3, #48	; 0x30
 8007cee:	f104 32ff 	add.w	r2, r4, #4294967295
 8007cf2:	f040 82ba 	bne.w	800826a <_dtoa_r+0xafa>
 8007cf6:	4614      	mov	r4, r2
 8007cf8:	e7f6      	b.n	8007ce8 <_dtoa_r+0x578>
 8007cfa:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <_dtoa_r+0x5a4>)
 8007cfc:	f7f8 fc78 	bl	80005f0 <__aeabi_dmul>
 8007d00:	e9cd 0100 	strd	r0, r1, [sp]
 8007d04:	e7bf      	b.n	8007c86 <_dtoa_r+0x516>
 8007d06:	bf00      	nop
 8007d08:	0800cfa0 	.word	0x0800cfa0
 8007d0c:	0800d068 	.word	0x0800d068
 8007d10:	3ff00000 	.word	0x3ff00000
 8007d14:	40240000 	.word	0x40240000
 8007d18:	401c0000 	.word	0x401c0000
 8007d1c:	40140000 	.word	0x40140000
 8007d20:	3fe00000 	.word	0x3fe00000
 8007d24:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8007d28:	e88d 0018 	stmia.w	sp, {r3, r4}
 8007d2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	db7c      	blt.n	8007e2c <_dtoa_r+0x6bc>
 8007d32:	f1bb 0f0e 	cmp.w	fp, #14
 8007d36:	dc79      	bgt.n	8007e2c <_dtoa_r+0x6bc>
 8007d38:	4b8f      	ldr	r3, [pc, #572]	; (8007f78 <_dtoa_r+0x808>)
 8007d3a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d3e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da14      	bge.n	8007d72 <_dtoa_r+0x602>
 8007d48:	f1b8 0f00 	cmp.w	r8, #0
 8007d4c:	dc11      	bgt.n	8007d72 <_dtoa_r+0x602>
 8007d4e:	f040 816c 	bne.w	800802a <_dtoa_r+0x8ba>
 8007d52:	2200      	movs	r2, #0
 8007d54:	4b89      	ldr	r3, [pc, #548]	; (8007f7c <_dtoa_r+0x80c>)
 8007d56:	4630      	mov	r0, r6
 8007d58:	4639      	mov	r1, r7
 8007d5a:	f7f8 fc49 	bl	80005f0 <__aeabi_dmul>
 8007d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d62:	f7f8 fecb 	bl	8000afc <__aeabi_dcmpge>
 8007d66:	4645      	mov	r5, r8
 8007d68:	4646      	mov	r6, r8
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f040 815f 	bne.w	800802e <_dtoa_r+0x8be>
 8007d70:	e166      	b.n	8008040 <_dtoa_r+0x8d0>
 8007d72:	9c04      	ldr	r4, [sp, #16]
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d7c:	f7f8 fd62 	bl	8000844 <__aeabi_ddiv>
 8007d80:	f7f8 fee6 	bl	8000b50 <__aeabi_d2iz>
 8007d84:	4605      	mov	r5, r0
 8007d86:	f7f8 fbcd 	bl	8000524 <__aeabi_i2d>
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	f7f8 fc2f 	bl	80005f0 <__aeabi_dmul>
 8007d92:	460b      	mov	r3, r1
 8007d94:	4602      	mov	r2, r0
 8007d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d9a:	f7f8 fa75 	bl	8000288 <__aeabi_dsub>
 8007d9e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8007da2:	f804 eb01 	strb.w	lr, [r4], #1
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	ebc3 0e04 	rsb	lr, r3, r4
 8007dac:	45f0      	cmp	r8, lr
 8007dae:	e9cd 0100 	strd	r0, r1, [sp]
 8007db2:	d12e      	bne.n	8007e12 <_dtoa_r+0x6a2>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	f7f8 fa68 	bl	800028c <__adddf3>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f7f8 fe84 	bl	8000ad4 <__aeabi_dcmplt>
 8007dcc:	b978      	cbnz	r0, 8007dee <_dtoa_r+0x67e>
 8007dce:	4642      	mov	r2, r8
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fe73 	bl	8000ac0 <__aeabi_dcmpeq>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f000 8247 	beq.w	800826e <_dtoa_r+0xafe>
 8007de0:	07e9      	lsls	r1, r5, #31
 8007de2:	d404      	bmi.n	8007dee <_dtoa_r+0x67e>
 8007de4:	e243      	b.n	800826e <_dtoa_r+0xafe>
 8007de6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007dea:	e000      	b.n	8007dee <_dtoa_r+0x67e>
 8007dec:	461c      	mov	r4, r3
 8007dee:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8007df2:	2a39      	cmp	r2, #57	; 0x39
 8007df4:	f104 33ff 	add.w	r3, r4, #4294967295
 8007df8:	d107      	bne.n	8007e0a <_dtoa_r+0x69a>
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d1f5      	bne.n	8007dec <_dtoa_r+0x67c>
 8007e00:	9904      	ldr	r1, [sp, #16]
 8007e02:	2230      	movs	r2, #48	; 0x30
 8007e04:	f10b 0b01 	add.w	fp, fp, #1
 8007e08:	700a      	strb	r2, [r1, #0]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	3201      	adds	r2, #1
 8007e0e:	701a      	strb	r2, [r3, #0]
 8007e10:	e22d      	b.n	800826e <_dtoa_r+0xafe>
 8007e12:	2200      	movs	r2, #0
 8007e14:	4b5a      	ldr	r3, [pc, #360]	; (8007f80 <_dtoa_r+0x810>)
 8007e16:	f7f8 fbeb 	bl	80005f0 <__aeabi_dmul>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8007e22:	f7f8 fe4d 	bl	8000ac0 <__aeabi_dcmpeq>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d0a4      	beq.n	8007d74 <_dtoa_r+0x604>
 8007e2a:	e220      	b.n	800826e <_dtoa_r+0xafe>
 8007e2c:	9a08      	ldr	r2, [sp, #32]
 8007e2e:	2a00      	cmp	r2, #0
 8007e30:	d02d      	beq.n	8007e8e <_dtoa_r+0x71e>
 8007e32:	9a06      	ldr	r2, [sp, #24]
 8007e34:	2a01      	cmp	r2, #1
 8007e36:	dc0a      	bgt.n	8007e4e <_dtoa_r+0x6de>
 8007e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e3a:	b112      	cbz	r2, 8007e42 <_dtoa_r+0x6d2>
 8007e3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e40:	e002      	b.n	8007e48 <_dtoa_r+0x6d8>
 8007e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e44:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e48:	9d07      	ldr	r5, [sp, #28]
 8007e4a:	464c      	mov	r4, r9
 8007e4c:	e015      	b.n	8007e7a <_dtoa_r+0x70a>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	f108 35ff 	add.w	r5, r8, #4294967295
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	bfbf      	itttt	lt
 8007e58:	9b07      	ldrlt	r3, [sp, #28]
 8007e5a:	9507      	strlt	r5, [sp, #28]
 8007e5c:	1aea      	sublt	r2, r5, r3
 8007e5e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007e60:	bfb7      	itett	lt
 8007e62:	189b      	addlt	r3, r3, r2
 8007e64:	1b5d      	subge	r5, r3, r5
 8007e66:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007e68:	2500      	movlt	r5, #0
 8007e6a:	f1b8 0f00 	cmp.w	r8, #0
 8007e6e:	bfb9      	ittee	lt
 8007e70:	ebc8 0409 	rsblt	r4, r8, r9
 8007e74:	2300      	movlt	r3, #0
 8007e76:	464c      	movge	r4, r9
 8007e78:	4643      	movge	r3, r8
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	441a      	add	r2, r3
 8007e80:	4650      	mov	r0, sl
 8007e82:	4499      	add	r9, r3
 8007e84:	9205      	str	r2, [sp, #20]
 8007e86:	f001 f94c 	bl	8009122 <__i2b>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	e002      	b.n	8007e94 <_dtoa_r+0x724>
 8007e8e:	9d07      	ldr	r5, [sp, #28]
 8007e90:	9e08      	ldr	r6, [sp, #32]
 8007e92:	464c      	mov	r4, r9
 8007e94:	b15c      	cbz	r4, 8007eae <_dtoa_r+0x73e>
 8007e96:	9b05      	ldr	r3, [sp, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd08      	ble.n	8007eae <_dtoa_r+0x73e>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	9a05      	ldr	r2, [sp, #20]
 8007ea0:	bfa8      	it	ge
 8007ea2:	4623      	movge	r3, r4
 8007ea4:	ebc3 0909 	rsb	r9, r3, r9
 8007ea8:	1ae4      	subs	r4, r4, r3
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	9b07      	ldr	r3, [sp, #28]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dd1d      	ble.n	8007ef0 <_dtoa_r+0x780>
 8007eb4:	9b08      	ldr	r3, [sp, #32]
 8007eb6:	b1ab      	cbz	r3, 8007ee4 <_dtoa_r+0x774>
 8007eb8:	b185      	cbz	r5, 8007edc <_dtoa_r+0x76c>
 8007eba:	4631      	mov	r1, r6
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f001 f9ca 	bl	8009258 <__pow5mult>
 8007ec4:	9a02      	ldr	r2, [sp, #8]
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	4606      	mov	r6, r0
 8007eca:	4650      	mov	r0, sl
 8007ecc:	f001 f932 	bl	8009134 <__multiply>
 8007ed0:	9902      	ldr	r1, [sp, #8]
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	4650      	mov	r0, sl
 8007ed6:	f001 f847 	bl	8008f68 <_Bfree>
 8007eda:	9702      	str	r7, [sp, #8]
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	1b5a      	subs	r2, r3, r5
 8007ee0:	d006      	beq.n	8007ef0 <_dtoa_r+0x780>
 8007ee2:	e000      	b.n	8007ee6 <_dtoa_r+0x776>
 8007ee4:	9a07      	ldr	r2, [sp, #28]
 8007ee6:	9902      	ldr	r1, [sp, #8]
 8007ee8:	4650      	mov	r0, sl
 8007eea:	f001 f9b5 	bl	8009258 <__pow5mult>
 8007eee:	9002      	str	r0, [sp, #8]
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	f001 f915 	bl	8009122 <__i2b>
 8007ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007efa:	4605      	mov	r5, r0
 8007efc:	b35b      	cbz	r3, 8007f56 <_dtoa_r+0x7e6>
 8007efe:	461a      	mov	r2, r3
 8007f00:	4601      	mov	r1, r0
 8007f02:	4650      	mov	r0, sl
 8007f04:	f001 f9a8 	bl	8009258 <__pow5mult>
 8007f08:	9b06      	ldr	r3, [sp, #24]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	dc18      	bgt.n	8007f42 <_dtoa_r+0x7d2>
 8007f10:	9b00      	ldr	r3, [sp, #0]
 8007f12:	b983      	cbnz	r3, 8007f36 <_dtoa_r+0x7c6>
 8007f14:	9b01      	ldr	r3, [sp, #4]
 8007f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f1a:	b973      	cbnz	r3, 8007f3a <_dtoa_r+0x7ca>
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007f22:	0d3f      	lsrs	r7, r7, #20
 8007f24:	053f      	lsls	r7, r7, #20
 8007f26:	b14f      	cbz	r7, 8007f3c <_dtoa_r+0x7cc>
 8007f28:	9b05      	ldr	r3, [sp, #20]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f109 0901 	add.w	r9, r9, #1
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	2701      	movs	r7, #1
 8007f34:	e002      	b.n	8007f3c <_dtoa_r+0x7cc>
 8007f36:	2700      	movs	r7, #0
 8007f38:	e000      	b.n	8007f3c <_dtoa_r+0x7cc>
 8007f3a:	9f00      	ldr	r7, [sp, #0]
 8007f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f3e:	b173      	cbz	r3, 8007f5e <_dtoa_r+0x7ee>
 8007f40:	e000      	b.n	8007f44 <_dtoa_r+0x7d4>
 8007f42:	2700      	movs	r7, #0
 8007f44:	692b      	ldr	r3, [r5, #16]
 8007f46:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007f4a:	6918      	ldr	r0, [r3, #16]
 8007f4c:	f001 f89c 	bl	8009088 <__hi0bits>
 8007f50:	f1c0 0020 	rsb	r0, r0, #32
 8007f54:	e004      	b.n	8007f60 <_dtoa_r+0x7f0>
 8007f56:	9b06      	ldr	r3, [sp, #24]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	ddd9      	ble.n	8007f10 <_dtoa_r+0x7a0>
 8007f5c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007f5e:	2001      	movs	r0, #1
 8007f60:	9b05      	ldr	r3, [sp, #20]
 8007f62:	4418      	add	r0, r3
 8007f64:	f010 001f 	ands.w	r0, r0, #31
 8007f68:	d00e      	beq.n	8007f88 <_dtoa_r+0x818>
 8007f6a:	f1c0 0320 	rsb	r3, r0, #32
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	dd08      	ble.n	8007f84 <_dtoa_r+0x814>
 8007f72:	f1c0 001c 	rsb	r0, r0, #28
 8007f76:	e008      	b.n	8007f8a <_dtoa_r+0x81a>
 8007f78:	0800cfa0 	.word	0x0800cfa0
 8007f7c:	40140000 	.word	0x40140000
 8007f80:	40240000 	.word	0x40240000
 8007f84:	d006      	beq.n	8007f94 <_dtoa_r+0x824>
 8007f86:	4618      	mov	r0, r3
 8007f88:	301c      	adds	r0, #28
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	4403      	add	r3, r0
 8007f8e:	4481      	add	r9, r0
 8007f90:	4404      	add	r4, r0
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	f1b9 0f00 	cmp.w	r9, #0
 8007f98:	dd05      	ble.n	8007fa6 <_dtoa_r+0x836>
 8007f9a:	464a      	mov	r2, r9
 8007f9c:	9902      	ldr	r1, [sp, #8]
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	f001 f9a8 	bl	80092f4 <__lshift>
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	9b05      	ldr	r3, [sp, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dd05      	ble.n	8007fb8 <_dtoa_r+0x848>
 8007fac:	4629      	mov	r1, r5
 8007fae:	461a      	mov	r2, r3
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	f001 f99f 	bl	80092f4 <__lshift>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fba:	b1eb      	cbz	r3, 8007ff8 <_dtoa_r+0x888>
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	9802      	ldr	r0, [sp, #8]
 8007fc0:	f001 f9e9 	bl	8009396 <__mcmp>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	da17      	bge.n	8007ff8 <_dtoa_r+0x888>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	220a      	movs	r2, #10
 8007fcc:	9902      	ldr	r1, [sp, #8]
 8007fce:	4650      	mov	r0, sl
 8007fd0:	f000 ffe1 	bl	8008f96 <__multadd>
 8007fd4:	9b08      	ldr	r3, [sp, #32]
 8007fd6:	9002      	str	r0, [sp, #8]
 8007fd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8158 	beq.w	8008292 <_dtoa_r+0xb22>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	4650      	mov	r0, sl
 8007fea:	f000 ffd4 	bl	8008f96 <__multadd>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	dc37      	bgt.n	8008066 <_dtoa_r+0x8f6>
 8007ff6:	e033      	b.n	8008060 <_dtoa_r+0x8f0>
 8007ff8:	f1b8 0f00 	cmp.w	r8, #0
 8007ffc:	dc2a      	bgt.n	8008054 <_dtoa_r+0x8e4>
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	2b02      	cmp	r3, #2
 8008002:	dd27      	ble.n	8008054 <_dtoa_r+0x8e4>
 8008004:	f8cd 800c 	str.w	r8, [sp, #12]
 8008008:	9b03      	ldr	r3, [sp, #12]
 800800a:	b983      	cbnz	r3, 800802e <_dtoa_r+0x8be>
 800800c:	4629      	mov	r1, r5
 800800e:	2205      	movs	r2, #5
 8008010:	4650      	mov	r0, sl
 8008012:	f000 ffc0 	bl	8008f96 <__multadd>
 8008016:	4601      	mov	r1, r0
 8008018:	4605      	mov	r5, r0
 800801a:	9802      	ldr	r0, [sp, #8]
 800801c:	f001 f9bb 	bl	8009396 <__mcmp>
 8008020:	2800      	cmp	r0, #0
 8008022:	dc0d      	bgt.n	8008040 <_dtoa_r+0x8d0>
 8008024:	e003      	b.n	800802e <_dtoa_r+0x8be>
 8008026:	463d      	mov	r5, r7
 8008028:	e000      	b.n	800802c <_dtoa_r+0x8bc>
 800802a:	2500      	movs	r5, #0
 800802c:	462e      	mov	r6, r5
 800802e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008030:	9c04      	ldr	r4, [sp, #16]
 8008032:	ea6f 0b03 	mvn.w	fp, r3
 8008036:	e00a      	b.n	800804e <_dtoa_r+0x8de>
 8008038:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800803c:	463d      	mov	r5, r7
 800803e:	463e      	mov	r6, r7
 8008040:	9b04      	ldr	r3, [sp, #16]
 8008042:	9a04      	ldr	r2, [sp, #16]
 8008044:	1c5c      	adds	r4, r3, #1
 8008046:	2331      	movs	r3, #49	; 0x31
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	f10b 0b01 	add.w	fp, fp, #1
 800804e:	46b0      	mov	r8, r6
 8008050:	2600      	movs	r6, #0
 8008052:	e0f7      	b.n	8008244 <_dtoa_r+0xad4>
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	f8cd 800c 	str.w	r8, [sp, #12]
 800805a:	b923      	cbnz	r3, 8008066 <_dtoa_r+0x8f6>
 800805c:	9c04      	ldr	r4, [sp, #16]
 800805e:	e0b1      	b.n	80081c4 <_dtoa_r+0xa54>
 8008060:	9b06      	ldr	r3, [sp, #24]
 8008062:	2b02      	cmp	r3, #2
 8008064:	dcd0      	bgt.n	8008008 <_dtoa_r+0x898>
 8008066:	2c00      	cmp	r4, #0
 8008068:	dd05      	ble.n	8008076 <_dtoa_r+0x906>
 800806a:	4631      	mov	r1, r6
 800806c:	4622      	mov	r2, r4
 800806e:	4650      	mov	r0, sl
 8008070:	f001 f940 	bl	80092f4 <__lshift>
 8008074:	4606      	mov	r6, r0
 8008076:	b19f      	cbz	r7, 80080a0 <_dtoa_r+0x930>
 8008078:	6871      	ldr	r1, [r6, #4]
 800807a:	4650      	mov	r0, sl
 800807c:	f000 ff3f 	bl	8008efe <_Balloc>
 8008080:	6932      	ldr	r2, [r6, #16]
 8008082:	3202      	adds	r2, #2
 8008084:	4604      	mov	r4, r0
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	f106 010c 	add.w	r1, r6, #12
 800808c:	300c      	adds	r0, #12
 800808e:	f000 ff21 	bl	8008ed4 <memcpy>
 8008092:	2201      	movs	r2, #1
 8008094:	4621      	mov	r1, r4
 8008096:	4650      	mov	r0, sl
 8008098:	f001 f92c 	bl	80092f4 <__lshift>
 800809c:	4680      	mov	r8, r0
 800809e:	e000      	b.n	80080a2 <_dtoa_r+0x932>
 80080a0:	46b0      	mov	r8, r6
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	4629      	mov	r1, r5
 80080b0:	9802      	ldr	r0, [sp, #8]
 80080b2:	f7ff facb 	bl	800764c <quorem>
 80080b6:	4631      	mov	r1, r6
 80080b8:	4604      	mov	r4, r0
 80080ba:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80080be:	9802      	ldr	r0, [sp, #8]
 80080c0:	f001 f969 	bl	8009396 <__mcmp>
 80080c4:	4642      	mov	r2, r8
 80080c6:	9000      	str	r0, [sp, #0]
 80080c8:	4629      	mov	r1, r5
 80080ca:	4650      	mov	r0, sl
 80080cc:	f001 f97f 	bl	80093ce <__mdiff>
 80080d0:	68c3      	ldr	r3, [r0, #12]
 80080d2:	4602      	mov	r2, r0
 80080d4:	b93b      	cbnz	r3, 80080e6 <_dtoa_r+0x976>
 80080d6:	4601      	mov	r1, r0
 80080d8:	9007      	str	r0, [sp, #28]
 80080da:	9802      	ldr	r0, [sp, #8]
 80080dc:	f001 f95b 	bl	8009396 <__mcmp>
 80080e0:	9a07      	ldr	r2, [sp, #28]
 80080e2:	4603      	mov	r3, r0
 80080e4:	e000      	b.n	80080e8 <_dtoa_r+0x978>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4611      	mov	r1, r2
 80080ea:	4650      	mov	r0, sl
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	f000 ff3b 	bl	8008f68 <_Bfree>
 80080f2:	9b07      	ldr	r3, [sp, #28]
 80080f4:	b94b      	cbnz	r3, 800810a <_dtoa_r+0x99a>
 80080f6:	9a06      	ldr	r2, [sp, #24]
 80080f8:	b93a      	cbnz	r2, 800810a <_dtoa_r+0x99a>
 80080fa:	9a05      	ldr	r2, [sp, #20]
 80080fc:	b92a      	cbnz	r2, 800810a <_dtoa_r+0x99a>
 80080fe:	2f39      	cmp	r7, #57	; 0x39
 8008100:	d028      	beq.n	8008154 <_dtoa_r+0x9e4>
 8008102:	9b00      	ldr	r3, [sp, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	dc1a      	bgt.n	800813e <_dtoa_r+0x9ce>
 8008108:	e01b      	b.n	8008142 <_dtoa_r+0x9d2>
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	2a00      	cmp	r2, #0
 800810e:	db04      	blt.n	800811a <_dtoa_r+0x9aa>
 8008110:	d11a      	bne.n	8008148 <_dtoa_r+0x9d8>
 8008112:	9a06      	ldr	r2, [sp, #24]
 8008114:	b9c2      	cbnz	r2, 8008148 <_dtoa_r+0x9d8>
 8008116:	9a05      	ldr	r2, [sp, #20]
 8008118:	b9b2      	cbnz	r2, 8008148 <_dtoa_r+0x9d8>
 800811a:	2b00      	cmp	r3, #0
 800811c:	dd11      	ble.n	8008142 <_dtoa_r+0x9d2>
 800811e:	2201      	movs	r2, #1
 8008120:	9902      	ldr	r1, [sp, #8]
 8008122:	4650      	mov	r0, sl
 8008124:	f001 f8e6 	bl	80092f4 <__lshift>
 8008128:	4629      	mov	r1, r5
 800812a:	9002      	str	r0, [sp, #8]
 800812c:	f001 f933 	bl	8009396 <__mcmp>
 8008130:	2800      	cmp	r0, #0
 8008132:	dc02      	bgt.n	800813a <_dtoa_r+0x9ca>
 8008134:	d105      	bne.n	8008142 <_dtoa_r+0x9d2>
 8008136:	07fa      	lsls	r2, r7, #31
 8008138:	d503      	bpl.n	8008142 <_dtoa_r+0x9d2>
 800813a:	2f39      	cmp	r7, #57	; 0x39
 800813c:	d00a      	beq.n	8008154 <_dtoa_r+0x9e4>
 800813e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8008142:	f109 0401 	add.w	r4, r9, #1
 8008146:	e00c      	b.n	8008162 <_dtoa_r+0x9f2>
 8008148:	2b00      	cmp	r3, #0
 800814a:	f109 0401 	add.w	r4, r9, #1
 800814e:	dd0b      	ble.n	8008168 <_dtoa_r+0x9f8>
 8008150:	2f39      	cmp	r7, #57	; 0x39
 8008152:	d105      	bne.n	8008160 <_dtoa_r+0x9f0>
 8008154:	2339      	movs	r3, #57	; 0x39
 8008156:	f889 3000 	strb.w	r3, [r9]
 800815a:	f109 0901 	add.w	r9, r9, #1
 800815e:	e054      	b.n	800820a <_dtoa_r+0xa9a>
 8008160:	3701      	adds	r7, #1
 8008162:	f889 7000 	strb.w	r7, [r9]
 8008166:	e06d      	b.n	8008244 <_dtoa_r+0xad4>
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	9a03      	ldr	r2, [sp, #12]
 800816c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8008170:	1ae3      	subs	r3, r4, r3
 8008172:	4293      	cmp	r3, r2
 8008174:	46a1      	mov	r9, r4
 8008176:	d03a      	beq.n	80081ee <_dtoa_r+0xa7e>
 8008178:	2300      	movs	r3, #0
 800817a:	220a      	movs	r2, #10
 800817c:	9902      	ldr	r1, [sp, #8]
 800817e:	4650      	mov	r0, sl
 8008180:	f000 ff09 	bl	8008f96 <__multadd>
 8008184:	4546      	cmp	r6, r8
 8008186:	9002      	str	r0, [sp, #8]
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	f04f 020a 	mov.w	r2, #10
 8008190:	4631      	mov	r1, r6
 8008192:	4650      	mov	r0, sl
 8008194:	d104      	bne.n	80081a0 <_dtoa_r+0xa30>
 8008196:	f000 fefe 	bl	8008f96 <__multadd>
 800819a:	4606      	mov	r6, r0
 800819c:	4680      	mov	r8, r0
 800819e:	e786      	b.n	80080ae <_dtoa_r+0x93e>
 80081a0:	f000 fef9 	bl	8008f96 <__multadd>
 80081a4:	4641      	mov	r1, r8
 80081a6:	4606      	mov	r6, r0
 80081a8:	2300      	movs	r3, #0
 80081aa:	220a      	movs	r2, #10
 80081ac:	4650      	mov	r0, sl
 80081ae:	f000 fef2 	bl	8008f96 <__multadd>
 80081b2:	4680      	mov	r8, r0
 80081b4:	e77b      	b.n	80080ae <_dtoa_r+0x93e>
 80081b6:	2300      	movs	r3, #0
 80081b8:	220a      	movs	r2, #10
 80081ba:	9902      	ldr	r1, [sp, #8]
 80081bc:	4650      	mov	r0, sl
 80081be:	f000 feea 	bl	8008f96 <__multadd>
 80081c2:	9002      	str	r0, [sp, #8]
 80081c4:	4629      	mov	r1, r5
 80081c6:	9802      	ldr	r0, [sp, #8]
 80081c8:	f7ff fa40 	bl	800764c <quorem>
 80081cc:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80081d0:	f804 7b01 	strb.w	r7, [r4], #1
 80081d4:	9b04      	ldr	r3, [sp, #16]
 80081d6:	9a03      	ldr	r2, [sp, #12]
 80081d8:	1ae3      	subs	r3, r4, r3
 80081da:	4293      	cmp	r3, r2
 80081dc:	dbeb      	blt.n	80081b6 <_dtoa_r+0xa46>
 80081de:	9b04      	ldr	r3, [sp, #16]
 80081e0:	2a01      	cmp	r2, #1
 80081e2:	bfac      	ite	ge
 80081e4:	189b      	addge	r3, r3, r2
 80081e6:	3301      	addlt	r3, #1
 80081e8:	46b0      	mov	r8, r6
 80081ea:	4699      	mov	r9, r3
 80081ec:	2600      	movs	r6, #0
 80081ee:	2201      	movs	r2, #1
 80081f0:	9902      	ldr	r1, [sp, #8]
 80081f2:	4650      	mov	r0, sl
 80081f4:	f001 f87e 	bl	80092f4 <__lshift>
 80081f8:	4629      	mov	r1, r5
 80081fa:	9002      	str	r0, [sp, #8]
 80081fc:	f001 f8cb 	bl	8009396 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	dc02      	bgt.n	800820a <_dtoa_r+0xa9a>
 8008204:	d115      	bne.n	8008232 <_dtoa_r+0xac2>
 8008206:	07fb      	lsls	r3, r7, #31
 8008208:	d513      	bpl.n	8008232 <_dtoa_r+0xac2>
 800820a:	464c      	mov	r4, r9
 800820c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008210:	2b39      	cmp	r3, #57	; 0x39
 8008212:	f104 32ff 	add.w	r2, r4, #4294967295
 8008216:	d109      	bne.n	800822c <_dtoa_r+0xabc>
 8008218:	9b04      	ldr	r3, [sp, #16]
 800821a:	4293      	cmp	r3, r2
 800821c:	d104      	bne.n	8008228 <_dtoa_r+0xab8>
 800821e:	f10b 0b01 	add.w	fp, fp, #1
 8008222:	2331      	movs	r3, #49	; 0x31
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	e002      	b.n	800822e <_dtoa_r+0xabe>
 8008228:	4614      	mov	r4, r2
 800822a:	e7ef      	b.n	800820c <_dtoa_r+0xa9c>
 800822c:	3301      	adds	r3, #1
 800822e:	7013      	strb	r3, [r2, #0]
 8008230:	e008      	b.n	8008244 <_dtoa_r+0xad4>
 8008232:	464c      	mov	r4, r9
 8008234:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008238:	2b30      	cmp	r3, #48	; 0x30
 800823a:	f104 32ff 	add.w	r2, r4, #4294967295
 800823e:	d101      	bne.n	8008244 <_dtoa_r+0xad4>
 8008240:	4614      	mov	r4, r2
 8008242:	e7f7      	b.n	8008234 <_dtoa_r+0xac4>
 8008244:	4629      	mov	r1, r5
 8008246:	4650      	mov	r0, sl
 8008248:	f000 fe8e 	bl	8008f68 <_Bfree>
 800824c:	f1b8 0f00 	cmp.w	r8, #0
 8008250:	d00d      	beq.n	800826e <_dtoa_r+0xafe>
 8008252:	b12e      	cbz	r6, 8008260 <_dtoa_r+0xaf0>
 8008254:	4546      	cmp	r6, r8
 8008256:	d003      	beq.n	8008260 <_dtoa_r+0xaf0>
 8008258:	4631      	mov	r1, r6
 800825a:	4650      	mov	r0, sl
 800825c:	f000 fe84 	bl	8008f68 <_Bfree>
 8008260:	4641      	mov	r1, r8
 8008262:	4650      	mov	r0, sl
 8008264:	f000 fe80 	bl	8008f68 <_Bfree>
 8008268:	e001      	b.n	800826e <_dtoa_r+0xafe>
 800826a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800826e:	9902      	ldr	r1, [sp, #8]
 8008270:	4650      	mov	r0, sl
 8008272:	f000 fe79 	bl	8008f68 <_Bfree>
 8008276:	2300      	movs	r3, #0
 8008278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800827a:	7023      	strb	r3, [r4, #0]
 800827c:	f10b 0301 	add.w	r3, fp, #1
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008284:	b11b      	cbz	r3, 800828e <_dtoa_r+0xb1e>
 8008286:	601c      	str	r4, [r3, #0]
 8008288:	e001      	b.n	800828e <_dtoa_r+0xb1e>
 800828a:	4808      	ldr	r0, [pc, #32]	; (80082ac <_dtoa_r+0xb3c>)
 800828c:	e00a      	b.n	80082a4 <_dtoa_r+0xb34>
 800828e:	9804      	ldr	r0, [sp, #16]
 8008290:	e008      	b.n	80082a4 <_dtoa_r+0xb34>
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f73f aee1 	bgt.w	800805c <_dtoa_r+0x8ec>
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	2b02      	cmp	r3, #2
 800829e:	f77f aedd 	ble.w	800805c <_dtoa_r+0x8ec>
 80082a2:	e6b1      	b.n	8008008 <_dtoa_r+0x898>
 80082a4:	b017      	add	sp, #92	; 0x5c
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	bf00      	nop
 80082ac:	0800cde6 	.word	0x0800cde6

080082b0 <__sflush_r>:
 80082b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082b4:	b293      	uxth	r3, r2
 80082b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ba:	4605      	mov	r5, r0
 80082bc:	0718      	lsls	r0, r3, #28
 80082be:	460c      	mov	r4, r1
 80082c0:	d460      	bmi.n	8008384 <__sflush_r+0xd4>
 80082c2:	684b      	ldr	r3, [r1, #4]
 80082c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	818a      	strh	r2, [r1, #12]
 80082cc:	dc02      	bgt.n	80082d4 <__sflush_r+0x24>
 80082ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	dd17      	ble.n	8008304 <__sflush_r+0x54>
 80082d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d6:	b1ae      	cbz	r6, 8008304 <__sflush_r+0x54>
 80082d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80082dc:	2300      	movs	r3, #0
 80082de:	b292      	uxth	r2, r2
 80082e0:	682f      	ldr	r7, [r5, #0]
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	b10a      	cbz	r2, 80082ea <__sflush_r+0x3a>
 80082e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e8:	e015      	b.n	8008316 <__sflush_r+0x66>
 80082ea:	6a21      	ldr	r1, [r4, #32]
 80082ec:	2301      	movs	r3, #1
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b0      	blx	r6
 80082f2:	1c41      	adds	r1, r0, #1
 80082f4:	d10f      	bne.n	8008316 <__sflush_r+0x66>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	b16b      	cbz	r3, 8008316 <__sflush_r+0x66>
 80082fa:	2b1d      	cmp	r3, #29
 80082fc:	d001      	beq.n	8008302 <__sflush_r+0x52>
 80082fe:	2b16      	cmp	r3, #22
 8008300:	d103      	bne.n	800830a <__sflush_r+0x5a>
 8008302:	602f      	str	r7, [r5, #0]
 8008304:	2000      	movs	r0, #0
 8008306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	075a      	lsls	r2, r3, #29
 800831a:	d505      	bpl.n	8008328 <__sflush_r+0x78>
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	1ac0      	subs	r0, r0, r3
 8008320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008322:	b10b      	cbz	r3, 8008328 <__sflush_r+0x78>
 8008324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008326:	1ac0      	subs	r0, r0, r3
 8008328:	2300      	movs	r3, #0
 800832a:	4602      	mov	r2, r0
 800832c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800832e:	6a21      	ldr	r1, [r4, #32]
 8008330:	4628      	mov	r0, r5
 8008332:	47b0      	blx	r6
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	d106      	bne.n	8008348 <__sflush_r+0x98>
 800833a:	6829      	ldr	r1, [r5, #0]
 800833c:	291d      	cmp	r1, #29
 800833e:	d83e      	bhi.n	80083be <__sflush_r+0x10e>
 8008340:	4a22      	ldr	r2, [pc, #136]	; (80083cc <__sflush_r+0x11c>)
 8008342:	40ca      	lsrs	r2, r1
 8008344:	07d6      	lsls	r6, r2, #31
 8008346:	d53a      	bpl.n	80083be <__sflush_r+0x10e>
 8008348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800834c:	b21b      	sxth	r3, r3
 800834e:	2200      	movs	r2, #0
 8008350:	6062      	str	r2, [r4, #4]
 8008352:	04d9      	lsls	r1, r3, #19
 8008354:	6922      	ldr	r2, [r4, #16]
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	d504      	bpl.n	8008366 <__sflush_r+0xb6>
 800835c:	1c42      	adds	r2, r0, #1
 800835e:	d101      	bne.n	8008364 <__sflush_r+0xb4>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b903      	cbnz	r3, 8008366 <__sflush_r+0xb6>
 8008364:	6560      	str	r0, [r4, #84]	; 0x54
 8008366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008368:	602f      	str	r7, [r5, #0]
 800836a:	2900      	cmp	r1, #0
 800836c:	d0ca      	beq.n	8008304 <__sflush_r+0x54>
 800836e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008372:	4299      	cmp	r1, r3
 8008374:	d002      	beq.n	800837c <__sflush_r+0xcc>
 8008376:	4628      	mov	r0, r5
 8008378:	f000 f9ce 	bl	8008718 <_free_r>
 800837c:	2000      	movs	r0, #0
 800837e:	6360      	str	r0, [r4, #52]	; 0x34
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	690f      	ldr	r7, [r1, #16]
 8008386:	2f00      	cmp	r7, #0
 8008388:	d0bc      	beq.n	8008304 <__sflush_r+0x54>
 800838a:	079b      	lsls	r3, r3, #30
 800838c:	680e      	ldr	r6, [r1, #0]
 800838e:	bf08      	it	eq
 8008390:	694b      	ldreq	r3, [r1, #20]
 8008392:	600f      	str	r7, [r1, #0]
 8008394:	bf18      	it	ne
 8008396:	2300      	movne	r3, #0
 8008398:	ebc7 0806 	rsb	r8, r7, r6
 800839c:	608b      	str	r3, [r1, #8]
 800839e:	e002      	b.n	80083a6 <__sflush_r+0xf6>
 80083a0:	4407      	add	r7, r0
 80083a2:	ebc0 0808 	rsb	r8, r0, r8
 80083a6:	f1b8 0f00 	cmp.w	r8, #0
 80083aa:	ddab      	ble.n	8008304 <__sflush_r+0x54>
 80083ac:	4643      	mov	r3, r8
 80083ae:	463a      	mov	r2, r7
 80083b0:	6a21      	ldr	r1, [r4, #32]
 80083b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b0      	blx	r6
 80083b8:	2800      	cmp	r0, #0
 80083ba:	dcf1      	bgt.n	80083a0 <__sflush_r+0xf0>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	20400001 	.word	0x20400001

080083d0 <_fflush_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	690b      	ldr	r3, [r1, #16]
 80083d4:	4605      	mov	r5, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b1db      	cbz	r3, 8008412 <_fflush_r+0x42>
 80083da:	b118      	cbz	r0, 80083e4 <_fflush_r+0x14>
 80083dc:	6983      	ldr	r3, [r0, #24]
 80083de:	b90b      	cbnz	r3, 80083e4 <_fflush_r+0x14>
 80083e0:	f000 f872 	bl	80084c8 <__sinit>
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <_fflush_r+0x48>)
 80083e6:	429c      	cmp	r4, r3
 80083e8:	d101      	bne.n	80083ee <_fflush_r+0x1e>
 80083ea:	686c      	ldr	r4, [r5, #4]
 80083ec:	e008      	b.n	8008400 <_fflush_r+0x30>
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <_fflush_r+0x4c>)
 80083f0:	429c      	cmp	r4, r3
 80083f2:	d101      	bne.n	80083f8 <_fflush_r+0x28>
 80083f4:	68ac      	ldr	r4, [r5, #8]
 80083f6:	e003      	b.n	8008400 <_fflush_r+0x30>
 80083f8:	4b09      	ldr	r3, [pc, #36]	; (8008420 <_fflush_r+0x50>)
 80083fa:	429c      	cmp	r4, r3
 80083fc:	bf08      	it	eq
 80083fe:	68ec      	ldreq	r4, [r5, #12]
 8008400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008404:	b12b      	cbz	r3, 8008412 <_fflush_r+0x42>
 8008406:	4621      	mov	r1, r4
 8008408:	4628      	mov	r0, r5
 800840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800840e:	f7ff bf4f 	b.w	80082b0 <__sflush_r>
 8008412:	2000      	movs	r0, #0
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	0800cf30 	.word	0x0800cf30
 800841c:	0800cf50 	.word	0x0800cf50
 8008420:	0800cf70 	.word	0x0800cf70

08008424 <fflush>:
 8008424:	4601      	mov	r1, r0
 8008426:	b920      	cbnz	r0, 8008432 <fflush+0xe>
 8008428:	4b04      	ldr	r3, [pc, #16]	; (800843c <fflush+0x18>)
 800842a:	4905      	ldr	r1, [pc, #20]	; (8008440 <fflush+0x1c>)
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 ba4d 	b.w	80088cc <_fwalk_reent>
 8008432:	4b04      	ldr	r3, [pc, #16]	; (8008444 <fflush+0x20>)
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f7ff bfcb 	b.w	80083d0 <_fflush_r>
 800843a:	bf00      	nop
 800843c:	0800cf94 	.word	0x0800cf94
 8008440:	080083d1 	.word	0x080083d1
 8008444:	2000024c 	.word	0x2000024c

08008448 <_cleanup_r>:
 8008448:	4901      	ldr	r1, [pc, #4]	; (8008450 <_cleanup_r+0x8>)
 800844a:	f000 ba3f 	b.w	80088cc <_fwalk_reent>
 800844e:	bf00      	nop
 8008450:	0800bc45 	.word	0x0800bc45

08008454 <std.isra.0>:
 8008454:	2300      	movs	r3, #0
 8008456:	b510      	push	{r4, lr}
 8008458:	4604      	mov	r4, r0
 800845a:	6003      	str	r3, [r0, #0]
 800845c:	6043      	str	r3, [r0, #4]
 800845e:	6083      	str	r3, [r0, #8]
 8008460:	8181      	strh	r1, [r0, #12]
 8008462:	6643      	str	r3, [r0, #100]	; 0x64
 8008464:	81c2      	strh	r2, [r0, #14]
 8008466:	6103      	str	r3, [r0, #16]
 8008468:	6143      	str	r3, [r0, #20]
 800846a:	6183      	str	r3, [r0, #24]
 800846c:	4619      	mov	r1, r3
 800846e:	2208      	movs	r2, #8
 8008470:	305c      	adds	r0, #92	; 0x5c
 8008472:	f000 fd3a 	bl	8008eea <memset>
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <std.isra.0+0x38>)
 8008478:	6263      	str	r3, [r4, #36]	; 0x24
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <std.isra.0+0x3c>)
 800847c:	62a3      	str	r3, [r4, #40]	; 0x28
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <std.isra.0+0x40>)
 8008480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <std.isra.0+0x44>)
 8008484:	6224      	str	r4, [r4, #32]
 8008486:	6323      	str	r3, [r4, #48]	; 0x30
 8008488:	bd10      	pop	{r4, pc}
 800848a:	bf00      	nop
 800848c:	080098f1 	.word	0x080098f1
 8008490:	08009913 	.word	0x08009913
 8008494:	0800994b 	.word	0x0800994b
 8008498:	0800996f 	.word	0x0800996f

0800849c <__sfmoreglue>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	2368      	movs	r3, #104	; 0x68
 80084a0:	1e4d      	subs	r5, r1, #1
 80084a2:	435d      	muls	r5, r3
 80084a4:	460e      	mov	r6, r1
 80084a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084aa:	f000 fab9 	bl	8008a20 <_malloc_r>
 80084ae:	4604      	mov	r4, r0
 80084b0:	b140      	cbz	r0, 80084c4 <__sfmoreglue+0x28>
 80084b2:	2100      	movs	r1, #0
 80084b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80084b8:	300c      	adds	r0, #12
 80084ba:	60a0      	str	r0, [r4, #8]
 80084bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084c0:	f000 fd13 	bl	8008eea <memset>
 80084c4:	4620      	mov	r0, r4
 80084c6:	bd70      	pop	{r4, r5, r6, pc}

080084c8 <__sinit>:
 80084c8:	6983      	ldr	r3, [r0, #24]
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	bb4b      	cbnz	r3, 8008524 <__sinit+0x5c>
 80084d0:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80084d4:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 80084d8:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <__sinit+0x60>)
 80084de:	4a13      	ldr	r2, [pc, #76]	; (800852c <__sinit+0x64>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6282      	str	r2, [r0, #40]	; 0x28
 80084e4:	4298      	cmp	r0, r3
 80084e6:	bf04      	itt	eq
 80084e8:	2301      	moveq	r3, #1
 80084ea:	6183      	streq	r3, [r0, #24]
 80084ec:	f000 f820 	bl	8008530 <__sfp>
 80084f0:	6060      	str	r0, [r4, #4]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f81c 	bl	8008530 <__sfp>
 80084f8:	60a0      	str	r0, [r4, #8]
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f818 	bl	8008530 <__sfp>
 8008500:	2200      	movs	r2, #0
 8008502:	60e0      	str	r0, [r4, #12]
 8008504:	2104      	movs	r1, #4
 8008506:	6860      	ldr	r0, [r4, #4]
 8008508:	f7ff ffa4 	bl	8008454 <std.isra.0>
 800850c:	2201      	movs	r2, #1
 800850e:	2109      	movs	r1, #9
 8008510:	68a0      	ldr	r0, [r4, #8]
 8008512:	f7ff ff9f 	bl	8008454 <std.isra.0>
 8008516:	2202      	movs	r2, #2
 8008518:	2112      	movs	r1, #18
 800851a:	68e0      	ldr	r0, [r4, #12]
 800851c:	f7ff ff9a 	bl	8008454 <std.isra.0>
 8008520:	2301      	movs	r3, #1
 8008522:	61a3      	str	r3, [r4, #24]
 8008524:	bd10      	pop	{r4, pc}
 8008526:	bf00      	nop
 8008528:	0800cf94 	.word	0x0800cf94
 800852c:	08008449 	.word	0x08008449

08008530 <__sfp>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <__sfp+0x74>)
 8008534:	681e      	ldr	r6, [r3, #0]
 8008536:	69b3      	ldr	r3, [r6, #24]
 8008538:	4607      	mov	r7, r0
 800853a:	b913      	cbnz	r3, 8008542 <__sfp+0x12>
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff ffc3 	bl	80084c8 <__sinit>
 8008542:	36d8      	adds	r6, #216	; 0xd8
 8008544:	68b4      	ldr	r4, [r6, #8]
 8008546:	6873      	ldr	r3, [r6, #4]
 8008548:	3b01      	subs	r3, #1
 800854a:	d404      	bmi.n	8008556 <__sfp+0x26>
 800854c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008550:	b17d      	cbz	r5, 8008572 <__sfp+0x42>
 8008552:	3468      	adds	r4, #104	; 0x68
 8008554:	e7f8      	b.n	8008548 <__sfp+0x18>
 8008556:	6833      	ldr	r3, [r6, #0]
 8008558:	b10b      	cbz	r3, 800855e <__sfp+0x2e>
 800855a:	6836      	ldr	r6, [r6, #0]
 800855c:	e7f2      	b.n	8008544 <__sfp+0x14>
 800855e:	2104      	movs	r1, #4
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ff9b 	bl	800849c <__sfmoreglue>
 8008566:	6030      	str	r0, [r6, #0]
 8008568:	2800      	cmp	r0, #0
 800856a:	d1f6      	bne.n	800855a <__sfp+0x2a>
 800856c:	230c      	movs	r3, #12
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008576:	81e3      	strh	r3, [r4, #14]
 8008578:	2301      	movs	r3, #1
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	6665      	str	r5, [r4, #100]	; 0x64
 800857e:	6025      	str	r5, [r4, #0]
 8008580:	60a5      	str	r5, [r4, #8]
 8008582:	6065      	str	r5, [r4, #4]
 8008584:	6125      	str	r5, [r4, #16]
 8008586:	6165      	str	r5, [r4, #20]
 8008588:	61a5      	str	r5, [r4, #24]
 800858a:	2208      	movs	r2, #8
 800858c:	4629      	mov	r1, r5
 800858e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008592:	f000 fcaa 	bl	8008eea <memset>
 8008596:	6365      	str	r5, [r4, #52]	; 0x34
 8008598:	63a5      	str	r5, [r4, #56]	; 0x38
 800859a:	64a5      	str	r5, [r4, #72]	; 0x48
 800859c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800859e:	4620      	mov	r0, r4
 80085a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a2:	bf00      	nop
 80085a4:	0800cf94 	.word	0x0800cf94

080085a8 <__sfp_lock_acquire>:
 80085a8:	4770      	bx	lr

080085aa <__sfp_lock_release>:
 80085aa:	4770      	bx	lr

080085ac <_fread_r>:
 80085ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	4615      	mov	r5, r2
 80085b2:	435d      	muls	r5, r3
 80085b4:	4607      	mov	r7, r0
 80085b6:	468b      	mov	fp, r1
 80085b8:	4692      	mov	sl, r2
 80085ba:	4699      	mov	r9, r3
 80085bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085be:	d04b      	beq.n	8008658 <_fread_r+0xac>
 80085c0:	b118      	cbz	r0, 80085ca <_fread_r+0x1e>
 80085c2:	6983      	ldr	r3, [r0, #24]
 80085c4:	b90b      	cbnz	r3, 80085ca <_fread_r+0x1e>
 80085c6:	f7ff ff7f 	bl	80084c8 <__sinit>
 80085ca:	4b25      	ldr	r3, [pc, #148]	; (8008660 <_fread_r+0xb4>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	d101      	bne.n	80085d4 <_fread_r+0x28>
 80085d0:	687c      	ldr	r4, [r7, #4]
 80085d2:	e008      	b.n	80085e6 <_fread_r+0x3a>
 80085d4:	4b23      	ldr	r3, [pc, #140]	; (8008664 <_fread_r+0xb8>)
 80085d6:	429c      	cmp	r4, r3
 80085d8:	d101      	bne.n	80085de <_fread_r+0x32>
 80085da:	68bc      	ldr	r4, [r7, #8]
 80085dc:	e003      	b.n	80085e6 <_fread_r+0x3a>
 80085de:	4b22      	ldr	r3, [pc, #136]	; (8008668 <_fread_r+0xbc>)
 80085e0:	429c      	cmp	r4, r3
 80085e2:	bf08      	it	eq
 80085e4:	68fc      	ldreq	r4, [r7, #12]
 80085e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ea:	049a      	lsls	r2, r3, #18
 80085ec:	d406      	bmi.n	80085fc <_fread_r+0x50>
 80085ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085f8:	81a3      	strh	r3, [r4, #12]
 80085fa:	6662      	str	r2, [r4, #100]	; 0x64
 80085fc:	6863      	ldr	r3, [r4, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbc      	itt	lt
 8008602:	2300      	movlt	r3, #0
 8008604:	6063      	strlt	r3, [r4, #4]
 8008606:	462e      	mov	r6, r5
 8008608:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800860c:	4546      	cmp	r6, r8
 800860e:	d915      	bls.n	800863c <_fread_r+0x90>
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	4658      	mov	r0, fp
 8008614:	4642      	mov	r2, r8
 8008616:	f000 fc5d 	bl	8008ed4 <memcpy>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	4443      	add	r3, r8
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	4621      	mov	r1, r4
 8008622:	4638      	mov	r0, r7
 8008624:	44c3      	add	fp, r8
 8008626:	ebc8 0606 	rsb	r6, r8, r6
 800862a:	f001 f861 	bl	80096f0 <__srefill_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0ea      	beq.n	8008608 <_fread_r+0x5c>
 8008632:	1ba8      	subs	r0, r5, r6
 8008634:	fbb0 f0fa 	udiv	r0, r0, sl
 8008638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	4632      	mov	r2, r6
 800863e:	6821      	ldr	r1, [r4, #0]
 8008640:	4658      	mov	r0, fp
 8008642:	f000 fc47 	bl	8008ed4 <memcpy>
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	1b9b      	subs	r3, r3, r6
 800864c:	4430      	add	r0, r6
 800864e:	6020      	str	r0, [r4, #0]
 8008650:	6063      	str	r3, [r4, #4]
 8008652:	4648      	mov	r0, r9
 8008654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008658:	4628      	mov	r0, r5
 800865a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	bf00      	nop
 8008660:	0800cf30 	.word	0x0800cf30
 8008664:	0800cf50 	.word	0x0800cf50
 8008668:	0800cf70 	.word	0x0800cf70

0800866c <_malloc_trim_r>:
 800866c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008670:	4f25      	ldr	r7, [pc, #148]	; (8008708 <_malloc_trim_r+0x9c>)
 8008672:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008714 <_malloc_trim_r+0xa8>
 8008676:	4689      	mov	r9, r1
 8008678:	4606      	mov	r6, r0
 800867a:	f000 fc3e 	bl	8008efa <__malloc_lock>
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	685d      	ldr	r5, [r3, #4]
 8008682:	f1a8 0411 	sub.w	r4, r8, #17
 8008686:	f025 0503 	bic.w	r5, r5, #3
 800868a:	442c      	add	r4, r5
 800868c:	ebc9 0404 	rsb	r4, r9, r4
 8008690:	fbb4 f4f8 	udiv	r4, r4, r8
 8008694:	3c01      	subs	r4, #1
 8008696:	fb08 f404 	mul.w	r4, r8, r4
 800869a:	4544      	cmp	r4, r8
 800869c:	da05      	bge.n	80086aa <_malloc_trim_r+0x3e>
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 fc2c 	bl	8008efc <__malloc_unlock>
 80086a4:	2000      	movs	r0, #0
 80086a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086aa:	2100      	movs	r1, #0
 80086ac:	4630      	mov	r0, r6
 80086ae:	f001 f8b3 	bl	8009818 <_sbrk_r>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	442b      	add	r3, r5
 80086b6:	4298      	cmp	r0, r3
 80086b8:	d1f1      	bne.n	800869e <_malloc_trim_r+0x32>
 80086ba:	4261      	negs	r1, r4
 80086bc:	4630      	mov	r0, r6
 80086be:	f001 f8ab 	bl	8009818 <_sbrk_r>
 80086c2:	3001      	adds	r0, #1
 80086c4:	d110      	bne.n	80086e8 <_malloc_trim_r+0x7c>
 80086c6:	2100      	movs	r1, #0
 80086c8:	4630      	mov	r0, r6
 80086ca:	f001 f8a5 	bl	8009818 <_sbrk_r>
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	1a83      	subs	r3, r0, r2
 80086d2:	2b0f      	cmp	r3, #15
 80086d4:	dde3      	ble.n	800869e <_malloc_trim_r+0x32>
 80086d6:	490d      	ldr	r1, [pc, #52]	; (800870c <_malloc_trim_r+0xa0>)
 80086d8:	6809      	ldr	r1, [r1, #0]
 80086da:	1a40      	subs	r0, r0, r1
 80086dc:	490c      	ldr	r1, [pc, #48]	; (8008710 <_malloc_trim_r+0xa4>)
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	6008      	str	r0, [r1, #0]
 80086e4:	6053      	str	r3, [r2, #4]
 80086e6:	e7da      	b.n	800869e <_malloc_trim_r+0x32>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4a09      	ldr	r2, [pc, #36]	; (8008710 <_malloc_trim_r+0xa4>)
 80086ec:	1b2d      	subs	r5, r5, r4
 80086ee:	f045 0501 	orr.w	r5, r5, #1
 80086f2:	605d      	str	r5, [r3, #4]
 80086f4:	6813      	ldr	r3, [r2, #0]
 80086f6:	4630      	mov	r0, r6
 80086f8:	1b1c      	subs	r4, r3, r4
 80086fa:	6014      	str	r4, [r2, #0]
 80086fc:	f000 fbfe 	bl	8008efc <__malloc_unlock>
 8008700:	2001      	movs	r0, #1
 8008702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008706:	bf00      	nop
 8008708:	200002ac 	.word	0x200002ac
 800870c:	200006b8 	.word	0x200006b8
 8008710:	2000092c 	.word	0x2000092c
 8008714:	00000080 	.word	0x00000080

08008718 <_free_r>:
 8008718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	4688      	mov	r8, r1
 8008720:	2900      	cmp	r1, #0
 8008722:	f000 80ad 	beq.w	8008880 <_free_r+0x168>
 8008726:	f000 fbe8 	bl	8008efa <__malloc_lock>
 800872a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800872e:	4d55      	ldr	r5, [pc, #340]	; (8008884 <_free_r+0x16c>)
 8008730:	f022 0001 	bic.w	r0, r2, #1
 8008734:	f1a8 0308 	sub.w	r3, r8, #8
 8008738:	181f      	adds	r7, r3, r0
 800873a:	68a9      	ldr	r1, [r5, #8]
 800873c:	687e      	ldr	r6, [r7, #4]
 800873e:	428f      	cmp	r7, r1
 8008740:	f026 0603 	bic.w	r6, r6, #3
 8008744:	f002 0201 	and.w	r2, r2, #1
 8008748:	d11b      	bne.n	8008782 <_free_r+0x6a>
 800874a:	4430      	add	r0, r6
 800874c:	b93a      	cbnz	r2, 800875e <_free_r+0x46>
 800874e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	4410      	add	r0, r2
 8008756:	6899      	ldr	r1, [r3, #8]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	60ca      	str	r2, [r1, #12]
 800875c:	6091      	str	r1, [r2, #8]
 800875e:	f040 0201 	orr.w	r2, r0, #1
 8008762:	605a      	str	r2, [r3, #4]
 8008764:	60ab      	str	r3, [r5, #8]
 8008766:	4b48      	ldr	r3, [pc, #288]	; (8008888 <_free_r+0x170>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4298      	cmp	r0, r3
 800876c:	d304      	bcc.n	8008778 <_free_r+0x60>
 800876e:	4b47      	ldr	r3, [pc, #284]	; (800888c <_free_r+0x174>)
 8008770:	4620      	mov	r0, r4
 8008772:	6819      	ldr	r1, [r3, #0]
 8008774:	f7ff ff7a 	bl	800866c <_malloc_trim_r>
 8008778:	4620      	mov	r0, r4
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 bbbd 	b.w	8008efc <__malloc_unlock>
 8008782:	607e      	str	r6, [r7, #4]
 8008784:	b97a      	cbnz	r2, 80087a6 <_free_r+0x8e>
 8008786:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800878a:	1a5b      	subs	r3, r3, r1
 800878c:	4408      	add	r0, r1
 800878e:	6899      	ldr	r1, [r3, #8]
 8008790:	f105 0e08 	add.w	lr, r5, #8
 8008794:	4571      	cmp	r1, lr
 8008796:	d008      	beq.n	80087aa <_free_r+0x92>
 8008798:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800879c:	f8c1 e00c 	str.w	lr, [r1, #12]
 80087a0:	f8ce 1008 	str.w	r1, [lr, #8]
 80087a4:	e002      	b.n	80087ac <_free_r+0x94>
 80087a6:	2200      	movs	r2, #0
 80087a8:	e000      	b.n	80087ac <_free_r+0x94>
 80087aa:	2201      	movs	r2, #1
 80087ac:	19b9      	adds	r1, r7, r6
 80087ae:	6849      	ldr	r1, [r1, #4]
 80087b0:	07c9      	lsls	r1, r1, #31
 80087b2:	d40e      	bmi.n	80087d2 <_free_r+0xba>
 80087b4:	4430      	add	r0, r6
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	b942      	cbnz	r2, 80087cc <_free_r+0xb4>
 80087ba:	4e35      	ldr	r6, [pc, #212]	; (8008890 <_free_r+0x178>)
 80087bc:	42b1      	cmp	r1, r6
 80087be:	d105      	bne.n	80087cc <_free_r+0xb4>
 80087c0:	616b      	str	r3, [r5, #20]
 80087c2:	612b      	str	r3, [r5, #16]
 80087c4:	2201      	movs	r2, #1
 80087c6:	60d9      	str	r1, [r3, #12]
 80087c8:	6099      	str	r1, [r3, #8]
 80087ca:	e002      	b.n	80087d2 <_free_r+0xba>
 80087cc:	68fe      	ldr	r6, [r7, #12]
 80087ce:	60ce      	str	r6, [r1, #12]
 80087d0:	60b1      	str	r1, [r6, #8]
 80087d2:	f040 0101 	orr.w	r1, r0, #1
 80087d6:	6059      	str	r1, [r3, #4]
 80087d8:	5018      	str	r0, [r3, r0]
 80087da:	2a00      	cmp	r2, #0
 80087dc:	d1cc      	bne.n	8008778 <_free_r+0x60>
 80087de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80087e2:	d212      	bcs.n	800880a <_free_r+0xf2>
 80087e4:	08c0      	lsrs	r0, r0, #3
 80087e6:	1081      	asrs	r1, r0, #2
 80087e8:	2201      	movs	r2, #1
 80087ea:	fa02 f101 	lsl.w	r1, r2, r1
 80087ee:	686a      	ldr	r2, [r5, #4]
 80087f0:	3001      	adds	r0, #1
 80087f2:	430a      	orrs	r2, r1
 80087f4:	606a      	str	r2, [r5, #4]
 80087f6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80087fa:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80087fe:	6099      	str	r1, [r3, #8]
 8008800:	3a08      	subs	r2, #8
 8008802:	60da      	str	r2, [r3, #12]
 8008804:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008808:	e038      	b.n	800887c <_free_r+0x164>
 800880a:	0a42      	lsrs	r2, r0, #9
 800880c:	2a04      	cmp	r2, #4
 800880e:	d802      	bhi.n	8008816 <_free_r+0xfe>
 8008810:	0982      	lsrs	r2, r0, #6
 8008812:	3238      	adds	r2, #56	; 0x38
 8008814:	e015      	b.n	8008842 <_free_r+0x12a>
 8008816:	2a14      	cmp	r2, #20
 8008818:	d801      	bhi.n	800881e <_free_r+0x106>
 800881a:	325b      	adds	r2, #91	; 0x5b
 800881c:	e011      	b.n	8008842 <_free_r+0x12a>
 800881e:	2a54      	cmp	r2, #84	; 0x54
 8008820:	d802      	bhi.n	8008828 <_free_r+0x110>
 8008822:	0b02      	lsrs	r2, r0, #12
 8008824:	326e      	adds	r2, #110	; 0x6e
 8008826:	e00c      	b.n	8008842 <_free_r+0x12a>
 8008828:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800882c:	d802      	bhi.n	8008834 <_free_r+0x11c>
 800882e:	0bc2      	lsrs	r2, r0, #15
 8008830:	3277      	adds	r2, #119	; 0x77
 8008832:	e006      	b.n	8008842 <_free_r+0x12a>
 8008834:	f240 5154 	movw	r1, #1364	; 0x554
 8008838:	428a      	cmp	r2, r1
 800883a:	bf9a      	itte	ls
 800883c:	0c82      	lsrls	r2, r0, #18
 800883e:	327c      	addls	r2, #124	; 0x7c
 8008840:	227e      	movhi	r2, #126	; 0x7e
 8008842:	1c51      	adds	r1, r2, #1
 8008844:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008848:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800884c:	4f0d      	ldr	r7, [pc, #52]	; (8008884 <_free_r+0x16c>)
 800884e:	428e      	cmp	r6, r1
 8008850:	d10b      	bne.n	800886a <_free_r+0x152>
 8008852:	2101      	movs	r1, #1
 8008854:	1092      	asrs	r2, r2, #2
 8008856:	fa01 f202 	lsl.w	r2, r1, r2
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4311      	orrs	r1, r2
 800885e:	6079      	str	r1, [r7, #4]
 8008860:	4631      	mov	r1, r6
 8008862:	e008      	b.n	8008876 <_free_r+0x15e>
 8008864:	6889      	ldr	r1, [r1, #8]
 8008866:	428e      	cmp	r6, r1
 8008868:	d004      	beq.n	8008874 <_free_r+0x15c>
 800886a:	684a      	ldr	r2, [r1, #4]
 800886c:	f022 0203 	bic.w	r2, r2, #3
 8008870:	4290      	cmp	r0, r2
 8008872:	d3f7      	bcc.n	8008864 <_free_r+0x14c>
 8008874:	68ce      	ldr	r6, [r1, #12]
 8008876:	60de      	str	r6, [r3, #12]
 8008878:	6099      	str	r1, [r3, #8]
 800887a:	60b3      	str	r3, [r6, #8]
 800887c:	60cb      	str	r3, [r1, #12]
 800887e:	e77b      	b.n	8008778 <_free_r+0x60>
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	200002ac 	.word	0x200002ac
 8008888:	200006b4 	.word	0x200006b4
 800888c:	20000928 	.word	0x20000928
 8008890:	200002b4 	.word	0x200002b4

08008894 <_fwalk>:
 8008894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008898:	4688      	mov	r8, r1
 800889a:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800889e:	2600      	movs	r6, #0
 80088a0:	b18c      	cbz	r4, 80088c6 <_fwalk+0x32>
 80088a2:	68a5      	ldr	r5, [r4, #8]
 80088a4:	6867      	ldr	r7, [r4, #4]
 80088a6:	3f01      	subs	r7, #1
 80088a8:	d40b      	bmi.n	80088c2 <_fwalk+0x2e>
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d906      	bls.n	80088be <_fwalk+0x2a>
 80088b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088b4:	3301      	adds	r3, #1
 80088b6:	d002      	beq.n	80088be <_fwalk+0x2a>
 80088b8:	4628      	mov	r0, r5
 80088ba:	47c0      	blx	r8
 80088bc:	4306      	orrs	r6, r0
 80088be:	3568      	adds	r5, #104	; 0x68
 80088c0:	e7f1      	b.n	80088a6 <_fwalk+0x12>
 80088c2:	6824      	ldr	r4, [r4, #0]
 80088c4:	e7ec      	b.n	80088a0 <_fwalk+0xc>
 80088c6:	4630      	mov	r0, r6
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088cc <_fwalk_reent>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4680      	mov	r8, r0
 80088d2:	4689      	mov	r9, r1
 80088d4:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80088d8:	2600      	movs	r6, #0
 80088da:	b194      	cbz	r4, 8008902 <_fwalk_reent+0x36>
 80088dc:	68a5      	ldr	r5, [r4, #8]
 80088de:	6867      	ldr	r7, [r4, #4]
 80088e0:	3f01      	subs	r7, #1
 80088e2:	d40c      	bmi.n	80088fe <_fwalk_reent+0x32>
 80088e4:	89ab      	ldrh	r3, [r5, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d907      	bls.n	80088fa <_fwalk_reent+0x2e>
 80088ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088ee:	3301      	adds	r3, #1
 80088f0:	d003      	beq.n	80088fa <_fwalk_reent+0x2e>
 80088f2:	4629      	mov	r1, r5
 80088f4:	4640      	mov	r0, r8
 80088f6:	47c8      	blx	r9
 80088f8:	4306      	orrs	r6, r0
 80088fa:	3568      	adds	r5, #104	; 0x68
 80088fc:	e7f0      	b.n	80088e0 <_fwalk_reent+0x14>
 80088fe:	6824      	ldr	r4, [r4, #0]
 8008900:	e7eb      	b.n	80088da <_fwalk_reent+0xe>
 8008902:	4630      	mov	r0, r6
 8008904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008908 <iswspace>:
 8008908:	28ff      	cmp	r0, #255	; 0xff
 800890a:	bf9f      	itttt	ls
 800890c:	4b04      	ldrls	r3, [pc, #16]	; (8008920 <iswspace+0x18>)
 800890e:	681b      	ldrls	r3, [r3, #0]
 8008910:	18c0      	addls	r0, r0, r3
 8008912:	7840      	ldrbls	r0, [r0, #1]
 8008914:	bf9a      	itte	ls
 8008916:	f000 0008 	andls.w	r0, r0, #8
 800891a:	b2c0      	uxtbls	r0, r0
 800891c:	2000      	movhi	r0, #0
 800891e:	4770      	bx	lr
 8008920:	20000158 	.word	0x20000158

08008924 <__locale_charset>:
 8008924:	4800      	ldr	r0, [pc, #0]	; (8008928 <__locale_charset+0x4>)
 8008926:	4770      	bx	lr
 8008928:	20000288 	.word	0x20000288

0800892c <__locale_mb_cur_max>:
 800892c:	4b01      	ldr	r3, [pc, #4]	; (8008934 <__locale_mb_cur_max+0x8>)
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	200002a8 	.word	0x200002a8

08008938 <_localeconv_r>:
 8008938:	4800      	ldr	r0, [pc, #0]	; (800893c <_localeconv_r+0x4>)
 800893a:	4770      	bx	lr
 800893c:	20000250 	.word	0x20000250

08008940 <__swhatbuf_r>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	460e      	mov	r6, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	2900      	cmp	r1, #0
 800894a:	b090      	sub	sp, #64	; 0x40
 800894c:	4614      	mov	r4, r2
 800894e:	461d      	mov	r5, r3
 8008950:	da0a      	bge.n	8008968 <__swhatbuf_r+0x28>
 8008952:	89b3      	ldrh	r3, [r6, #12]
 8008954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008958:	2200      	movs	r2, #0
 800895a:	b298      	uxth	r0, r3
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	b1b0      	cbz	r0, 800898e <__swhatbuf_r+0x4e>
 8008960:	2340      	movs	r3, #64	; 0x40
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	4610      	mov	r0, r2
 8008966:	e015      	b.n	8008994 <__swhatbuf_r+0x54>
 8008968:	aa01      	add	r2, sp, #4
 800896a:	f003 fa0d 	bl	800bd88 <_fstat_r>
 800896e:	2800      	cmp	r0, #0
 8008970:	dbef      	blt.n	8008952 <__swhatbuf_r+0x12>
 8008972:	9a02      	ldr	r2, [sp, #8]
 8008974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800897c:	425a      	negs	r2, r3
 800897e:	415a      	adcs	r2, r3
 8008980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	e002      	b.n	8008994 <__swhatbuf_r+0x54>
 800898e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	b010      	add	sp, #64	; 0x40
 8008996:	bd70      	pop	{r4, r5, r6, pc}

08008998 <__smakebuf_r>:
 8008998:	898b      	ldrh	r3, [r1, #12]
 800899a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800899c:	079e      	lsls	r6, r3, #30
 800899e:	4605      	mov	r5, r0
 80089a0:	460c      	mov	r4, r1
 80089a2:	d410      	bmi.n	80089c6 <__smakebuf_r+0x2e>
 80089a4:	ab01      	add	r3, sp, #4
 80089a6:	466a      	mov	r2, sp
 80089a8:	f7ff ffca 	bl	8008940 <__swhatbuf_r>
 80089ac:	9900      	ldr	r1, [sp, #0]
 80089ae:	4606      	mov	r6, r0
 80089b0:	4628      	mov	r0, r5
 80089b2:	f000 f835 	bl	8008a20 <_malloc_r>
 80089b6:	b968      	cbnz	r0, 80089d4 <__smakebuf_r+0x3c>
 80089b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089bc:	059a      	lsls	r2, r3, #22
 80089be:	d422      	bmi.n	8008a06 <__smakebuf_r+0x6e>
 80089c0:	f043 0302 	orr.w	r3, r3, #2
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	6123      	str	r3, [r4, #16]
 80089ce:	2301      	movs	r3, #1
 80089d0:	6163      	str	r3, [r4, #20]
 80089d2:	e018      	b.n	8008a06 <__smakebuf_r+0x6e>
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <__smakebuf_r+0x74>)
 80089d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	6020      	str	r0, [r4, #0]
 80089dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	9b00      	ldr	r3, [sp, #0]
 80089e4:	6163      	str	r3, [r4, #20]
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	6120      	str	r0, [r4, #16]
 80089ea:	b14b      	cbz	r3, 8008a00 <__smakebuf_r+0x68>
 80089ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089f0:	4628      	mov	r0, r5
 80089f2:	f003 fe43 	bl	800c67c <_isatty_r>
 80089f6:	b118      	cbz	r0, 8008a00 <__smakebuf_r+0x68>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	89a0      	ldrh	r0, [r4, #12]
 8008a02:	4330      	orrs	r0, r6
 8008a04:	81a0      	strh	r0, [r4, #12]
 8008a06:	b002      	add	sp, #8
 8008a08:	bd70      	pop	{r4, r5, r6, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08008449 	.word	0x08008449

08008a10 <malloc>:
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <malloc+0xc>)
 8008a12:	4601      	mov	r1, r0
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	f000 b803 	b.w	8008a20 <_malloc_r>
 8008a1a:	bf00      	nop
 8008a1c:	2000024c 	.word	0x2000024c

08008a20 <_malloc_r>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	f101 040b 	add.w	r4, r1, #11
 8008a28:	2c16      	cmp	r4, #22
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	4681      	mov	r9, r0
 8008a2e:	d903      	bls.n	8008a38 <_malloc_r+0x18>
 8008a30:	f034 0407 	bics.w	r4, r4, #7
 8008a34:	d501      	bpl.n	8008a3a <_malloc_r+0x1a>
 8008a36:	e002      	b.n	8008a3e <_malloc_r+0x1e>
 8008a38:	2410      	movs	r4, #16
 8008a3a:	428c      	cmp	r4, r1
 8008a3c:	d203      	bcs.n	8008a46 <_malloc_r+0x26>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	f8c9 3000 	str.w	r3, [r9]
 8008a44:	e1ea      	b.n	8008e1c <_malloc_r+0x3fc>
 8008a46:	4648      	mov	r0, r9
 8008a48:	f000 fa57 	bl	8008efa <__malloc_lock>
 8008a4c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8008a50:	4d9e      	ldr	r5, [pc, #632]	; (8008ccc <_malloc_r+0x2ac>)
 8008a52:	d217      	bcs.n	8008a84 <_malloc_r+0x64>
 8008a54:	f104 0208 	add.w	r2, r4, #8
 8008a58:	442a      	add	r2, r5
 8008a5a:	f1a2 0108 	sub.w	r1, r2, #8
 8008a5e:	6856      	ldr	r6, [r2, #4]
 8008a60:	428e      	cmp	r6, r1
 8008a62:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8008a66:	d102      	bne.n	8008a6e <_malloc_r+0x4e>
 8008a68:	68d6      	ldr	r6, [r2, #12]
 8008a6a:	42b2      	cmp	r2, r6
 8008a6c:	d008      	beq.n	8008a80 <_malloc_r+0x60>
 8008a6e:	6873      	ldr	r3, [r6, #4]
 8008a70:	68f2      	ldr	r2, [r6, #12]
 8008a72:	68b1      	ldr	r1, [r6, #8]
 8008a74:	f023 0303 	bic.w	r3, r3, #3
 8008a78:	60ca      	str	r2, [r1, #12]
 8008a7a:	4433      	add	r3, r6
 8008a7c:	6091      	str	r1, [r2, #8]
 8008a7e:	e02f      	b.n	8008ae0 <_malloc_r+0xc0>
 8008a80:	3302      	adds	r3, #2
 8008a82:	e03d      	b.n	8008b00 <_malloc_r+0xe0>
 8008a84:	0a63      	lsrs	r3, r4, #9
 8008a86:	d01a      	beq.n	8008abe <_malloc_r+0x9e>
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d802      	bhi.n	8008a92 <_malloc_r+0x72>
 8008a8c:	09a3      	lsrs	r3, r4, #6
 8008a8e:	3338      	adds	r3, #56	; 0x38
 8008a90:	e018      	b.n	8008ac4 <_malloc_r+0xa4>
 8008a92:	2b14      	cmp	r3, #20
 8008a94:	d801      	bhi.n	8008a9a <_malloc_r+0x7a>
 8008a96:	335b      	adds	r3, #91	; 0x5b
 8008a98:	e014      	b.n	8008ac4 <_malloc_r+0xa4>
 8008a9a:	2b54      	cmp	r3, #84	; 0x54
 8008a9c:	d802      	bhi.n	8008aa4 <_malloc_r+0x84>
 8008a9e:	0b23      	lsrs	r3, r4, #12
 8008aa0:	336e      	adds	r3, #110	; 0x6e
 8008aa2:	e00f      	b.n	8008ac4 <_malloc_r+0xa4>
 8008aa4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008aa8:	d802      	bhi.n	8008ab0 <_malloc_r+0x90>
 8008aaa:	0be3      	lsrs	r3, r4, #15
 8008aac:	3377      	adds	r3, #119	; 0x77
 8008aae:	e009      	b.n	8008ac4 <_malloc_r+0xa4>
 8008ab0:	f240 5254 	movw	r2, #1364	; 0x554
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d804      	bhi.n	8008ac2 <_malloc_r+0xa2>
 8008ab8:	0ca3      	lsrs	r3, r4, #18
 8008aba:	337c      	adds	r3, #124	; 0x7c
 8008abc:	e002      	b.n	8008ac4 <_malloc_r+0xa4>
 8008abe:	233f      	movs	r3, #63	; 0x3f
 8008ac0:	e000      	b.n	8008ac4 <_malloc_r+0xa4>
 8008ac2:	237e      	movs	r3, #126	; 0x7e
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008aca:	f1a2 0008 	sub.w	r0, r2, #8
 8008ace:	6856      	ldr	r6, [r2, #4]
 8008ad0:	e00c      	b.n	8008aec <_malloc_r+0xcc>
 8008ad2:	2900      	cmp	r1, #0
 8008ad4:	68f1      	ldr	r1, [r6, #12]
 8008ad6:	db08      	blt.n	8008aea <_malloc_r+0xca>
 8008ad8:	68b3      	ldr	r3, [r6, #8]
 8008ada:	60d9      	str	r1, [r3, #12]
 8008adc:	608b      	str	r3, [r1, #8]
 8008ade:	18b3      	adds	r3, r6, r2
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	f042 0201 	orr.w	r2, r2, #1
 8008ae6:	605a      	str	r2, [r3, #4]
 8008ae8:	e1a3      	b.n	8008e32 <_malloc_r+0x412>
 8008aea:	460e      	mov	r6, r1
 8008aec:	4286      	cmp	r6, r0
 8008aee:	d006      	beq.n	8008afe <_malloc_r+0xde>
 8008af0:	6872      	ldr	r2, [r6, #4]
 8008af2:	f022 0203 	bic.w	r2, r2, #3
 8008af6:	1b11      	subs	r1, r2, r4
 8008af8:	290f      	cmp	r1, #15
 8008afa:	ddea      	ble.n	8008ad2 <_malloc_r+0xb2>
 8008afc:	3b01      	subs	r3, #1
 8008afe:	3301      	adds	r3, #1
 8008b00:	4a72      	ldr	r2, [pc, #456]	; (8008ccc <_malloc_r+0x2ac>)
 8008b02:	692e      	ldr	r6, [r5, #16]
 8008b04:	f102 0708 	add.w	r7, r2, #8
 8008b08:	42be      	cmp	r6, r7
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	d079      	beq.n	8008c02 <_malloc_r+0x1e2>
 8008b0e:	6870      	ldr	r0, [r6, #4]
 8008b10:	f020 0003 	bic.w	r0, r0, #3
 8008b14:	ebc4 0e00 	rsb	lr, r4, r0
 8008b18:	f1be 0f0f 	cmp.w	lr, #15
 8008b1c:	dd0d      	ble.n	8008b3a <_malloc_r+0x11a>
 8008b1e:	1933      	adds	r3, r6, r4
 8008b20:	f044 0401 	orr.w	r4, r4, #1
 8008b24:	6074      	str	r4, [r6, #4]
 8008b26:	6153      	str	r3, [r2, #20]
 8008b28:	6113      	str	r3, [r2, #16]
 8008b2a:	f04e 0201 	orr.w	r2, lr, #1
 8008b2e:	60df      	str	r7, [r3, #12]
 8008b30:	609f      	str	r7, [r3, #8]
 8008b32:	605a      	str	r2, [r3, #4]
 8008b34:	f843 e00e 	str.w	lr, [r3, lr]
 8008b38:	e17b      	b.n	8008e32 <_malloc_r+0x412>
 8008b3a:	f1be 0f00 	cmp.w	lr, #0
 8008b3e:	6157      	str	r7, [r2, #20]
 8008b40:	6117      	str	r7, [r2, #16]
 8008b42:	db05      	blt.n	8008b50 <_malloc_r+0x130>
 8008b44:	4430      	add	r0, r6
 8008b46:	6843      	ldr	r3, [r0, #4]
 8008b48:	f043 0301 	orr.w	r3, r3, #1
 8008b4c:	6043      	str	r3, [r0, #4]
 8008b4e:	e170      	b.n	8008e32 <_malloc_r+0x412>
 8008b50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008b54:	d215      	bcs.n	8008b82 <_malloc_r+0x162>
 8008b56:	08c0      	lsrs	r0, r0, #3
 8008b58:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8008b5c:	2701      	movs	r7, #1
 8008b5e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8008b62:	6857      	ldr	r7, [r2, #4]
 8008b64:	3001      	adds	r0, #1
 8008b66:	ea4e 0707 	orr.w	r7, lr, r7
 8008b6a:	6057      	str	r7, [r2, #4]
 8008b6c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8008b70:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8008b74:	f8c6 e008 	str.w	lr, [r6, #8]
 8008b78:	3f08      	subs	r7, #8
 8008b7a:	60f7      	str	r7, [r6, #12]
 8008b7c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8008b80:	e03d      	b.n	8008bfe <_malloc_r+0x1de>
 8008b82:	0a42      	lsrs	r2, r0, #9
 8008b84:	2a04      	cmp	r2, #4
 8008b86:	d802      	bhi.n	8008b8e <_malloc_r+0x16e>
 8008b88:	0982      	lsrs	r2, r0, #6
 8008b8a:	3238      	adds	r2, #56	; 0x38
 8008b8c:	e015      	b.n	8008bba <_malloc_r+0x19a>
 8008b8e:	2a14      	cmp	r2, #20
 8008b90:	d801      	bhi.n	8008b96 <_malloc_r+0x176>
 8008b92:	325b      	adds	r2, #91	; 0x5b
 8008b94:	e011      	b.n	8008bba <_malloc_r+0x19a>
 8008b96:	2a54      	cmp	r2, #84	; 0x54
 8008b98:	d802      	bhi.n	8008ba0 <_malloc_r+0x180>
 8008b9a:	0b02      	lsrs	r2, r0, #12
 8008b9c:	326e      	adds	r2, #110	; 0x6e
 8008b9e:	e00c      	b.n	8008bba <_malloc_r+0x19a>
 8008ba0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008ba4:	d802      	bhi.n	8008bac <_malloc_r+0x18c>
 8008ba6:	0bc2      	lsrs	r2, r0, #15
 8008ba8:	3277      	adds	r2, #119	; 0x77
 8008baa:	e006      	b.n	8008bba <_malloc_r+0x19a>
 8008bac:	f240 5754 	movw	r7, #1364	; 0x554
 8008bb0:	42ba      	cmp	r2, r7
 8008bb2:	bf9a      	itte	ls
 8008bb4:	0c82      	lsrls	r2, r0, #18
 8008bb6:	327c      	addls	r2, #124	; 0x7c
 8008bb8:	227e      	movhi	r2, #126	; 0x7e
 8008bba:	1c57      	adds	r7, r2, #1
 8008bbc:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008bc0:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8008bc4:	f8df c104 	ldr.w	ip, [pc, #260]	; 8008ccc <_malloc_r+0x2ac>
 8008bc8:	45be      	cmp	lr, r7
 8008bca:	d10d      	bne.n	8008be8 <_malloc_r+0x1c8>
 8008bcc:	2001      	movs	r0, #1
 8008bce:	1092      	asrs	r2, r2, #2
 8008bd0:	fa00 f202 	lsl.w	r2, r0, r2
 8008bd4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008bd8:	4310      	orrs	r0, r2
 8008bda:	f8cc 0004 	str.w	r0, [ip, #4]
 8008bde:	4672      	mov	r2, lr
 8008be0:	e009      	b.n	8008bf6 <_malloc_r+0x1d6>
 8008be2:	68bf      	ldr	r7, [r7, #8]
 8008be4:	45be      	cmp	lr, r7
 8008be6:	d004      	beq.n	8008bf2 <_malloc_r+0x1d2>
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	f022 0203 	bic.w	r2, r2, #3
 8008bee:	4290      	cmp	r0, r2
 8008bf0:	d3f7      	bcc.n	8008be2 <_malloc_r+0x1c2>
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	46be      	mov	lr, r7
 8008bf6:	60f2      	str	r2, [r6, #12]
 8008bf8:	f8c6 e008 	str.w	lr, [r6, #8]
 8008bfc:	6096      	str	r6, [r2, #8]
 8008bfe:	f8ce 600c 	str.w	r6, [lr, #12]
 8008c02:	2001      	movs	r0, #1
 8008c04:	109a      	asrs	r2, r3, #2
 8008c06:	fa00 f202 	lsl.w	r2, r0, r2
 8008c0a:	6868      	ldr	r0, [r5, #4]
 8008c0c:	4282      	cmp	r2, r0
 8008c0e:	d85f      	bhi.n	8008cd0 <_malloc_r+0x2b0>
 8008c10:	4202      	tst	r2, r0
 8008c12:	d106      	bne.n	8008c22 <_malloc_r+0x202>
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	0052      	lsls	r2, r2, #1
 8008c1a:	4202      	tst	r2, r0
 8008c1c:	f103 0304 	add.w	r3, r3, #4
 8008c20:	d0fa      	beq.n	8008c18 <_malloc_r+0x1f8>
 8008c22:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8008c26:	46c2      	mov	sl, r8
 8008c28:	469c      	mov	ip, r3
 8008c2a:	f8da 600c 	ldr.w	r6, [sl, #12]
 8008c2e:	4556      	cmp	r6, sl
 8008c30:	d02c      	beq.n	8008c8c <_malloc_r+0x26c>
 8008c32:	6870      	ldr	r0, [r6, #4]
 8008c34:	68f7      	ldr	r7, [r6, #12]
 8008c36:	f020 0003 	bic.w	r0, r0, #3
 8008c3a:	ebc4 0e00 	rsb	lr, r4, r0
 8008c3e:	f1be 0f0f 	cmp.w	lr, #15
 8008c42:	dd11      	ble.n	8008c68 <_malloc_r+0x248>
 8008c44:	1933      	adds	r3, r6, r4
 8008c46:	f044 0401 	orr.w	r4, r4, #1
 8008c4a:	6074      	str	r4, [r6, #4]
 8008c4c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8008c50:	60d7      	str	r7, [r2, #12]
 8008c52:	60ba      	str	r2, [r7, #8]
 8008c54:	f04e 0201 	orr.w	r2, lr, #1
 8008c58:	616b      	str	r3, [r5, #20]
 8008c5a:	612b      	str	r3, [r5, #16]
 8008c5c:	60d9      	str	r1, [r3, #12]
 8008c5e:	6099      	str	r1, [r3, #8]
 8008c60:	605a      	str	r2, [r3, #4]
 8008c62:	f843 e00e 	str.w	lr, [r3, lr]
 8008c66:	e00b      	b.n	8008c80 <_malloc_r+0x260>
 8008c68:	f1be 0f00 	cmp.w	lr, #0
 8008c6c:	db0c      	blt.n	8008c88 <_malloc_r+0x268>
 8008c6e:	1833      	adds	r3, r6, r0
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	605a      	str	r2, [r3, #4]
 8008c78:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8008c7c:	60df      	str	r7, [r3, #12]
 8008c7e:	60bb      	str	r3, [r7, #8]
 8008c80:	4648      	mov	r0, r9
 8008c82:	f000 f93b 	bl	8008efc <__malloc_unlock>
 8008c86:	e0d8      	b.n	8008e3a <_malloc_r+0x41a>
 8008c88:	463e      	mov	r6, r7
 8008c8a:	e7d0      	b.n	8008c2e <_malloc_r+0x20e>
 8008c8c:	f10c 0c01 	add.w	ip, ip, #1
 8008c90:	f01c 0f03 	tst.w	ip, #3
 8008c94:	f10a 0a08 	add.w	sl, sl, #8
 8008c98:	d1c7      	bne.n	8008c2a <_malloc_r+0x20a>
 8008c9a:	0798      	lsls	r0, r3, #30
 8008c9c:	d104      	bne.n	8008ca8 <_malloc_r+0x288>
 8008c9e:	686b      	ldr	r3, [r5, #4]
 8008ca0:	ea23 0302 	bic.w	r3, r3, r2
 8008ca4:	606b      	str	r3, [r5, #4]
 8008ca6:	e005      	b.n	8008cb4 <_malloc_r+0x294>
 8008ca8:	f858 0908 	ldr.w	r0, [r8], #-8
 8008cac:	4580      	cmp	r8, r0
 8008cae:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cb2:	d0f2      	beq.n	8008c9a <_malloc_r+0x27a>
 8008cb4:	6868      	ldr	r0, [r5, #4]
 8008cb6:	0052      	lsls	r2, r2, #1
 8008cb8:	4282      	cmp	r2, r0
 8008cba:	d809      	bhi.n	8008cd0 <_malloc_r+0x2b0>
 8008cbc:	b142      	cbz	r2, 8008cd0 <_malloc_r+0x2b0>
 8008cbe:	4663      	mov	r3, ip
 8008cc0:	4202      	tst	r2, r0
 8008cc2:	d1ae      	bne.n	8008c22 <_malloc_r+0x202>
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	0052      	lsls	r2, r2, #1
 8008cc8:	e7fa      	b.n	8008cc0 <_malloc_r+0x2a0>
 8008cca:	bf00      	nop
 8008ccc:	200002ac 	.word	0x200002ac
 8008cd0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8008cd4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008cd8:	f026 0603 	bic.w	r6, r6, #3
 8008cdc:	42b4      	cmp	r4, r6
 8008cde:	d803      	bhi.n	8008ce8 <_malloc_r+0x2c8>
 8008ce0:	1b33      	subs	r3, r6, r4
 8008ce2:	2b0f      	cmp	r3, #15
 8008ce4:	f300 809c 	bgt.w	8008e20 <_malloc_r+0x400>
 8008ce8:	4a56      	ldr	r2, [pc, #344]	; (8008e44 <_malloc_r+0x424>)
 8008cea:	4957      	ldr	r1, [pc, #348]	; (8008e48 <_malloc_r+0x428>)
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	6808      	ldr	r0, [r1, #0]
 8008cf0:	9101      	str	r1, [sp, #4]
 8008cf2:	f102 0810 	add.w	r8, r2, #16
 8008cf6:	4a55      	ldr	r2, [pc, #340]	; (8008e4c <_malloc_r+0x42c>)
 8008cf8:	9203      	str	r2, [sp, #12]
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	bf18      	it	ne
 8008cfe:	f102 31ff 	addne.w	r1, r2, #4294967295
 8008d02:	44a0      	add	r8, r4
 8008d04:	bf1e      	ittt	ne
 8008d06:	4488      	addne	r8, r1
 8008d08:	4251      	negne	r1, r2
 8008d0a:	ea01 0808 	andne.w	r8, r1, r8
 8008d0e:	eb0b 0306 	add.w	r3, fp, r6
 8008d12:	4641      	mov	r1, r8
 8008d14:	4648      	mov	r0, r9
 8008d16:	9302      	str	r3, [sp, #8]
 8008d18:	f000 fd7e 	bl	8009818 <_sbrk_r>
 8008d1c:	1c42      	adds	r2, r0, #1
 8008d1e:	4607      	mov	r7, r0
 8008d20:	d06f      	beq.n	8008e02 <_malloc_r+0x3e2>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	9a03      	ldr	r2, [sp, #12]
 8008d26:	4283      	cmp	r3, r0
 8008d28:	d901      	bls.n	8008d2e <_malloc_r+0x30e>
 8008d2a:	45ab      	cmp	fp, r5
 8008d2c:	d169      	bne.n	8008e02 <_malloc_r+0x3e2>
 8008d2e:	f8df a128 	ldr.w	sl, [pc, #296]	; 8008e58 <_malloc_r+0x438>
 8008d32:	f8df c128 	ldr.w	ip, [pc, #296]	; 8008e5c <_malloc_r+0x43c>
 8008d36:	f8da 0000 	ldr.w	r0, [sl]
 8008d3a:	42bb      	cmp	r3, r7
 8008d3c:	4440      	add	r0, r8
 8008d3e:	f8ca 0000 	str.w	r0, [sl]
 8008d42:	d108      	bne.n	8008d56 <_malloc_r+0x336>
 8008d44:	ea13 0f0c 	tst.w	r3, ip
 8008d48:	d105      	bne.n	8008d56 <_malloc_r+0x336>
 8008d4a:	68ab      	ldr	r3, [r5, #8]
 8008d4c:	4446      	add	r6, r8
 8008d4e:	f046 0601 	orr.w	r6, r6, #1
 8008d52:	605e      	str	r6, [r3, #4]
 8008d54:	e049      	b.n	8008dea <_malloc_r+0x3ca>
 8008d56:	9901      	ldr	r1, [sp, #4]
 8008d58:	f8d1 e000 	ldr.w	lr, [r1]
 8008d5c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008d60:	bf15      	itete	ne
 8008d62:	1afb      	subne	r3, r7, r3
 8008d64:	4b38      	ldreq	r3, [pc, #224]	; (8008e48 <_malloc_r+0x428>)
 8008d66:	181b      	addne	r3, r3, r0
 8008d68:	601f      	streq	r7, [r3, #0]
 8008d6a:	bf18      	it	ne
 8008d6c:	f8ca 3000 	strne.w	r3, [sl]
 8008d70:	f017 0307 	ands.w	r3, r7, #7
 8008d74:	bf1c      	itt	ne
 8008d76:	f1c3 0308 	rsbne	r3, r3, #8
 8008d7a:	18ff      	addne	r7, r7, r3
 8008d7c:	44b8      	add	r8, r7
 8008d7e:	441a      	add	r2, r3
 8008d80:	ea08 080c 	and.w	r8, r8, ip
 8008d84:	ebc8 0802 	rsb	r8, r8, r2
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	f000 fd44 	bl	8009818 <_sbrk_r>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	bf04      	itt	eq
 8008d94:	4638      	moveq	r0, r7
 8008d96:	f04f 0800 	moveq.w	r8, #0
 8008d9a:	f8da 3000 	ldr.w	r3, [sl]
 8008d9e:	60af      	str	r7, [r5, #8]
 8008da0:	1bc2      	subs	r2, r0, r7
 8008da2:	4442      	add	r2, r8
 8008da4:	4443      	add	r3, r8
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	45ab      	cmp	fp, r5
 8008dac:	f8ca 3000 	str.w	r3, [sl]
 8008db0:	607a      	str	r2, [r7, #4]
 8008db2:	d01a      	beq.n	8008dea <_malloc_r+0x3ca>
 8008db4:	2e0f      	cmp	r6, #15
 8008db6:	d802      	bhi.n	8008dbe <_malloc_r+0x39e>
 8008db8:	2301      	movs	r3, #1
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	e021      	b.n	8008e02 <_malloc_r+0x3e2>
 8008dbe:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008dc2:	3e0c      	subs	r6, #12
 8008dc4:	f026 0607 	bic.w	r6, r6, #7
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	4333      	orrs	r3, r6
 8008dce:	f8cb 3004 	str.w	r3, [fp, #4]
 8008dd2:	eb0b 0306 	add.w	r3, fp, r6
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	2e0f      	cmp	r6, #15
 8008dda:	605a      	str	r2, [r3, #4]
 8008ddc:	609a      	str	r2, [r3, #8]
 8008dde:	d904      	bls.n	8008dea <_malloc_r+0x3ca>
 8008de0:	f10b 0108 	add.w	r1, fp, #8
 8008de4:	4648      	mov	r0, r9
 8008de6:	f7ff fc97 	bl	8008718 <_free_r>
 8008dea:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <_malloc_r+0x430>)
 8008dec:	f8da 3000 	ldr.w	r3, [sl]
 8008df0:	6811      	ldr	r1, [r2, #0]
 8008df2:	428b      	cmp	r3, r1
 8008df4:	bf88      	it	hi
 8008df6:	6013      	strhi	r3, [r2, #0]
 8008df8:	4a16      	ldr	r2, [pc, #88]	; (8008e54 <_malloc_r+0x434>)
 8008dfa:	6811      	ldr	r1, [r2, #0]
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	bf88      	it	hi
 8008e00:	6013      	strhi	r3, [r2, #0]
 8008e02:	68ab      	ldr	r3, [r5, #8]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	f022 0203 	bic.w	r2, r2, #3
 8008e0a:	4294      	cmp	r4, r2
 8008e0c:	eba2 0304 	sub.w	r3, r2, r4
 8008e10:	d801      	bhi.n	8008e16 <_malloc_r+0x3f6>
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	dc04      	bgt.n	8008e20 <_malloc_r+0x400>
 8008e16:	4648      	mov	r0, r9
 8008e18:	f000 f870 	bl	8008efc <__malloc_unlock>
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	e00c      	b.n	8008e3a <_malloc_r+0x41a>
 8008e20:	68ae      	ldr	r6, [r5, #8]
 8008e22:	f044 0201 	orr.w	r2, r4, #1
 8008e26:	4434      	add	r4, r6
 8008e28:	f043 0301 	orr.w	r3, r3, #1
 8008e2c:	6072      	str	r2, [r6, #4]
 8008e2e:	60ac      	str	r4, [r5, #8]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	4648      	mov	r0, r9
 8008e34:	f000 f862 	bl	8008efc <__malloc_unlock>
 8008e38:	3608      	adds	r6, #8
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	b005      	add	sp, #20
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	bf00      	nop
 8008e44:	20000928 	.word	0x20000928
 8008e48:	200006b8 	.word	0x200006b8
 8008e4c:	00000080 	.word	0x00000080
 8008e50:	20000924 	.word	0x20000924
 8008e54:	20000920 	.word	0x20000920
 8008e58:	2000092c 	.word	0x2000092c
 8008e5c:	0000007f 	.word	0x0000007f

08008e60 <_mbrtowc_r>:
 8008e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	4616      	mov	r6, r2
 8008e66:	4a10      	ldr	r2, [pc, #64]	; (8008ea8 <_mbrtowc_r+0x48>)
 8008e68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008e6a:	6817      	ldr	r7, [r2, #0]
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	4688      	mov	r8, r1
 8008e70:	4699      	mov	r9, r3
 8008e72:	b93e      	cbnz	r6, 8008e84 <_mbrtowc_r+0x24>
 8008e74:	f7ff fd56 	bl	8008924 <__locale_charset>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e88d 0021 	stmia.w	sp, {r0, r5}
 8008e7e:	4a0b      	ldr	r2, [pc, #44]	; (8008eac <_mbrtowc_r+0x4c>)
 8008e80:	4631      	mov	r1, r6
 8008e82:	e006      	b.n	8008e92 <_mbrtowc_r+0x32>
 8008e84:	f7ff fd4e 	bl	8008924 <__locale_charset>
 8008e88:	e88d 0021 	stmia.w	sp, {r0, r5}
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	4632      	mov	r2, r6
 8008e90:	4641      	mov	r1, r8
 8008e92:	4620      	mov	r0, r4
 8008e94:	47b8      	blx	r7
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	bf01      	itttt	eq
 8008e9a:	2300      	moveq	r3, #0
 8008e9c:	602b      	streq	r3, [r5, #0]
 8008e9e:	238a      	moveq	r3, #138	; 0x8a
 8008ea0:	6023      	streq	r3, [r4, #0]
 8008ea2:	b003      	add	sp, #12
 8008ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ea8:	200006bc 	.word	0x200006bc
 8008eac:	0800cf9f 	.word	0x0800cf9f

08008eb0 <__ascii_mbtowc>:
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	b901      	cbnz	r1, 8008eb6 <__ascii_mbtowc+0x6>
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	b13a      	cbz	r2, 8008ec8 <__ascii_mbtowc+0x18>
 8008eb8:	b143      	cbz	r3, 8008ecc <__ascii_mbtowc+0x1c>
 8008eba:	7813      	ldrb	r3, [r2, #0]
 8008ebc:	600b      	str	r3, [r1, #0]
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	1c10      	adds	r0, r2, #0
 8008ec2:	bf18      	it	ne
 8008ec4:	2001      	movne	r0, #1
 8008ec6:	e003      	b.n	8008ed0 <__ascii_mbtowc+0x20>
 8008ec8:	4610      	mov	r0, r2
 8008eca:	e001      	b.n	8008ed0 <__ascii_mbtowc+0x20>
 8008ecc:	f06f 0001 	mvn.w	r0, #1
 8008ed0:	b002      	add	sp, #8
 8008ed2:	4770      	bx	lr

08008ed4 <memcpy>:
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	1e43      	subs	r3, r0, #1
 8008ed8:	440a      	add	r2, r1
 8008eda:	4291      	cmp	r1, r2
 8008edc:	d004      	beq.n	8008ee8 <memcpy+0x14>
 8008ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee6:	e7f8      	b.n	8008eda <memcpy+0x6>
 8008ee8:	bd10      	pop	{r4, pc}

08008eea <memset>:
 8008eea:	4402      	add	r2, r0
 8008eec:	4603      	mov	r3, r0
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d002      	beq.n	8008ef8 <memset+0xe>
 8008ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef6:	e7fa      	b.n	8008eee <memset+0x4>
 8008ef8:	4770      	bx	lr

08008efa <__malloc_lock>:
 8008efa:	4770      	bx	lr

08008efc <__malloc_unlock>:
 8008efc:	4770      	bx	lr

08008efe <_Balloc>:
 8008efe:	b570      	push	{r4, r5, r6, lr}
 8008f00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f02:	4604      	mov	r4, r0
 8008f04:	460e      	mov	r6, r1
 8008f06:	b93d      	cbnz	r5, 8008f18 <_Balloc+0x1a>
 8008f08:	2010      	movs	r0, #16
 8008f0a:	f7ff fd81 	bl	8008a10 <malloc>
 8008f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f10:	6045      	str	r5, [r0, #4]
 8008f12:	6085      	str	r5, [r0, #8]
 8008f14:	6005      	str	r5, [r0, #0]
 8008f16:	60c5      	str	r5, [r0, #12]
 8008f18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008f1a:	68eb      	ldr	r3, [r5, #12]
 8008f1c:	b143      	cbz	r3, 8008f30 <_Balloc+0x32>
 8008f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f26:	b178      	cbz	r0, 8008f48 <_Balloc+0x4a>
 8008f28:	6802      	ldr	r2, [r0, #0]
 8008f2a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f2e:	e017      	b.n	8008f60 <_Balloc+0x62>
 8008f30:	2221      	movs	r2, #33	; 0x21
 8008f32:	2104      	movs	r1, #4
 8008f34:	4620      	mov	r0, r4
 8008f36:	f002 fe47 	bl	800bbc8 <_calloc_r>
 8008f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3c:	60e8      	str	r0, [r5, #12]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1ec      	bne.n	8008f1e <_Balloc+0x20>
 8008f44:	2000      	movs	r0, #0
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	2101      	movs	r1, #1
 8008f4a:	fa01 f506 	lsl.w	r5, r1, r6
 8008f4e:	1d6a      	adds	r2, r5, #5
 8008f50:	0092      	lsls	r2, r2, #2
 8008f52:	4620      	mov	r0, r4
 8008f54:	f002 fe38 	bl	800bbc8 <_calloc_r>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d0f3      	beq.n	8008f44 <_Balloc+0x46>
 8008f5c:	6046      	str	r6, [r0, #4]
 8008f5e:	6085      	str	r5, [r0, #8]
 8008f60:	2300      	movs	r3, #0
 8008f62:	6103      	str	r3, [r0, #16]
 8008f64:	60c3      	str	r3, [r0, #12]
 8008f66:	bd70      	pop	{r4, r5, r6, pc}

08008f68 <_Bfree>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	460d      	mov	r5, r1
 8008f70:	b93c      	cbnz	r4, 8008f82 <_Bfree+0x1a>
 8008f72:	2010      	movs	r0, #16
 8008f74:	f7ff fd4c 	bl	8008a10 <malloc>
 8008f78:	6270      	str	r0, [r6, #36]	; 0x24
 8008f7a:	6044      	str	r4, [r0, #4]
 8008f7c:	6084      	str	r4, [r0, #8]
 8008f7e:	6004      	str	r4, [r0, #0]
 8008f80:	60c4      	str	r4, [r0, #12]
 8008f82:	b13d      	cbz	r5, 8008f94 <_Bfree+0x2c>
 8008f84:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f86:	686a      	ldr	r2, [r5, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f8e:	6029      	str	r1, [r5, #0]
 8008f90:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f94:	bd70      	pop	{r4, r5, r6, pc}

08008f96 <__multadd>:
 8008f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9a:	690d      	ldr	r5, [r1, #16]
 8008f9c:	461f      	mov	r7, r3
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	f101 0e14 	add.w	lr, r1, #20
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f8de 0000 	ldr.w	r0, [lr]
 8008fac:	b281      	uxth	r1, r0
 8008fae:	fb02 7101 	mla	r1, r2, r1, r7
 8008fb2:	0c0f      	lsrs	r7, r1, #16
 8008fb4:	0c00      	lsrs	r0, r0, #16
 8008fb6:	fb02 7000 	mla	r0, r2, r0, r7
 8008fba:	b289      	uxth	r1, r1
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008fc2:	429d      	cmp	r5, r3
 8008fc4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008fc8:	f84e 1b04 	str.w	r1, [lr], #4
 8008fcc:	dcec      	bgt.n	8008fa8 <__multadd+0x12>
 8008fce:	b1d7      	cbz	r7, 8009006 <__multadd+0x70>
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	db12      	blt.n	8008ffc <__multadd+0x66>
 8008fd6:	6861      	ldr	r1, [r4, #4]
 8008fd8:	4630      	mov	r0, r6
 8008fda:	3101      	adds	r1, #1
 8008fdc:	f7ff ff8f 	bl	8008efe <_Balloc>
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	3202      	adds	r2, #2
 8008fe4:	f104 010c 	add.w	r1, r4, #12
 8008fe8:	4680      	mov	r8, r0
 8008fea:	0092      	lsls	r2, r2, #2
 8008fec:	300c      	adds	r0, #12
 8008fee:	f7ff ff71 	bl	8008ed4 <memcpy>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f7ff ffb7 	bl	8008f68 <_Bfree>
 8008ffa:	4644      	mov	r4, r8
 8008ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009000:	3501      	adds	r5, #1
 8009002:	615f      	str	r7, [r3, #20]
 8009004:	6125      	str	r5, [r4, #16]
 8009006:	4620      	mov	r0, r4
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800900c <__s2b>:
 800900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	4615      	mov	r5, r2
 8009014:	461f      	mov	r7, r3
 8009016:	2209      	movs	r2, #9
 8009018:	3308      	adds	r3, #8
 800901a:	4606      	mov	r6, r0
 800901c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009020:	2100      	movs	r1, #0
 8009022:	2201      	movs	r2, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	da02      	bge.n	800902e <__s2b+0x22>
 8009028:	0052      	lsls	r2, r2, #1
 800902a:	3101      	adds	r1, #1
 800902c:	e7fa      	b.n	8009024 <__s2b+0x18>
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff65 	bl	8008efe <_Balloc>
 8009034:	9b08      	ldr	r3, [sp, #32]
 8009036:	6143      	str	r3, [r0, #20]
 8009038:	2d09      	cmp	r5, #9
 800903a:	f04f 0301 	mov.w	r3, #1
 800903e:	6103      	str	r3, [r0, #16]
 8009040:	dd11      	ble.n	8009066 <__s2b+0x5a>
 8009042:	f104 0809 	add.w	r8, r4, #9
 8009046:	46c1      	mov	r9, r8
 8009048:	442c      	add	r4, r5
 800904a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800904e:	4601      	mov	r1, r0
 8009050:	3b30      	subs	r3, #48	; 0x30
 8009052:	220a      	movs	r2, #10
 8009054:	4630      	mov	r0, r6
 8009056:	f7ff ff9e 	bl	8008f96 <__multadd>
 800905a:	45a1      	cmp	r9, r4
 800905c:	d1f5      	bne.n	800904a <__s2b+0x3e>
 800905e:	eb08 0405 	add.w	r4, r8, r5
 8009062:	3c08      	subs	r4, #8
 8009064:	e001      	b.n	800906a <__s2b+0x5e>
 8009066:	340a      	adds	r4, #10
 8009068:	2509      	movs	r5, #9
 800906a:	1b2d      	subs	r5, r5, r4
 800906c:	1963      	adds	r3, r4, r5
 800906e:	429f      	cmp	r7, r3
 8009070:	dd08      	ble.n	8009084 <__s2b+0x78>
 8009072:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009076:	4601      	mov	r1, r0
 8009078:	3b30      	subs	r3, #48	; 0x30
 800907a:	220a      	movs	r2, #10
 800907c:	4630      	mov	r0, r6
 800907e:	f7ff ff8a 	bl	8008f96 <__multadd>
 8009082:	e7f3      	b.n	800906c <__s2b+0x60>
 8009084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009088 <__hi0bits>:
 8009088:	0c03      	lsrs	r3, r0, #16
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	b913      	cbnz	r3, 8009094 <__hi0bits+0xc>
 800908e:	0400      	lsls	r0, r0, #16
 8009090:	2310      	movs	r3, #16
 8009092:	e000      	b.n	8009096 <__hi0bits+0xe>
 8009094:	2300      	movs	r3, #0
 8009096:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800909a:	bf04      	itt	eq
 800909c:	0200      	lsleq	r0, r0, #8
 800909e:	3308      	addeq	r3, #8
 80090a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090a4:	bf04      	itt	eq
 80090a6:	0100      	lsleq	r0, r0, #4
 80090a8:	3304      	addeq	r3, #4
 80090aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090ae:	bf04      	itt	eq
 80090b0:	0080      	lsleq	r0, r0, #2
 80090b2:	3302      	addeq	r3, #2
 80090b4:	2800      	cmp	r0, #0
 80090b6:	db03      	blt.n	80090c0 <__hi0bits+0x38>
 80090b8:	0042      	lsls	r2, r0, #1
 80090ba:	d503      	bpl.n	80090c4 <__hi0bits+0x3c>
 80090bc:	1c58      	adds	r0, r3, #1
 80090be:	4770      	bx	lr
 80090c0:	4618      	mov	r0, r3
 80090c2:	4770      	bx	lr
 80090c4:	2020      	movs	r0, #32
 80090c6:	4770      	bx	lr

080090c8 <__lo0bits>:
 80090c8:	6803      	ldr	r3, [r0, #0]
 80090ca:	f013 0207 	ands.w	r2, r3, #7
 80090ce:	d00b      	beq.n	80090e8 <__lo0bits+0x20>
 80090d0:	07d9      	lsls	r1, r3, #31
 80090d2:	d422      	bmi.n	800911a <__lo0bits+0x52>
 80090d4:	079a      	lsls	r2, r3, #30
 80090d6:	bf4b      	itete	mi
 80090d8:	085b      	lsrmi	r3, r3, #1
 80090da:	089b      	lsrpl	r3, r3, #2
 80090dc:	6003      	strmi	r3, [r0, #0]
 80090de:	6003      	strpl	r3, [r0, #0]
 80090e0:	bf4c      	ite	mi
 80090e2:	2001      	movmi	r0, #1
 80090e4:	2002      	movpl	r0, #2
 80090e6:	4770      	bx	lr
 80090e8:	b299      	uxth	r1, r3
 80090ea:	b909      	cbnz	r1, 80090f0 <__lo0bits+0x28>
 80090ec:	0c1b      	lsrs	r3, r3, #16
 80090ee:	2210      	movs	r2, #16
 80090f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090f4:	bf04      	itt	eq
 80090f6:	0a1b      	lsreq	r3, r3, #8
 80090f8:	3208      	addeq	r2, #8
 80090fa:	0719      	lsls	r1, r3, #28
 80090fc:	bf04      	itt	eq
 80090fe:	091b      	lsreq	r3, r3, #4
 8009100:	3204      	addeq	r2, #4
 8009102:	0799      	lsls	r1, r3, #30
 8009104:	bf04      	itt	eq
 8009106:	089b      	lsreq	r3, r3, #2
 8009108:	3202      	addeq	r2, #2
 800910a:	07d9      	lsls	r1, r3, #31
 800910c:	d402      	bmi.n	8009114 <__lo0bits+0x4c>
 800910e:	085b      	lsrs	r3, r3, #1
 8009110:	d005      	beq.n	800911e <__lo0bits+0x56>
 8009112:	3201      	adds	r2, #1
 8009114:	6003      	str	r3, [r0, #0]
 8009116:	4610      	mov	r0, r2
 8009118:	4770      	bx	lr
 800911a:	2000      	movs	r0, #0
 800911c:	4770      	bx	lr
 800911e:	2020      	movs	r0, #32
 8009120:	4770      	bx	lr

08009122 <__i2b>:
 8009122:	b510      	push	{r4, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	2101      	movs	r1, #1
 8009128:	f7ff fee9 	bl	8008efe <_Balloc>
 800912c:	2201      	movs	r2, #1
 800912e:	6144      	str	r4, [r0, #20]
 8009130:	6102      	str	r2, [r0, #16]
 8009132:	bd10      	pop	{r4, pc}

08009134 <__multiply>:
 8009134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	4614      	mov	r4, r2
 800913a:	690a      	ldr	r2, [r1, #16]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	429a      	cmp	r2, r3
 8009140:	bfb8      	it	lt
 8009142:	460b      	movlt	r3, r1
 8009144:	4688      	mov	r8, r1
 8009146:	bfbc      	itt	lt
 8009148:	46a0      	movlt	r8, r4
 800914a:	461c      	movlt	r4, r3
 800914c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009150:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009154:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009158:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800915c:	eb07 0609 	add.w	r6, r7, r9
 8009160:	429e      	cmp	r6, r3
 8009162:	bfc8      	it	gt
 8009164:	3101      	addgt	r1, #1
 8009166:	f7ff feca 	bl	8008efe <_Balloc>
 800916a:	f100 0514 	add.w	r5, r0, #20
 800916e:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8009172:	462b      	mov	r3, r5
 8009174:	2200      	movs	r2, #0
 8009176:	4563      	cmp	r3, ip
 8009178:	d202      	bcs.n	8009180 <__multiply+0x4c>
 800917a:	f843 2b04 	str.w	r2, [r3], #4
 800917e:	e7fa      	b.n	8009176 <__multiply+0x42>
 8009180:	f104 0214 	add.w	r2, r4, #20
 8009184:	f108 0114 	add.w	r1, r8, #20
 8009188:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800918c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	9b00      	ldr	r3, [sp, #0]
 8009194:	9201      	str	r2, [sp, #4]
 8009196:	4293      	cmp	r3, r2
 8009198:	d957      	bls.n	800924a <__multiply+0x116>
 800919a:	f8b2 b000 	ldrh.w	fp, [r2]
 800919e:	f1bb 0f00 	cmp.w	fp, #0
 80091a2:	d023      	beq.n	80091ec <__multiply+0xb8>
 80091a4:	4689      	mov	r9, r1
 80091a6:	46ae      	mov	lr, r5
 80091a8:	f04f 0800 	mov.w	r8, #0
 80091ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80091b0:	f8be a000 	ldrh.w	sl, [lr]
 80091b4:	b2a3      	uxth	r3, r4
 80091b6:	fb0b a303 	mla	r3, fp, r3, sl
 80091ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091be:	f8de 4000 	ldr.w	r4, [lr]
 80091c2:	4443      	add	r3, r8
 80091c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091c8:	fb0b 840a 	mla	r4, fp, sl, r8
 80091cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80091d0:	46f2      	mov	sl, lr
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091d8:	454f      	cmp	r7, r9
 80091da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091de:	f84a 3b04 	str.w	r3, [sl], #4
 80091e2:	d901      	bls.n	80091e8 <__multiply+0xb4>
 80091e4:	46d6      	mov	lr, sl
 80091e6:	e7e1      	b.n	80091ac <__multiply+0x78>
 80091e8:	f8ce 8004 	str.w	r8, [lr, #4]
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80091f2:	3204      	adds	r2, #4
 80091f4:	f1ba 0f00 	cmp.w	sl, #0
 80091f8:	d021      	beq.n	800923e <__multiply+0x10a>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	462c      	mov	r4, r5
 80091fe:	4689      	mov	r9, r1
 8009200:	f04f 0800 	mov.w	r8, #0
 8009204:	f8b9 e000 	ldrh.w	lr, [r9]
 8009208:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800920c:	fb0a be0e 	mla	lr, sl, lr, fp
 8009210:	44f0      	add	r8, lr
 8009212:	46a3      	mov	fp, r4
 8009214:	b29b      	uxth	r3, r3
 8009216:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800921a:	f84b 3b04 	str.w	r3, [fp], #4
 800921e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009222:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8009226:	0c1b      	lsrs	r3, r3, #16
 8009228:	fb0a e303 	mla	r3, sl, r3, lr
 800922c:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8009230:	454f      	cmp	r7, r9
 8009232:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8009236:	d901      	bls.n	800923c <__multiply+0x108>
 8009238:	465c      	mov	r4, fp
 800923a:	e7e3      	b.n	8009204 <__multiply+0xd0>
 800923c:	6063      	str	r3, [r4, #4]
 800923e:	3504      	adds	r5, #4
 8009240:	e7a7      	b.n	8009192 <__multiply+0x5e>
 8009242:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8009246:	b913      	cbnz	r3, 800924e <__multiply+0x11a>
 8009248:	3e01      	subs	r6, #1
 800924a:	2e00      	cmp	r6, #0
 800924c:	dcf9      	bgt.n	8009242 <__multiply+0x10e>
 800924e:	6106      	str	r6, [r0, #16]
 8009250:	b003      	add	sp, #12
 8009252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	3a01      	subs	r2, #1
 800926a:	4c21      	ldr	r4, [pc, #132]	; (80092f0 <__pow5mult+0x98>)
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fe90 	bl	8008f96 <__multadd>
 8009276:	4607      	mov	r7, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d036      	beq.n	80092ea <__pow5mult+0x92>
 800927c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800927e:	b93c      	cbnz	r4, 8009290 <__pow5mult+0x38>
 8009280:	2010      	movs	r0, #16
 8009282:	f7ff fbc5 	bl	8008a10 <malloc>
 8009286:	6270      	str	r0, [r6, #36]	; 0x24
 8009288:	6044      	str	r4, [r0, #4]
 800928a:	6084      	str	r4, [r0, #8]
 800928c:	6004      	str	r4, [r0, #0]
 800928e:	60c4      	str	r4, [r0, #12]
 8009290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009298:	b94c      	cbnz	r4, 80092ae <__pow5mult+0x56>
 800929a:	f240 2171 	movw	r1, #625	; 0x271
 800929e:	4630      	mov	r0, r6
 80092a0:	f7ff ff3f 	bl	8009122 <__i2b>
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092aa:	4604      	mov	r4, r0
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	07eb      	lsls	r3, r5, #31
 80092b4:	d50a      	bpl.n	80092cc <__pow5mult+0x74>
 80092b6:	4639      	mov	r1, r7
 80092b8:	4622      	mov	r2, r4
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7ff ff3a 	bl	8009134 <__multiply>
 80092c0:	4639      	mov	r1, r7
 80092c2:	4681      	mov	r9, r0
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff fe4f 	bl	8008f68 <_Bfree>
 80092ca:	464f      	mov	r7, r9
 80092cc:	106d      	asrs	r5, r5, #1
 80092ce:	d00c      	beq.n	80092ea <__pow5mult+0x92>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	b108      	cbz	r0, 80092d8 <__pow5mult+0x80>
 80092d4:	4604      	mov	r4, r0
 80092d6:	e7ec      	b.n	80092b2 <__pow5mult+0x5a>
 80092d8:	4622      	mov	r2, r4
 80092da:	4621      	mov	r1, r4
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff ff29 	bl	8009134 <__multiply>
 80092e2:	6020      	str	r0, [r4, #0]
 80092e4:	f8c0 8000 	str.w	r8, [r0]
 80092e8:	e7f4      	b.n	80092d4 <__pow5mult+0x7c>
 80092ea:	4638      	mov	r0, r7
 80092ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f0:	0800d090 	.word	0x0800d090

080092f4 <__lshift>:
 80092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	460c      	mov	r4, r1
 80092fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092fe:	6926      	ldr	r6, [r4, #16]
 8009300:	6849      	ldr	r1, [r1, #4]
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	4456      	add	r6, sl
 8009306:	4607      	mov	r7, r0
 8009308:	4691      	mov	r9, r2
 800930a:	1c75      	adds	r5, r6, #1
 800930c:	42ab      	cmp	r3, r5
 800930e:	da02      	bge.n	8009316 <__lshift+0x22>
 8009310:	3101      	adds	r1, #1
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	e7fa      	b.n	800930c <__lshift+0x18>
 8009316:	4638      	mov	r0, r7
 8009318:	f7ff fdf1 	bl	8008efe <_Balloc>
 800931c:	2300      	movs	r3, #0
 800931e:	4680      	mov	r8, r0
 8009320:	f100 0114 	add.w	r1, r0, #20
 8009324:	461a      	mov	r2, r3
 8009326:	4553      	cmp	r3, sl
 8009328:	da03      	bge.n	8009332 <__lshift+0x3e>
 800932a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800932e:	3301      	adds	r3, #1
 8009330:	e7f9      	b.n	8009326 <__lshift+0x32>
 8009332:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8009336:	6920      	ldr	r0, [r4, #16]
 8009338:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800933c:	f019 091f 	ands.w	r9, r9, #31
 8009340:	f104 0114 	add.w	r1, r4, #20
 8009344:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009348:	d014      	beq.n	8009374 <__lshift+0x80>
 800934a:	f1c9 0c20 	rsb	ip, r9, #32
 800934e:	2200      	movs	r2, #0
 8009350:	6808      	ldr	r0, [r1, #0]
 8009352:	fa00 f009 	lsl.w	r0, r0, r9
 8009356:	4302      	orrs	r2, r0
 8009358:	469a      	mov	sl, r3
 800935a:	f843 2b04 	str.w	r2, [r3], #4
 800935e:	f851 2b04 	ldr.w	r2, [r1], #4
 8009362:	458e      	cmp	lr, r1
 8009364:	fa22 f20c 	lsr.w	r2, r2, ip
 8009368:	d8f2      	bhi.n	8009350 <__lshift+0x5c>
 800936a:	f8ca 2004 	str.w	r2, [sl, #4]
 800936e:	b142      	cbz	r2, 8009382 <__lshift+0x8e>
 8009370:	1cb5      	adds	r5, r6, #2
 8009372:	e006      	b.n	8009382 <__lshift+0x8e>
 8009374:	3b04      	subs	r3, #4
 8009376:	f851 2b04 	ldr.w	r2, [r1], #4
 800937a:	f843 2f04 	str.w	r2, [r3, #4]!
 800937e:	458e      	cmp	lr, r1
 8009380:	d8f9      	bhi.n	8009376 <__lshift+0x82>
 8009382:	3d01      	subs	r5, #1
 8009384:	4638      	mov	r0, r7
 8009386:	f8c8 5010 	str.w	r5, [r8, #16]
 800938a:	4621      	mov	r1, r4
 800938c:	f7ff fdec 	bl	8008f68 <_Bfree>
 8009390:	4640      	mov	r0, r8
 8009392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009396 <__mcmp>:
 8009396:	6903      	ldr	r3, [r0, #16]
 8009398:	690a      	ldr	r2, [r1, #16]
 800939a:	1a9b      	subs	r3, r3, r2
 800939c:	b510      	push	{r4, lr}
 800939e:	d111      	bne.n	80093c4 <__mcmp+0x2e>
 80093a0:	0092      	lsls	r2, r2, #2
 80093a2:	3014      	adds	r0, #20
 80093a4:	3114      	adds	r1, #20
 80093a6:	1883      	adds	r3, r0, r2
 80093a8:	440a      	add	r2, r1
 80093aa:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80093ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80093b2:	428c      	cmp	r4, r1
 80093b4:	d002      	beq.n	80093bc <__mcmp+0x26>
 80093b6:	d307      	bcc.n	80093c8 <__mcmp+0x32>
 80093b8:	2001      	movs	r0, #1
 80093ba:	bd10      	pop	{r4, pc}
 80093bc:	4298      	cmp	r0, r3
 80093be:	d3f4      	bcc.n	80093aa <__mcmp+0x14>
 80093c0:	2000      	movs	r0, #0
 80093c2:	bd10      	pop	{r4, pc}
 80093c4:	4618      	mov	r0, r3
 80093c6:	bd10      	pop	{r4, pc}
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	bd10      	pop	{r4, pc}

080093ce <__mdiff>:
 80093ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d2:	460c      	mov	r4, r1
 80093d4:	4607      	mov	r7, r0
 80093d6:	4611      	mov	r1, r2
 80093d8:	4620      	mov	r0, r4
 80093da:	4615      	mov	r5, r2
 80093dc:	f7ff ffdb 	bl	8009396 <__mcmp>
 80093e0:	1e06      	subs	r6, r0, #0
 80093e2:	d108      	bne.n	80093f6 <__mdiff+0x28>
 80093e4:	4631      	mov	r1, r6
 80093e6:	4638      	mov	r0, r7
 80093e8:	f7ff fd89 	bl	8008efe <_Balloc>
 80093ec:	2301      	movs	r3, #1
 80093ee:	6103      	str	r3, [r0, #16]
 80093f0:	6146      	str	r6, [r0, #20]
 80093f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f6:	bfbc      	itt	lt
 80093f8:	4623      	movlt	r3, r4
 80093fa:	462c      	movlt	r4, r5
 80093fc:	4638      	mov	r0, r7
 80093fe:	6861      	ldr	r1, [r4, #4]
 8009400:	bfba      	itte	lt
 8009402:	461d      	movlt	r5, r3
 8009404:	2601      	movlt	r6, #1
 8009406:	2600      	movge	r6, #0
 8009408:	f7ff fd79 	bl	8008efe <_Balloc>
 800940c:	692b      	ldr	r3, [r5, #16]
 800940e:	60c6      	str	r6, [r0, #12]
 8009410:	6926      	ldr	r6, [r4, #16]
 8009412:	f105 0914 	add.w	r9, r5, #20
 8009416:	3414      	adds	r4, #20
 8009418:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800941c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009420:	f100 0514 	add.w	r5, r0, #20
 8009424:	f04f 0c00 	mov.w	ip, #0
 8009428:	f854 3b04 	ldr.w	r3, [r4], #4
 800942c:	f859 2b04 	ldr.w	r2, [r9], #4
 8009430:	fa1c f183 	uxtah	r1, ip, r3
 8009434:	fa1f fe82 	uxth.w	lr, r2
 8009438:	0c12      	lsrs	r2, r2, #16
 800943a:	ebce 0101 	rsb	r1, lr, r1
 800943e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8009442:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009446:	b289      	uxth	r1, r1
 8009448:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800944c:	45c8      	cmp	r8, r9
 800944e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009452:	46a6      	mov	lr, r4
 8009454:	f845 3b04 	str.w	r3, [r5], #4
 8009458:	d8e6      	bhi.n	8009428 <__mdiff+0x5a>
 800945a:	45be      	cmp	lr, r7
 800945c:	d20e      	bcs.n	800947c <__mdiff+0xae>
 800945e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009462:	fa1c f281 	uxtah	r2, ip, r1
 8009466:	1413      	asrs	r3, r2, #16
 8009468:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800946c:	b292      	uxth	r2, r2
 800946e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009472:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009476:	f845 2b04 	str.w	r2, [r5], #4
 800947a:	e7ee      	b.n	800945a <__mdiff+0x8c>
 800947c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009480:	b90b      	cbnz	r3, 8009486 <__mdiff+0xb8>
 8009482:	3e01      	subs	r6, #1
 8009484:	e7fa      	b.n	800947c <__mdiff+0xae>
 8009486:	6106      	str	r6, [r0, #16]
 8009488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800948c <__ulp>:
 800948c:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <__ulp+0x4c>)
 800948e:	ee10 2a90 	vmov	r2, s1
 8009492:	401a      	ands	r2, r3
 8009494:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009498:	2b00      	cmp	r3, #0
 800949a:	dd02      	ble.n	80094a2 <__ulp+0x16>
 800949c:	2000      	movs	r0, #0
 800949e:	4619      	mov	r1, r3
 80094a0:	e017      	b.n	80094d2 <__ulp+0x46>
 80094a2:	425b      	negs	r3, r3
 80094a4:	151b      	asrs	r3, r3, #20
 80094a6:	2b13      	cmp	r3, #19
 80094a8:	f04f 0000 	mov.w	r0, #0
 80094ac:	f04f 0100 	mov.w	r1, #0
 80094b0:	dc04      	bgt.n	80094bc <__ulp+0x30>
 80094b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80094b6:	fa42 f103 	asr.w	r1, r2, r3
 80094ba:	e00a      	b.n	80094d2 <__ulp+0x46>
 80094bc:	3b14      	subs	r3, #20
 80094be:	2b1e      	cmp	r3, #30
 80094c0:	f04f 0201 	mov.w	r2, #1
 80094c4:	bfda      	itte	le
 80094c6:	f1c3 031f 	rsble	r3, r3, #31
 80094ca:	fa02 f303 	lslle.w	r3, r2, r3
 80094ce:	4613      	movgt	r3, r2
 80094d0:	4618      	mov	r0, r3
 80094d2:	ec41 0b10 	vmov	d0, r0, r1
 80094d6:	4770      	bx	lr
 80094d8:	7ff00000 	.word	0x7ff00000

080094dc <__b2d>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	6905      	ldr	r5, [r0, #16]
 80094e0:	f100 0614 	add.w	r6, r0, #20
 80094e4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80094e8:	1f2f      	subs	r7, r5, #4
 80094ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7ff fdca 	bl	8009088 <__hi0bits>
 80094f4:	f1c0 0320 	rsb	r3, r0, #32
 80094f8:	280a      	cmp	r0, #10
 80094fa:	600b      	str	r3, [r1, #0]
 80094fc:	dc14      	bgt.n	8009528 <__b2d+0x4c>
 80094fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009502:	fa24 f10e 	lsr.w	r1, r4, lr
 8009506:	42be      	cmp	r6, r7
 8009508:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 800950c:	bf34      	ite	cc
 800950e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009512:	2100      	movcs	r1, #0
 8009514:	3015      	adds	r0, #21
 8009516:	fa04 f000 	lsl.w	r0, r4, r0
 800951a:	fa21 f10e 	lsr.w	r1, r1, lr
 800951e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009522:	ea40 0201 	orr.w	r2, r0, r1
 8009526:	e023      	b.n	8009570 <__b2d+0x94>
 8009528:	42be      	cmp	r6, r7
 800952a:	bf3a      	itte	cc
 800952c:	f1a5 0708 	subcc.w	r7, r5, #8
 8009530:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009534:	2100      	movcs	r1, #0
 8009536:	380b      	subs	r0, #11
 8009538:	d015      	beq.n	8009566 <__b2d+0x8a>
 800953a:	4084      	lsls	r4, r0
 800953c:	f1c0 0520 	rsb	r5, r0, #32
 8009540:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009544:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009548:	42b7      	cmp	r7, r6
 800954a:	fa21 fe05 	lsr.w	lr, r1, r5
 800954e:	ea44 030e 	orr.w	r3, r4, lr
 8009552:	bf8c      	ite	hi
 8009554:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8009558:	2400      	movls	r4, #0
 800955a:	fa01 f000 	lsl.w	r0, r1, r0
 800955e:	40ec      	lsrs	r4, r5
 8009560:	ea40 0204 	orr.w	r2, r0, r4
 8009564:	e004      	b.n	8009570 <__b2d+0x94>
 8009566:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800956a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800956e:	460a      	mov	r2, r1
 8009570:	ec43 2b10 	vmov	d0, r2, r3
 8009574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009576 <__d2b>:
 8009576:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800957a:	460e      	mov	r6, r1
 800957c:	2101      	movs	r1, #1
 800957e:	ec59 8b10 	vmov	r8, r9, d0
 8009582:	4615      	mov	r5, r2
 8009584:	f7ff fcbb 	bl	8008efe <_Balloc>
 8009588:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800958c:	4607      	mov	r7, r0
 800958e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009592:	b10c      	cbz	r4, 8009598 <__d2b+0x22>
 8009594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	f1b8 0f00 	cmp.w	r8, #0
 800959e:	d019      	beq.n	80095d4 <__d2b+0x5e>
 80095a0:	a802      	add	r0, sp, #8
 80095a2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80095a6:	f7ff fd8f 	bl	80090c8 <__lo0bits>
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	b148      	cbz	r0, 80095c2 <__d2b+0x4c>
 80095ae:	9a01      	ldr	r2, [sp, #4]
 80095b0:	f1c0 0120 	rsb	r1, r0, #32
 80095b4:	fa02 f101 	lsl.w	r1, r2, r1
 80095b8:	430b      	orrs	r3, r1
 80095ba:	40c2      	lsrs	r2, r0
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	9201      	str	r2, [sp, #4]
 80095c0:	e000      	b.n	80095c4 <__d2b+0x4e>
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	61bb      	str	r3, [r7, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bf14      	ite	ne
 80095cc:	2102      	movne	r1, #2
 80095ce:	2101      	moveq	r1, #1
 80095d0:	6139      	str	r1, [r7, #16]
 80095d2:	e007      	b.n	80095e4 <__d2b+0x6e>
 80095d4:	a801      	add	r0, sp, #4
 80095d6:	f7ff fd77 	bl	80090c8 <__lo0bits>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	2101      	movs	r1, #1
 80095e0:	6139      	str	r1, [r7, #16]
 80095e2:	3020      	adds	r0, #32
 80095e4:	b134      	cbz	r4, 80095f4 <__d2b+0x7e>
 80095e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095ea:	4404      	add	r4, r0
 80095ec:	6034      	str	r4, [r6, #0]
 80095ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095f2:	e009      	b.n	8009608 <__d2b+0x92>
 80095f4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80095f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095fc:	6030      	str	r0, [r6, #0]
 80095fe:	6918      	ldr	r0, [r3, #16]
 8009600:	f7ff fd42 	bl	8009088 <__hi0bits>
 8009604:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009608:	6028      	str	r0, [r5, #0]
 800960a:	4638      	mov	r0, r7
 800960c:	b003      	add	sp, #12
 800960e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009612 <__ratio>:
 8009612:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009616:	4688      	mov	r8, r1
 8009618:	4669      	mov	r1, sp
 800961a:	4681      	mov	r9, r0
 800961c:	f7ff ff5e 	bl	80094dc <__b2d>
 8009620:	a901      	add	r1, sp, #4
 8009622:	4640      	mov	r0, r8
 8009624:	ec55 4b10 	vmov	r4, r5, d0
 8009628:	f7ff ff58 	bl	80094dc <__b2d>
 800962c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009630:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009634:	1a9a      	subs	r2, r3, r2
 8009636:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800963a:	1ac9      	subs	r1, r1, r3
 800963c:	ec57 6b10 	vmov	r6, r7, d0
 8009640:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8009644:	2b00      	cmp	r3, #0
 8009646:	bfcc      	ite	gt
 8009648:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 800964c:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8009650:	4632      	mov	r2, r6
 8009652:	463b      	mov	r3, r7
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f7 f8f4 	bl	8000844 <__aeabi_ddiv>
 800965c:	ec41 0b10 	vmov	d0, r0, r1
 8009660:	b003      	add	sp, #12
 8009662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009666 <__copybits>:
 8009666:	3901      	subs	r1, #1
 8009668:	b510      	push	{r4, lr}
 800966a:	1149      	asrs	r1, r1, #5
 800966c:	6914      	ldr	r4, [r2, #16]
 800966e:	3101      	adds	r1, #1
 8009670:	f102 0314 	add.w	r3, r2, #20
 8009674:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009678:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800967c:	42a3      	cmp	r3, r4
 800967e:	4602      	mov	r2, r0
 8009680:	d204      	bcs.n	800968c <__copybits+0x26>
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	f840 2b04 	str.w	r2, [r0], #4
 800968a:	e7f7      	b.n	800967c <__copybits+0x16>
 800968c:	2300      	movs	r3, #0
 800968e:	428a      	cmp	r2, r1
 8009690:	d202      	bcs.n	8009698 <__copybits+0x32>
 8009692:	f842 3b04 	str.w	r3, [r2], #4
 8009696:	e7fa      	b.n	800968e <__copybits+0x28>
 8009698:	bd10      	pop	{r4, pc}

0800969a <__any_on>:
 800969a:	f100 0214 	add.w	r2, r0, #20
 800969e:	6900      	ldr	r0, [r0, #16]
 80096a0:	114b      	asrs	r3, r1, #5
 80096a2:	4298      	cmp	r0, r3
 80096a4:	b510      	push	{r4, lr}
 80096a6:	db0c      	blt.n	80096c2 <__any_on+0x28>
 80096a8:	dd0c      	ble.n	80096c4 <__any_on+0x2a>
 80096aa:	f011 011f 	ands.w	r1, r1, #31
 80096ae:	d009      	beq.n	80096c4 <__any_on+0x2a>
 80096b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096b4:	fa24 f001 	lsr.w	r0, r4, r1
 80096b8:	fa00 f101 	lsl.w	r1, r0, r1
 80096bc:	428c      	cmp	r4, r1
 80096be:	d10c      	bne.n	80096da <__any_on+0x40>
 80096c0:	e000      	b.n	80096c4 <__any_on+0x2a>
 80096c2:	4603      	mov	r3, r0
 80096c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d904      	bls.n	80096d6 <__any_on+0x3c>
 80096cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096d0:	2900      	cmp	r1, #0
 80096d2:	d0f9      	beq.n	80096c8 <__any_on+0x2e>
 80096d4:	e001      	b.n	80096da <__any_on+0x40>
 80096d6:	2000      	movs	r0, #0
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	2001      	movs	r0, #1
 80096dc:	bd10      	pop	{r4, pc}

080096de <lflush>:
 80096de:	8983      	ldrh	r3, [r0, #12]
 80096e0:	f003 0309 	and.w	r3, r3, #9
 80096e4:	2b09      	cmp	r3, #9
 80096e6:	d101      	bne.n	80096ec <lflush+0xe>
 80096e8:	f7fe be9c 	b.w	8008424 <fflush>
 80096ec:	2000      	movs	r0, #0
 80096ee:	4770      	bx	lr

080096f0 <__srefill_r>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	460c      	mov	r4, r1
 80096f4:	4605      	mov	r5, r0
 80096f6:	b118      	cbz	r0, 8009700 <__srefill_r+0x10>
 80096f8:	6983      	ldr	r3, [r0, #24]
 80096fa:	b90b      	cbnz	r3, 8009700 <__srefill_r+0x10>
 80096fc:	f7fe fee4 	bl	80084c8 <__sinit>
 8009700:	4b40      	ldr	r3, [pc, #256]	; (8009804 <__srefill_r+0x114>)
 8009702:	429c      	cmp	r4, r3
 8009704:	d101      	bne.n	800970a <__srefill_r+0x1a>
 8009706:	686c      	ldr	r4, [r5, #4]
 8009708:	e008      	b.n	800971c <__srefill_r+0x2c>
 800970a:	4b3f      	ldr	r3, [pc, #252]	; (8009808 <__srefill_r+0x118>)
 800970c:	429c      	cmp	r4, r3
 800970e:	d101      	bne.n	8009714 <__srefill_r+0x24>
 8009710:	68ac      	ldr	r4, [r5, #8]
 8009712:	e003      	b.n	800971c <__srefill_r+0x2c>
 8009714:	4b3d      	ldr	r3, [pc, #244]	; (800980c <__srefill_r+0x11c>)
 8009716:	429c      	cmp	r4, r3
 8009718:	bf08      	it	eq
 800971a:	68ec      	ldreq	r4, [r5, #12]
 800971c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009720:	049f      	lsls	r7, r3, #18
 8009722:	d406      	bmi.n	8009732 <__srefill_r+0x42>
 8009724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800972c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009730:	6663      	str	r3, [r4, #100]	; 0x64
 8009732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009736:	2300      	movs	r3, #0
 8009738:	6063      	str	r3, [r4, #4]
 800973a:	b293      	uxth	r3, r2
 800973c:	069e      	lsls	r6, r3, #26
 800973e:	d45b      	bmi.n	80097f8 <__srefill_r+0x108>
 8009740:	0758      	lsls	r0, r3, #29
 8009742:	d41a      	bmi.n	800977a <__srefill_r+0x8a>
 8009744:	06d9      	lsls	r1, r3, #27
 8009746:	d405      	bmi.n	8009754 <__srefill_r+0x64>
 8009748:	2309      	movs	r3, #9
 800974a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	81a2      	strh	r2, [r4, #12]
 8009752:	e051      	b.n	80097f8 <__srefill_r+0x108>
 8009754:	071a      	lsls	r2, r3, #28
 8009756:	d50b      	bpl.n	8009770 <__srefill_r+0x80>
 8009758:	4621      	mov	r1, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f7fe fe38 	bl	80083d0 <_fflush_r>
 8009760:	2800      	cmp	r0, #0
 8009762:	d149      	bne.n	80097f8 <__srefill_r+0x108>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	60a0      	str	r0, [r4, #8]
 8009768:	f023 0308 	bic.w	r3, r3, #8
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	61a0      	str	r0, [r4, #24]
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	f043 0304 	orr.w	r3, r3, #4
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	e010      	b.n	800979c <__srefill_r+0xac>
 800977a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977c:	b171      	cbz	r1, 800979c <__srefill_r+0xac>
 800977e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009782:	4299      	cmp	r1, r3
 8009784:	d002      	beq.n	800978c <__srefill_r+0x9c>
 8009786:	4628      	mov	r0, r5
 8009788:	f7fe ffc6 	bl	8008718 <_free_r>
 800978c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800978e:	6063      	str	r3, [r4, #4]
 8009790:	2000      	movs	r0, #0
 8009792:	6360      	str	r0, [r4, #52]	; 0x34
 8009794:	b113      	cbz	r3, 800979c <__srefill_r+0xac>
 8009796:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	b91b      	cbnz	r3, 80097a8 <__srefill_r+0xb8>
 80097a0:	4621      	mov	r1, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7ff f8f8 	bl	8008998 <__smakebuf_r>
 80097a8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80097ac:	b2be      	uxth	r6, r7
 80097ae:	07b3      	lsls	r3, r6, #30
 80097b0:	d00f      	beq.n	80097d2 <__srefill_r+0xe2>
 80097b2:	2301      	movs	r3, #1
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	4b16      	ldr	r3, [pc, #88]	; (8009810 <__srefill_r+0x120>)
 80097b8:	4916      	ldr	r1, [pc, #88]	; (8009814 <__srefill_r+0x124>)
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	f006 0609 	and.w	r6, r6, #9
 80097c0:	f7ff f868 	bl	8008894 <_fwalk>
 80097c4:	2e09      	cmp	r6, #9
 80097c6:	81a7      	strh	r7, [r4, #12]
 80097c8:	d103      	bne.n	80097d2 <__srefill_r+0xe2>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7fe fd6f 	bl	80082b0 <__sflush_r>
 80097d2:	6922      	ldr	r2, [r4, #16]
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097d8:	6963      	ldr	r3, [r4, #20]
 80097da:	6a21      	ldr	r1, [r4, #32]
 80097dc:	4628      	mov	r0, r5
 80097de:	47b0      	blx	r6
 80097e0:	2800      	cmp	r0, #0
 80097e2:	6060      	str	r0, [r4, #4]
 80097e4:	dc0b      	bgt.n	80097fe <__srefill_r+0x10e>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	bf17      	itett	ne
 80097ea:	2200      	movne	r2, #0
 80097ec:	f043 0320 	orreq.w	r3, r3, #32
 80097f0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80097f4:	6062      	strne	r2, [r4, #4]
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097fe:	2000      	movs	r0, #0
 8009800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009802:	bf00      	nop
 8009804:	0800cf30 	.word	0x0800cf30
 8009808:	0800cf50 	.word	0x0800cf50
 800980c:	0800cf70 	.word	0x0800cf70
 8009810:	0800cf94 	.word	0x0800cf94
 8009814:	080096df 	.word	0x080096df

08009818 <_sbrk_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4c06      	ldr	r4, [pc, #24]	; (8009834 <_sbrk_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4605      	mov	r5, r0
 8009820:	4608      	mov	r0, r1
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	f003 fa54 	bl	800ccd0 <_sbrk>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_sbrk_r+0x1a>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	b103      	cbz	r3, 8009832 <_sbrk_r+0x1a>
 8009830:	602b      	str	r3, [r5, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	20001284 	.word	0x20001284

08009838 <__sccl>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	780b      	ldrb	r3, [r1, #0]
 800983c:	2b5e      	cmp	r3, #94	; 0x5e
 800983e:	bf13      	iteet	ne
 8009840:	1c4a      	addne	r2, r1, #1
 8009842:	1c8a      	addeq	r2, r1, #2
 8009844:	784b      	ldrbeq	r3, [r1, #1]
 8009846:	2100      	movne	r1, #0
 8009848:	bf08      	it	eq
 800984a:	2101      	moveq	r1, #1
 800984c:	1e44      	subs	r4, r0, #1
 800984e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009852:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009856:	42ac      	cmp	r4, r5
 8009858:	d1fb      	bne.n	8009852 <__sccl+0x1a>
 800985a:	b90b      	cbnz	r3, 8009860 <__sccl+0x28>
 800985c:	1e50      	subs	r0, r2, #1
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	f081 0401 	eor.w	r4, r1, #1
 8009864:	54c4      	strb	r4, [r0, r3]
 8009866:	4611      	mov	r1, r2
 8009868:	780d      	ldrb	r5, [r1, #0]
 800986a:	2d2d      	cmp	r5, #45	; 0x2d
 800986c:	f101 0201 	add.w	r2, r1, #1
 8009870:	d006      	beq.n	8009880 <__sccl+0x48>
 8009872:	2d5d      	cmp	r5, #93	; 0x5d
 8009874:	d00f      	beq.n	8009896 <__sccl+0x5e>
 8009876:	b10d      	cbz	r5, 800987c <__sccl+0x44>
 8009878:	462b      	mov	r3, r5
 800987a:	e7f3      	b.n	8009864 <__sccl+0x2c>
 800987c:	4608      	mov	r0, r1
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	784e      	ldrb	r6, [r1, #1]
 8009882:	2e5d      	cmp	r6, #93	; 0x5d
 8009884:	d0f8      	beq.n	8009878 <__sccl+0x40>
 8009886:	42b3      	cmp	r3, r6
 8009888:	dcf6      	bgt.n	8009878 <__sccl+0x40>
 800988a:	3102      	adds	r1, #2
 800988c:	3301      	adds	r3, #1
 800988e:	429e      	cmp	r6, r3
 8009890:	54c4      	strb	r4, [r0, r3]
 8009892:	dcfb      	bgt.n	800988c <__sccl+0x54>
 8009894:	e7e8      	b.n	8009868 <__sccl+0x30>
 8009896:	4610      	mov	r0, r2
 8009898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800989c <nanf>:
 800989c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80098a4 <nanf+0x8>
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	7fc00000 	.word	0x7fc00000

080098a8 <sprintf>:
 80098a8:	b40e      	push	{r1, r2, r3}
 80098aa:	b500      	push	{lr}
 80098ac:	b09c      	sub	sp, #112	; 0x70
 80098ae:	f44f 7102 	mov.w	r1, #520	; 0x208
 80098b2:	ab1d      	add	r3, sp, #116	; 0x74
 80098b4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80098b8:	9002      	str	r0, [sp, #8]
 80098ba:	9006      	str	r0, [sp, #24]
 80098bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098c0:	480a      	ldr	r0, [pc, #40]	; (80098ec <sprintf+0x44>)
 80098c2:	9104      	str	r1, [sp, #16]
 80098c4:	9107      	str	r1, [sp, #28]
 80098c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80098ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ce:	f8ad 1016 	strh.w	r1, [sp, #22]
 80098d2:	6800      	ldr	r0, [r0, #0]
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	a902      	add	r1, sp, #8
 80098d8:	f001 f8ca 	bl	800aa70 <_svfprintf_r>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	b01c      	add	sp, #112	; 0x70
 80098e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e8:	b003      	add	sp, #12
 80098ea:	4770      	bx	lr
 80098ec:	2000024c 	.word	0x2000024c

080098f0 <__sread>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	460c      	mov	r4, r1
 80098f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f8:	f7fc f816 	bl	8005928 <_read_r>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	bfab      	itete	ge
 8009900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009902:	89a3      	ldrhlt	r3, [r4, #12]
 8009904:	181b      	addge	r3, r3, r0
 8009906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800990a:	bfac      	ite	ge
 800990c:	6563      	strge	r3, [r4, #84]	; 0x54
 800990e:	81a3      	strhlt	r3, [r4, #12]
 8009910:	bd10      	pop	{r4, pc}

08009912 <__swrite>:
 8009912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	461f      	mov	r7, r3
 8009918:	898b      	ldrh	r3, [r1, #12]
 800991a:	05db      	lsls	r3, r3, #23
 800991c:	4605      	mov	r5, r0
 800991e:	460c      	mov	r4, r1
 8009920:	4616      	mov	r6, r2
 8009922:	d505      	bpl.n	8009930 <__swrite+0x1e>
 8009924:	2302      	movs	r3, #2
 8009926:	2200      	movs	r2, #0
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	f002 feb6 	bl	800c69c <_lseek_r>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	4628      	mov	r0, r5
 8009942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009946:	f7fb bf71 	b.w	800582c <_write_r>

0800994a <__sseek>:
 800994a:	b510      	push	{r4, lr}
 800994c:	460c      	mov	r4, r1
 800994e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009952:	f002 fea3 	bl	800c69c <_lseek_r>
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	bf15      	itete	ne
 800995c:	6560      	strne	r0, [r4, #84]	; 0x54
 800995e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009966:	81a3      	strheq	r3, [r4, #12]
 8009968:	bf18      	it	ne
 800996a:	81a3      	strhne	r3, [r4, #12]
 800996c:	bd10      	pop	{r4, pc}

0800996e <__sclose>:
 800996e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009972:	f002 b957 	b.w	800bc24 <_close_r>

08009976 <sulp>:
 8009976:	b570      	push	{r4, r5, r6, lr}
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	ec45 4b10 	vmov	d0, r4, r5
 8009980:	4616      	mov	r6, r2
 8009982:	f7ff fd83 	bl	800948c <__ulp>
 8009986:	ec51 0b10 	vmov	r0, r1, d0
 800998a:	b17e      	cbz	r6, 80099ac <sulp+0x36>
 800998c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009990:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009994:	2b00      	cmp	r3, #0
 8009996:	dd09      	ble.n	80099ac <sulp+0x36>
 8009998:	051b      	lsls	r3, r3, #20
 800999a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800999e:	2400      	movs	r4, #0
 80099a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80099a4:	4622      	mov	r2, r4
 80099a6:	462b      	mov	r3, r5
 80099a8:	f7f6 fe22 	bl	80005f0 <__aeabi_dmul>
 80099ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080099b0 <_strtod_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	b09d      	sub	sp, #116	; 0x74
 80099b6:	2300      	movs	r3, #0
 80099b8:	9002      	str	r0, [sp, #8]
 80099ba:	460c      	mov	r4, r1
 80099bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80099be:	9318      	str	r3, [sp, #96]	; 0x60
 80099c0:	f04f 0a00 	mov.w	sl, #0
 80099c4:	f04f 0b00 	mov.w	fp, #0
 80099c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80099ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	2a0d      	cmp	r2, #13
 80099d0:	d805      	bhi.n	80099de <_strtod_r+0x2e>
 80099d2:	2a09      	cmp	r2, #9
 80099d4:	d213      	bcs.n	80099fe <_strtod_r+0x4e>
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	f000 81ac 	beq.w	8009d34 <_strtod_r+0x384>
 80099dc:	e012      	b.n	8009a04 <_strtod_r+0x54>
 80099de:	2a2b      	cmp	r2, #43	; 0x2b
 80099e0:	d004      	beq.n	80099ec <_strtod_r+0x3c>
 80099e2:	2a2d      	cmp	r2, #45	; 0x2d
 80099e4:	d004      	beq.n	80099f0 <_strtod_r+0x40>
 80099e6:	2a20      	cmp	r2, #32
 80099e8:	d10c      	bne.n	8009a04 <_strtod_r+0x54>
 80099ea:	e008      	b.n	80099fe <_strtod_r+0x4e>
 80099ec:	2200      	movs	r2, #0
 80099ee:	e000      	b.n	80099f2 <_strtod_r+0x42>
 80099f0:	2201      	movs	r2, #1
 80099f2:	920c      	str	r2, [sp, #48]	; 0x30
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	b92b      	cbnz	r3, 8009a08 <_strtod_r+0x58>
 80099fc:	e19a      	b.n	8009d34 <_strtod_r+0x384>
 80099fe:	3301      	adds	r3, #1
 8009a00:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a02:	e7e2      	b.n	80099ca <_strtod_r+0x1a>
 8009a04:	2300      	movs	r3, #0
 8009a06:	930c      	str	r3, [sp, #48]	; 0x30
 8009a08:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009a0a:	782b      	ldrb	r3, [r5, #0]
 8009a0c:	2b30      	cmp	r3, #48	; 0x30
 8009a0e:	d15c      	bne.n	8009aca <_strtod_r+0x11a>
 8009a10:	786b      	ldrb	r3, [r5, #1]
 8009a12:	2b58      	cmp	r3, #88	; 0x58
 8009a14:	d001      	beq.n	8009a1a <_strtod_r+0x6a>
 8009a16:	2b78      	cmp	r3, #120	; 0x78
 8009a18:	d14c      	bne.n	8009ab4 <_strtod_r+0x104>
 8009a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	ab18      	add	r3, sp, #96	; 0x60
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	4aa9      	ldr	r2, [pc, #676]	; (8009cc8 <_strtod_r+0x318>)
 8009a24:	9802      	ldr	r0, [sp, #8]
 8009a26:	ab19      	add	r3, sp, #100	; 0x64
 8009a28:	a917      	add	r1, sp, #92	; 0x5c
 8009a2a:	f002 fb54 	bl	800c0d6 <__gethex>
 8009a2e:	f010 0607 	ands.w	r6, r0, #7
 8009a32:	4604      	mov	r4, r0
 8009a34:	f000 8587 	beq.w	800a546 <_strtod_r+0xb96>
 8009a38:	2e06      	cmp	r6, #6
 8009a3a:	d105      	bne.n	8009a48 <_strtod_r+0x98>
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9517      	str	r5, [sp, #92]	; 0x5c
 8009a42:	930c      	str	r3, [sp, #48]	; 0x30
 8009a44:	f000 bd7f 	b.w	800a546 <_strtod_r+0xb96>
 8009a48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a4a:	b13a      	cbz	r2, 8009a5c <_strtod_r+0xac>
 8009a4c:	2135      	movs	r1, #53	; 0x35
 8009a4e:	a81a      	add	r0, sp, #104	; 0x68
 8009a50:	f7ff fe09 	bl	8009666 <__copybits>
 8009a54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a56:	9802      	ldr	r0, [sp, #8]
 8009a58:	f7ff fa86 	bl	8008f68 <_Bfree>
 8009a5c:	2e06      	cmp	r6, #6
 8009a5e:	d822      	bhi.n	8009aa6 <_strtod_r+0xf6>
 8009a60:	e8df f006 	tbb	[pc, r6]
 8009a64:	18080d04 	.word	0x18080d04
 8009a68:	0d1d      	.short	0x0d1d
 8009a6a:	04          	.byte	0x04
 8009a6b:	00          	.byte	0x00
 8009a6c:	f04f 0b00 	mov.w	fp, #0
 8009a70:	46da      	mov	sl, fp
 8009a72:	e018      	b.n	8009aa6 <_strtod_r+0xf6>
 8009a74:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a78:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8009a7c:	e013      	b.n	8009aa6 <_strtod_r+0xf6>
 8009a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a82:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a8a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a8e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a92:	e008      	b.n	8009aa6 <_strtod_r+0xf6>
 8009a94:	f8df b234 	ldr.w	fp, [pc, #564]	; 8009ccc <_strtod_r+0x31c>
 8009a98:	f04f 0a00 	mov.w	sl, #0
 8009a9c:	e003      	b.n	8009aa6 <_strtod_r+0xf6>
 8009a9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009aa2:	f04f 3aff 	mov.w	sl, #4294967295
 8009aa6:	0721      	lsls	r1, r4, #28
 8009aa8:	f140 854d 	bpl.w	800a546 <_strtod_r+0xb96>
 8009aac:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009ab0:	f000 bd49 	b.w	800a546 <_strtod_r+0xb96>
 8009ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	2b30      	cmp	r3, #48	; 0x30
 8009abe:	d0f9      	beq.n	8009ab4 <_strtod_r+0x104>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 8540 	beq.w	800a546 <_strtod_r+0xb96>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <_strtod_r+0x11c>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f04f 0800 	mov.w	r8, #0
 8009ad0:	9306      	str	r3, [sp, #24]
 8009ad2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ad4:	9307      	str	r3, [sp, #28]
 8009ad6:	f8cd 8014 	str.w	r8, [sp, #20]
 8009ada:	f8cd 8010 	str.w	r8, [sp, #16]
 8009ade:	220a      	movs	r2, #10
 8009ae0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009ae2:	782e      	ldrb	r6, [r5, #0]
 8009ae4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009ae8:	b2d9      	uxtb	r1, r3
 8009aea:	2909      	cmp	r1, #9
 8009aec:	d80e      	bhi.n	8009b0c <_strtod_r+0x15c>
 8009aee:	9904      	ldr	r1, [sp, #16]
 8009af0:	2908      	cmp	r1, #8
 8009af2:	bfdd      	ittte	le
 8009af4:	9905      	ldrle	r1, [sp, #20]
 8009af6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009afa:	9305      	strle	r3, [sp, #20]
 8009afc:	fb02 3808 	mlagt	r8, r2, r8, r3
 8009b00:	9b04      	ldr	r3, [sp, #16]
 8009b02:	3501      	adds	r5, #1
 8009b04:	3301      	adds	r3, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9517      	str	r5, [sp, #92]	; 0x5c
 8009b0a:	e7e9      	b.n	8009ae0 <_strtod_r+0x130>
 8009b0c:	9802      	ldr	r0, [sp, #8]
 8009b0e:	f7fe ff13 	bl	8008938 <_localeconv_r>
 8009b12:	6807      	ldr	r7, [r0, #0]
 8009b14:	9802      	ldr	r0, [sp, #8]
 8009b16:	f7fe ff0f 	bl	8008938 <_localeconv_r>
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	f7f6 fba8 	bl	8000270 <strlen>
 8009b20:	4639      	mov	r1, r7
 8009b22:	4602      	mov	r2, r0
 8009b24:	4628      	mov	r0, r5
 8009b26:	f002 ff8f 	bl	800ca48 <strncmp>
 8009b2a:	4607      	mov	r7, r0
 8009b2c:	b128      	cbz	r0, 8009b3a <_strtod_r+0x18a>
 8009b2e:	2000      	movs	r0, #0
 8009b30:	4633      	mov	r3, r6
 8009b32:	9d04      	ldr	r5, [sp, #16]
 8009b34:	4602      	mov	r2, r0
 8009b36:	4601      	mov	r1, r0
 8009b38:	e057      	b.n	8009bea <_strtod_r+0x23a>
 8009b3a:	9802      	ldr	r0, [sp, #8]
 8009b3c:	f7fe fefc 	bl	8008938 <_localeconv_r>
 8009b40:	6800      	ldr	r0, [r0, #0]
 8009b42:	f7f6 fb95 	bl	8000270 <strlen>
 8009b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b48:	181a      	adds	r2, r3, r0
 8009b4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b4c:	9a04      	ldr	r2, [sp, #16]
 8009b4e:	5c1b      	ldrb	r3, [r3, r0]
 8009b50:	2a00      	cmp	r2, #0
 8009b52:	d142      	bne.n	8009bda <_strtod_r+0x22a>
 8009b54:	4610      	mov	r0, r2
 8009b56:	2b30      	cmp	r3, #48	; 0x30
 8009b58:	d105      	bne.n	8009b66 <_strtod_r+0x1b6>
 8009b5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b60:	3001      	adds	r0, #1
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	e7f7      	b.n	8009b56 <_strtod_r+0x1a6>
 8009b66:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009b6a:	2a08      	cmp	r2, #8
 8009b6c:	d843      	bhi.n	8009bf6 <_strtod_r+0x246>
 8009b6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b70:	9207      	str	r2, [sp, #28]
 8009b72:	4602      	mov	r2, r0
 8009b74:	2000      	movs	r0, #0
 8009b76:	4605      	mov	r5, r0
 8009b78:	3b30      	subs	r3, #48	; 0x30
 8009b7a:	f100 0101 	add.w	r1, r0, #1
 8009b7e:	d026      	beq.n	8009bce <_strtod_r+0x21e>
 8009b80:	440a      	add	r2, r1
 8009b82:	eb05 0c00 	add.w	ip, r5, r0
 8009b86:	4629      	mov	r1, r5
 8009b88:	260a      	movs	r6, #10
 8009b8a:	4561      	cmp	r1, ip
 8009b8c:	d00e      	beq.n	8009bac <_strtod_r+0x1fc>
 8009b8e:	3101      	adds	r1, #1
 8009b90:	f101 3eff 	add.w	lr, r1, #4294967295
 8009b94:	f1be 0f08 	cmp.w	lr, #8
 8009b98:	dc03      	bgt.n	8009ba2 <_strtod_r+0x1f2>
 8009b9a:	9f05      	ldr	r7, [sp, #20]
 8009b9c:	4377      	muls	r7, r6
 8009b9e:	9705      	str	r7, [sp, #20]
 8009ba0:	e7f3      	b.n	8009b8a <_strtod_r+0x1da>
 8009ba2:	2910      	cmp	r1, #16
 8009ba4:	bfd8      	it	le
 8009ba6:	fb06 f808 	mulle.w	r8, r6, r8
 8009baa:	e7ee      	b.n	8009b8a <_strtod_r+0x1da>
 8009bac:	4428      	add	r0, r5
 8009bae:	2808      	cmp	r0, #8
 8009bb0:	f100 0501 	add.w	r5, r0, #1
 8009bb4:	dc05      	bgt.n	8009bc2 <_strtod_r+0x212>
 8009bb6:	9805      	ldr	r0, [sp, #20]
 8009bb8:	210a      	movs	r1, #10
 8009bba:	fb01 3300 	mla	r3, r1, r0, r3
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	e004      	b.n	8009bcc <_strtod_r+0x21c>
 8009bc2:	2d10      	cmp	r5, #16
 8009bc4:	bfdc      	itt	le
 8009bc6:	210a      	movle	r1, #10
 8009bc8:	fb01 3808 	mlale	r8, r1, r8, r3
 8009bcc:	2100      	movs	r1, #0
 8009bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bd0:	1c58      	adds	r0, r3, #1
 8009bd2:	9017      	str	r0, [sp, #92]	; 0x5c
 8009bd4:	785b      	ldrb	r3, [r3, #1]
 8009bd6:	4608      	mov	r0, r1
 8009bd8:	e002      	b.n	8009be0 <_strtod_r+0x230>
 8009bda:	9d04      	ldr	r5, [sp, #16]
 8009bdc:	4638      	mov	r0, r7
 8009bde:	463a      	mov	r2, r7
 8009be0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009be4:	2909      	cmp	r1, #9
 8009be6:	d9c7      	bls.n	8009b78 <_strtod_r+0x1c8>
 8009be8:	2101      	movs	r1, #1
 8009bea:	2b65      	cmp	r3, #101	; 0x65
 8009bec:	d001      	beq.n	8009bf2 <_strtod_r+0x242>
 8009bee:	2b45      	cmp	r3, #69	; 0x45
 8009bf0:	d151      	bne.n	8009c96 <_strtod_r+0x2e6>
 8009bf2:	b96d      	cbnz	r5, 8009c10 <_strtod_r+0x260>
 8009bf4:	e004      	b.n	8009c00 <_strtod_r+0x250>
 8009bf6:	2b65      	cmp	r3, #101	; 0x65
 8009bf8:	f040 84b3 	bne.w	800a562 <_strtod_r+0xbb2>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2101      	movs	r1, #1
 8009c00:	b928      	cbnz	r0, 8009c0e <_strtod_r+0x25e>
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8095 	beq.w	8009d34 <_strtod_r+0x384>
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	e000      	b.n	8009c10 <_strtod_r+0x260>
 8009c0e:	2500      	movs	r5, #0
 8009c10:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8009c12:	1c63      	adds	r3, r4, #1
 8009c14:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c16:	7863      	ldrb	r3, [r4, #1]
 8009c18:	2b2b      	cmp	r3, #43	; 0x2b
 8009c1a:	d006      	beq.n	8009c2a <_strtod_r+0x27a>
 8009c1c:	2b2d      	cmp	r3, #45	; 0x2d
 8009c1e:	d002      	beq.n	8009c26 <_strtod_r+0x276>
 8009c20:	2600      	movs	r6, #0
 8009c22:	9603      	str	r6, [sp, #12]
 8009c24:	e006      	b.n	8009c34 <_strtod_r+0x284>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e000      	b.n	8009c2c <_strtod_r+0x27c>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9303      	str	r3, [sp, #12]
 8009c2e:	1ca3      	adds	r3, r4, #2
 8009c30:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c32:	78a3      	ldrb	r3, [r4, #2]
 8009c34:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009c38:	2e09      	cmp	r6, #9
 8009c3a:	d82b      	bhi.n	8009c94 <_strtod_r+0x2e4>
 8009c3c:	2b30      	cmp	r3, #48	; 0x30
 8009c3e:	d104      	bne.n	8009c4a <_strtod_r+0x29a>
 8009c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c42:	1c5e      	adds	r6, r3, #1
 8009c44:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	e7f8      	b.n	8009c3c <_strtod_r+0x28c>
 8009c4a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8009c4e:	2e08      	cmp	r6, #8
 8009c50:	d821      	bhi.n	8009c96 <_strtod_r+0x2e6>
 8009c52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c58:	f04f 0c0a 	mov.w	ip, #10
 8009c5c:	461f      	mov	r7, r3
 8009c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c60:	1c5e      	adds	r6, r3, #1
 8009c62:	9617      	str	r6, [sp, #92]	; 0x5c
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8009c6a:	f1b9 0f09 	cmp.w	r9, #9
 8009c6e:	d804      	bhi.n	8009c7a <_strtod_r+0x2ca>
 8009c70:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8009c74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c78:	e7f1      	b.n	8009c5e <_strtod_r+0x2ae>
 8009c7a:	1bf6      	subs	r6, r6, r7
 8009c7c:	2e08      	cmp	r6, #8
 8009c7e:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8009c82:	dc02      	bgt.n	8009c8a <_strtod_r+0x2da>
 8009c84:	45f1      	cmp	r9, lr
 8009c86:	bfa8      	it	ge
 8009c88:	46f1      	movge	r9, lr
 8009c8a:	9e03      	ldr	r6, [sp, #12]
 8009c8c:	b12e      	cbz	r6, 8009c9a <_strtod_r+0x2ea>
 8009c8e:	f1c9 0900 	rsb	r9, r9, #0
 8009c92:	e002      	b.n	8009c9a <_strtod_r+0x2ea>
 8009c94:	9417      	str	r4, [sp, #92]	; 0x5c
 8009c96:	f04f 0900 	mov.w	r9, #0
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	d153      	bne.n	8009d46 <_strtod_r+0x396>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8451 	bne.w	800a546 <_strtod_r+0xb96>
 8009ca4:	9a06      	ldr	r2, [sp, #24]
 8009ca6:	2a00      	cmp	r2, #0
 8009ca8:	f040 844d 	bne.w	800a546 <_strtod_r+0xb96>
 8009cac:	2900      	cmp	r1, #0
 8009cae:	d141      	bne.n	8009d34 <_strtod_r+0x384>
 8009cb0:	2b4e      	cmp	r3, #78	; 0x4e
 8009cb2:	d020      	beq.n	8009cf6 <_strtod_r+0x346>
 8009cb4:	dc02      	bgt.n	8009cbc <_strtod_r+0x30c>
 8009cb6:	2b49      	cmp	r3, #73	; 0x49
 8009cb8:	d00a      	beq.n	8009cd0 <_strtod_r+0x320>
 8009cba:	e03b      	b.n	8009d34 <_strtod_r+0x384>
 8009cbc:	2b69      	cmp	r3, #105	; 0x69
 8009cbe:	d007      	beq.n	8009cd0 <_strtod_r+0x320>
 8009cc0:	2b6e      	cmp	r3, #110	; 0x6e
 8009cc2:	d018      	beq.n	8009cf6 <_strtod_r+0x346>
 8009cc4:	e036      	b.n	8009d34 <_strtod_r+0x384>
 8009cc6:	bf00      	nop
 8009cc8:	0800d09c 	.word	0x0800d09c
 8009ccc:	7ff00000 	.word	0x7ff00000
 8009cd0:	49a8      	ldr	r1, [pc, #672]	; (8009f74 <_strtod_r+0x5c4>)
 8009cd2:	a817      	add	r0, sp, #92	; 0x5c
 8009cd4:	f002 fc30 	bl	800c538 <__match>
 8009cd8:	b360      	cbz	r0, 8009d34 <_strtod_r+0x384>
 8009cda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cdc:	49a6      	ldr	r1, [pc, #664]	; (8009f78 <_strtod_r+0x5c8>)
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	a817      	add	r0, sp, #92	; 0x5c
 8009ce2:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ce4:	f002 fc28 	bl	800c538 <__match>
 8009ce8:	b910      	cbnz	r0, 8009cf0 <_strtod_r+0x340>
 8009cea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cec:	3301      	adds	r3, #1
 8009cee:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cf0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8009f94 <_strtod_r+0x5e4>
 8009cf4:	e01a      	b.n	8009d2c <_strtod_r+0x37c>
 8009cf6:	49a1      	ldr	r1, [pc, #644]	; (8009f7c <_strtod_r+0x5cc>)
 8009cf8:	a817      	add	r0, sp, #92	; 0x5c
 8009cfa:	f002 fc1d 	bl	800c538 <__match>
 8009cfe:	b1c8      	cbz	r0, 8009d34 <_strtod_r+0x384>
 8009d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2b28      	cmp	r3, #40	; 0x28
 8009d06:	d10f      	bne.n	8009d28 <_strtod_r+0x378>
 8009d08:	aa1a      	add	r2, sp, #104	; 0x68
 8009d0a:	499d      	ldr	r1, [pc, #628]	; (8009f80 <_strtod_r+0x5d0>)
 8009d0c:	a817      	add	r0, sp, #92	; 0x5c
 8009d0e:	f002 fc26 	bl	800c55e <__hexnan>
 8009d12:	2805      	cmp	r0, #5
 8009d14:	d108      	bne.n	8009d28 <_strtod_r+0x378>
 8009d16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009d1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009d20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009d24:	f000 bc0f 	b.w	800a546 <_strtod_r+0xb96>
 8009d28:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8009f98 <_strtod_r+0x5e8>
 8009d2c:	f04f 0a00 	mov.w	sl, #0
 8009d30:	f000 bc09 	b.w	800a546 <_strtod_r+0xb96>
 8009d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d36:	9417      	str	r4, [sp, #92]	; 0x5c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 840f 	beq.w	800a55c <_strtod_r+0xbac>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	930c      	str	r3, [sp, #48]	; 0x30
 8009d42:	f000 bc02 	b.w	800a54a <_strtod_r+0xb9a>
 8009d46:	9b04      	ldr	r3, [sp, #16]
 8009d48:	9805      	ldr	r0, [sp, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bf08      	it	eq
 8009d4e:	462b      	moveq	r3, r5
 8009d50:	2d10      	cmp	r5, #16
 8009d52:	462c      	mov	r4, r5
 8009d54:	ebc2 0909 	rsb	r9, r2, r9
 8009d58:	bfa8      	it	ge
 8009d5a:	2410      	movge	r4, #16
 8009d5c:	9304      	str	r3, [sp, #16]
 8009d5e:	f7f6 fbd1 	bl	8000504 <__aeabi_ui2d>
 8009d62:	2c09      	cmp	r4, #9
 8009d64:	4682      	mov	sl, r0
 8009d66:	468b      	mov	fp, r1
 8009d68:	dd13      	ble.n	8009d92 <_strtod_r+0x3e2>
 8009d6a:	4b86      	ldr	r3, [pc, #536]	; (8009f84 <_strtod_r+0x5d4>)
 8009d6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d70:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d74:	f7f6 fc3c 	bl	80005f0 <__aeabi_dmul>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	460f      	mov	r7, r1
 8009d7e:	f7f6 fbc1 	bl	8000504 <__aeabi_ui2d>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fa7f 	bl	800028c <__adddf3>
 8009d8e:	4682      	mov	sl, r0
 8009d90:	468b      	mov	fp, r1
 8009d92:	2d0f      	cmp	r5, #15
 8009d94:	dc36      	bgt.n	8009e04 <_strtod_r+0x454>
 8009d96:	f1b9 0f00 	cmp.w	r9, #0
 8009d9a:	f000 83d4 	beq.w	800a546 <_strtod_r+0xb96>
 8009d9e:	dd24      	ble.n	8009dea <_strtod_r+0x43a>
 8009da0:	f1b9 0f16 	cmp.w	r9, #22
 8009da4:	dc07      	bgt.n	8009db6 <_strtod_r+0x406>
 8009da6:	4d77      	ldr	r5, [pc, #476]	; (8009f84 <_strtod_r+0x5d4>)
 8009da8:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8009dac:	4652      	mov	r2, sl
 8009dae:	465b      	mov	r3, fp
 8009db0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009db4:	e014      	b.n	8009de0 <_strtod_r+0x430>
 8009db6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009dba:	4599      	cmp	r9, r3
 8009dbc:	dc22      	bgt.n	8009e04 <_strtod_r+0x454>
 8009dbe:	4c71      	ldr	r4, [pc, #452]	; (8009f84 <_strtod_r+0x5d4>)
 8009dc0:	f1c5 050f 	rsb	r5, r5, #15
 8009dc4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009dc8:	ebc5 0509 	rsb	r5, r5, r9
 8009dcc:	4652      	mov	r2, sl
 8009dce:	465b      	mov	r3, fp
 8009dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009dd8:	f7f6 fc0a 	bl	80005f0 <__aeabi_dmul>
 8009ddc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009de0:	f7f6 fc06 	bl	80005f0 <__aeabi_dmul>
 8009de4:	4682      	mov	sl, r0
 8009de6:	468b      	mov	fp, r1
 8009de8:	e3ad      	b.n	800a546 <_strtod_r+0xb96>
 8009dea:	f119 0f16 	cmn.w	r9, #22
 8009dee:	db09      	blt.n	8009e04 <_strtod_r+0x454>
 8009df0:	4d64      	ldr	r5, [pc, #400]	; (8009f84 <_strtod_r+0x5d4>)
 8009df2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8009df6:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009dfa:	4650      	mov	r0, sl
 8009dfc:	4659      	mov	r1, fp
 8009dfe:	f7f6 fd21 	bl	8000844 <__aeabi_ddiv>
 8009e02:	e7ef      	b.n	8009de4 <_strtod_r+0x434>
 8009e04:	1b2c      	subs	r4, r5, r4
 8009e06:	444c      	add	r4, r9
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	dd57      	ble.n	8009ebc <_strtod_r+0x50c>
 8009e0c:	f014 010f 	ands.w	r1, r4, #15
 8009e10:	d00a      	beq.n	8009e28 <_strtod_r+0x478>
 8009e12:	4b5c      	ldr	r3, [pc, #368]	; (8009f84 <_strtod_r+0x5d4>)
 8009e14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009e18:	4652      	mov	r2, sl
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e20:	f7f6 fbe6 	bl	80005f0 <__aeabi_dmul>
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	f034 040f 	bics.w	r4, r4, #15
 8009e2c:	f000 80b8 	beq.w	8009fa0 <_strtod_r+0x5f0>
 8009e30:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8009e34:	dd0b      	ble.n	8009e4e <_strtod_r+0x49e>
 8009e36:	2400      	movs	r4, #0
 8009e38:	4625      	mov	r5, r4
 8009e3a:	9405      	str	r4, [sp, #20]
 8009e3c:	9404      	str	r4, [sp, #16]
 8009e3e:	9a02      	ldr	r2, [sp, #8]
 8009e40:	f8df b150 	ldr.w	fp, [pc, #336]	; 8009f94 <_strtod_r+0x5e4>
 8009e44:	2322      	movs	r3, #34	; 0x22
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	f04f 0a00 	mov.w	sl, #0
 8009e4c:	e187      	b.n	800a15e <_strtod_r+0x7ae>
 8009e4e:	4e4e      	ldr	r6, [pc, #312]	; (8009f88 <_strtod_r+0x5d8>)
 8009e50:	2300      	movs	r3, #0
 8009e52:	1124      	asrs	r4, r4, #4
 8009e54:	4650      	mov	r0, sl
 8009e56:	4659      	mov	r1, fp
 8009e58:	4698      	mov	r8, r3
 8009e5a:	4637      	mov	r7, r6
 8009e5c:	2c01      	cmp	r4, #1
 8009e5e:	dd0b      	ble.n	8009e78 <_strtod_r+0x4c8>
 8009e60:	07e2      	lsls	r2, r4, #31
 8009e62:	d504      	bpl.n	8009e6e <_strtod_r+0x4be>
 8009e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e68:	f7f6 fbc2 	bl	80005f0 <__aeabi_dmul>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f108 0801 	add.w	r8, r8, #1
 8009e72:	1064      	asrs	r4, r4, #1
 8009e74:	3608      	adds	r6, #8
 8009e76:	e7f1      	b.n	8009e5c <_strtod_r+0x4ac>
 8009e78:	b10b      	cbz	r3, 8009e7e <_strtod_r+0x4ce>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	468b      	mov	fp, r1
 8009e7e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e82:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8009e86:	4652      	mov	r2, sl
 8009e88:	465b      	mov	r3, fp
 8009e8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e8e:	f7f6 fbaf 	bl	80005f0 <__aeabi_dmul>
 8009e92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e96:	468b      	mov	fp, r1
 8009e98:	460a      	mov	r2, r1
 8009e9a:	0d1b      	lsrs	r3, r3, #20
 8009e9c:	493b      	ldr	r1, [pc, #236]	; (8009f8c <_strtod_r+0x5dc>)
 8009e9e:	051b      	lsls	r3, r3, #20
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	d8c7      	bhi.n	8009e36 <_strtod_r+0x486>
 8009ea6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009eaa:	428b      	cmp	r3, r1
 8009eac:	bf86      	itte	hi
 8009eae:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 8009f9c <_strtod_r+0x5ec>
 8009eb2:	f04f 3aff 	movhi.w	sl, #4294967295
 8009eb6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009eba:	e071      	b.n	8009fa0 <_strtod_r+0x5f0>
 8009ebc:	d070      	beq.n	8009fa0 <_strtod_r+0x5f0>
 8009ebe:	4264      	negs	r4, r4
 8009ec0:	f014 020f 	ands.w	r2, r4, #15
 8009ec4:	d00a      	beq.n	8009edc <_strtod_r+0x52c>
 8009ec6:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <_strtod_r+0x5d4>)
 8009ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ecc:	4650      	mov	r0, sl
 8009ece:	4659      	mov	r1, fp
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 fcb6 	bl	8000844 <__aeabi_ddiv>
 8009ed8:	4682      	mov	sl, r0
 8009eda:	468b      	mov	fp, r1
 8009edc:	1124      	asrs	r4, r4, #4
 8009ede:	d05f      	beq.n	8009fa0 <_strtod_r+0x5f0>
 8009ee0:	2c1f      	cmp	r4, #31
 8009ee2:	dd04      	ble.n	8009eee <_strtod_r+0x53e>
 8009ee4:	2400      	movs	r4, #0
 8009ee6:	4625      	mov	r5, r4
 8009ee8:	9405      	str	r4, [sp, #20]
 8009eea:	9404      	str	r4, [sp, #16]
 8009eec:	e130      	b.n	800a150 <_strtod_r+0x7a0>
 8009eee:	f014 0f10 	tst.w	r4, #16
 8009ef2:	bf0c      	ite	eq
 8009ef4:	2300      	moveq	r3, #0
 8009ef6:	236a      	movne	r3, #106	; 0x6a
 8009ef8:	4e25      	ldr	r6, [pc, #148]	; (8009f90 <_strtod_r+0x5e0>)
 8009efa:	9303      	str	r3, [sp, #12]
 8009efc:	4650      	mov	r0, sl
 8009efe:	4659      	mov	r1, fp
 8009f00:	2300      	movs	r3, #0
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	dd09      	ble.n	8009f1a <_strtod_r+0x56a>
 8009f06:	07e2      	lsls	r2, r4, #31
 8009f08:	d504      	bpl.n	8009f14 <_strtod_r+0x564>
 8009f0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f0e:	f7f6 fb6f 	bl	80005f0 <__aeabi_dmul>
 8009f12:	2301      	movs	r3, #1
 8009f14:	1064      	asrs	r4, r4, #1
 8009f16:	3608      	adds	r6, #8
 8009f18:	e7f3      	b.n	8009f02 <_strtod_r+0x552>
 8009f1a:	b10b      	cbz	r3, 8009f20 <_strtod_r+0x570>
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	468b      	mov	fp, r1
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	b1eb      	cbz	r3, 8009f60 <_strtod_r+0x5b0>
 8009f24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009f28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	4659      	mov	r1, fp
 8009f30:	dd16      	ble.n	8009f60 <_strtod_r+0x5b0>
 8009f32:	2b1f      	cmp	r3, #31
 8009f34:	dd0e      	ble.n	8009f54 <_strtod_r+0x5a4>
 8009f36:	2b34      	cmp	r3, #52	; 0x34
 8009f38:	bfde      	ittt	le
 8009f3a:	3b20      	suble	r3, #32
 8009f3c:	f04f 32ff 	movle.w	r2, #4294967295
 8009f40:	fa02 f303 	lslle.w	r3, r2, r3
 8009f44:	f04f 0a00 	mov.w	sl, #0
 8009f48:	bfcc      	ite	gt
 8009f4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f4e:	ea03 0b01 	andle.w	fp, r3, r1
 8009f52:	e005      	b.n	8009f60 <_strtod_r+0x5b0>
 8009f54:	f04f 32ff 	mov.w	r2, #4294967295
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	ea03 0a0a 	and.w	sl, r3, sl
 8009f60:	2200      	movs	r2, #0
 8009f62:	2300      	movs	r3, #0
 8009f64:	4650      	mov	r0, sl
 8009f66:	4659      	mov	r1, fp
 8009f68:	f7f6 fdaa 	bl	8000ac0 <__aeabi_dcmpeq>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d1b9      	bne.n	8009ee4 <_strtod_r+0x534>
 8009f70:	e018      	b.n	8009fa4 <_strtod_r+0x5f4>
 8009f72:	bf00      	nop
 8009f74:	0800cdb9 	.word	0x0800cdb9
 8009f78:	0800cf24 	.word	0x0800cf24
 8009f7c:	0800cdc1 	.word	0x0800cdc1
 8009f80:	0800d0b0 	.word	0x0800d0b0
 8009f84:	0800cfa0 	.word	0x0800cfa0
 8009f88:	0800d068 	.word	0x0800d068
 8009f8c:	7ca00000 	.word	0x7ca00000
 8009f90:	0800d0c8 	.word	0x0800d0c8
 8009f94:	7ff00000 	.word	0x7ff00000
 8009f98:	fff80000 	.word	0xfff80000
 8009f9c:	7fefffff 	.word	0x7fefffff
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	9b05      	ldr	r3, [sp, #20]
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	9a04      	ldr	r2, [sp, #16]
 8009faa:	9907      	ldr	r1, [sp, #28]
 8009fac:	9802      	ldr	r0, [sp, #8]
 8009fae:	462b      	mov	r3, r5
 8009fb0:	f7ff f82c 	bl	800900c <__s2b>
 8009fb4:	9005      	str	r0, [sp, #20]
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f43f af3d 	beq.w	8009e36 <_strtod_r+0x486>
 8009fbc:	f1b9 0f00 	cmp.w	r9, #0
 8009fc0:	f1c9 0300 	rsb	r3, r9, #0
 8009fc4:	bfa8      	it	ge
 8009fc6:	2300      	movge	r3, #0
 8009fc8:	930d      	str	r3, [sp, #52]	; 0x34
 8009fca:	2400      	movs	r4, #0
 8009fcc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8009fd0:	9312      	str	r3, [sp, #72]	; 0x48
 8009fd2:	4625      	mov	r5, r4
 8009fd4:	9b05      	ldr	r3, [sp, #20]
 8009fd6:	9802      	ldr	r0, [sp, #8]
 8009fd8:	6859      	ldr	r1, [r3, #4]
 8009fda:	f7fe ff90 	bl	8008efe <_Balloc>
 8009fde:	9004      	str	r0, [sp, #16]
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	f43f af2c 	beq.w	8009e3e <_strtod_r+0x48e>
 8009fe6:	9b05      	ldr	r3, [sp, #20]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	3202      	adds	r2, #2
 8009fec:	f103 010c 	add.w	r1, r3, #12
 8009ff0:	0092      	lsls	r2, r2, #2
 8009ff2:	300c      	adds	r0, #12
 8009ff4:	f7fe ff6e 	bl	8008ed4 <memcpy>
 8009ff8:	aa1a      	add	r2, sp, #104	; 0x68
 8009ffa:	a919      	add	r1, sp, #100	; 0x64
 8009ffc:	ec4b ab10 	vmov	d0, sl, fp
 800a000:	9802      	ldr	r0, [sp, #8]
 800a002:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a006:	f7ff fab6 	bl	8009576 <__d2b>
 800a00a:	9018      	str	r0, [sp, #96]	; 0x60
 800a00c:	2800      	cmp	r0, #0
 800a00e:	f43f af16 	beq.w	8009e3e <_strtod_r+0x48e>
 800a012:	2101      	movs	r1, #1
 800a014:	9802      	ldr	r0, [sp, #8]
 800a016:	f7ff f884 	bl	8009122 <__i2b>
 800a01a:	4605      	mov	r5, r0
 800a01c:	2800      	cmp	r0, #0
 800a01e:	f43f af0e 	beq.w	8009e3e <_strtod_r+0x48e>
 800a022:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a024:	9903      	ldr	r1, [sp, #12]
 800a026:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfad      	iteet	ge
 800a02c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 800a02e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a030:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 800a034:	eb02 0803 	addge.w	r8, r2, r3
 800a038:	bfb8      	it	lt
 800a03a:	1ad2      	sublt	r2, r2, r3
 800a03c:	eba3 0301 	sub.w	r3, r3, r1
 800a040:	4433      	add	r3, r6
 800a042:	49b5      	ldr	r1, [pc, #724]	; (800a318 <_strtod_r+0x968>)
 800a044:	bfa8      	it	ge
 800a046:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 800a048:	3b01      	subs	r3, #1
 800a04a:	428b      	cmp	r3, r1
 800a04c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 800a050:	f280 808a 	bge.w	800a168 <_strtod_r+0x7b8>
 800a054:	1ac9      	subs	r1, r1, r3
 800a056:	291f      	cmp	r1, #31
 800a058:	bfc8      	it	gt
 800a05a:	4fb0      	ldrgt	r7, [pc, #704]	; (800a31c <_strtod_r+0x96c>)
 800a05c:	f04f 0901 	mov.w	r9, #1
 800a060:	bfd4      	ite	le
 800a062:	fa09 f301 	lslle.w	r3, r9, r1
 800a066:	1aff      	subgt	r7, r7, r3
 800a068:	eba6 0601 	sub.w	r6, r6, r1
 800a06c:	bfd9      	ittee	le
 800a06e:	9306      	strle	r3, [sp, #24]
 800a070:	2700      	movle	r7, #0
 800a072:	fa09 f707 	lslgt.w	r7, r9, r7
 800a076:	f8cd 9018 	strgt.w	r9, [sp, #24]
 800a07a:	eb08 0906 	add.w	r9, r8, r6
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	45c8      	cmp	r8, r9
 800a082:	4416      	add	r6, r2
 800a084:	441e      	add	r6, r3
 800a086:	4643      	mov	r3, r8
 800a088:	bfa8      	it	ge
 800a08a:	464b      	movge	r3, r9
 800a08c:	42b3      	cmp	r3, r6
 800a08e:	bfa8      	it	ge
 800a090:	4633      	movge	r3, r6
 800a092:	2b00      	cmp	r3, #0
 800a094:	bfc2      	ittt	gt
 800a096:	ebc3 0909 	rsbgt	r9, r3, r9
 800a09a:	1af6      	subgt	r6, r6, r3
 800a09c:	ebc3 0808 	rsbgt	r8, r3, r8
 800a0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d164      	bne.n	800a170 <_strtod_r+0x7c0>
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	dc7a      	bgt.n	800a1a2 <_strtod_r+0x7f2>
 800a0ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f040 8081 	bne.w	800a1b6 <_strtod_r+0x806>
 800a0b4:	2e00      	cmp	r6, #0
 800a0b6:	f300 8088 	bgt.w	800a1ca <_strtod_r+0x81a>
 800a0ba:	f1b8 0f00 	cmp.w	r8, #0
 800a0be:	f300 808e 	bgt.w	800a1de <_strtod_r+0x82e>
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0c6:	9802      	ldr	r0, [sp, #8]
 800a0c8:	f7ff f981 	bl	80093ce <__mdiff>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f aeb5 	beq.w	8009e3e <_strtod_r+0x48e>
 800a0d4:	68c3      	ldr	r3, [r0, #12]
 800a0d6:	9307      	str	r3, [sp, #28]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60c3      	str	r3, [r0, #12]
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7ff f95a 	bl	8009396 <__mcmp>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f280 8089 	bge.w	800a1fa <_strtod_r+0x84a>
 800a0e8:	9b07      	ldr	r3, [sp, #28]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f040 8204 	bne.w	800a4f8 <_strtod_r+0xb48>
 800a0f0:	f1ba 0f00 	cmp.w	sl, #0
 800a0f4:	f040 8200 	bne.w	800a4f8 <_strtod_r+0xb48>
 800a0f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 81fb 	bne.w	800a4f8 <_strtod_r+0xb48>
 800a102:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a106:	0d1b      	lsrs	r3, r3, #20
 800a108:	051b      	lsls	r3, r3, #20
 800a10a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a10e:	f240 81f3 	bls.w	800a4f8 <_strtod_r+0xb48>
 800a112:	6963      	ldr	r3, [r4, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d06c      	beq.n	800a1f2 <_strtod_r+0x842>
 800a118:	4621      	mov	r1, r4
 800a11a:	2201      	movs	r2, #1
 800a11c:	9802      	ldr	r0, [sp, #8]
 800a11e:	f7ff f8e9 	bl	80092f4 <__lshift>
 800a122:	4629      	mov	r1, r5
 800a124:	4604      	mov	r4, r0
 800a126:	f7ff f936 	bl	8009396 <__mcmp>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f340 81e4 	ble.w	800a4f8 <_strtod_r+0xb48>
 800a130:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a134:	9a03      	ldr	r2, [sp, #12]
 800a136:	0d1b      	lsrs	r3, r3, #20
 800a138:	051b      	lsls	r3, r3, #20
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	f000 808c 	beq.w	800a258 <_strtod_r+0x8a8>
 800a140:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a144:	f300 8088 	bgt.w	800a258 <_strtod_r+0x8a8>
 800a148:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 800a14c:	f300 81d6 	bgt.w	800a4fc <_strtod_r+0xb4c>
 800a150:	9a02      	ldr	r2, [sp, #8]
 800a152:	2322      	movs	r3, #34	; 0x22
 800a154:	f04f 0a00 	mov.w	sl, #0
 800a158:	f04f 0b00 	mov.w	fp, #0
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	9b05      	ldr	r3, [sp, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 81dc 	bne.w	800a51e <_strtod_r+0xb6e>
 800a166:	e1ee      	b.n	800a546 <_strtod_r+0xb96>
 800a168:	2301      	movs	r3, #1
 800a16a:	2700      	movs	r7, #0
 800a16c:	9306      	str	r3, [sp, #24]
 800a16e:	e784      	b.n	800a07a <_strtod_r+0x6ca>
 800a170:	4629      	mov	r1, r5
 800a172:	461a      	mov	r2, r3
 800a174:	9802      	ldr	r0, [sp, #8]
 800a176:	f7ff f86f 	bl	8009258 <__pow5mult>
 800a17a:	4605      	mov	r5, r0
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f43f ae5e 	beq.w	8009e3e <_strtod_r+0x48e>
 800a182:	4601      	mov	r1, r0
 800a184:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a186:	9802      	ldr	r0, [sp, #8]
 800a188:	f7fe ffd4 	bl	8009134 <__multiply>
 800a18c:	9007      	str	r0, [sp, #28]
 800a18e:	2800      	cmp	r0, #0
 800a190:	f43f ae55 	beq.w	8009e3e <_strtod_r+0x48e>
 800a194:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a196:	9802      	ldr	r0, [sp, #8]
 800a198:	f7fe fee6 	bl	8008f68 <_Bfree>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	9318      	str	r3, [sp, #96]	; 0x60
 800a1a0:	e781      	b.n	800a0a6 <_strtod_r+0x6f6>
 800a1a2:	464a      	mov	r2, r9
 800a1a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1a6:	9802      	ldr	r0, [sp, #8]
 800a1a8:	f7ff f8a4 	bl	80092f4 <__lshift>
 800a1ac:	9018      	str	r0, [sp, #96]	; 0x60
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f47f af7c 	bne.w	800a0ac <_strtod_r+0x6fc>
 800a1b4:	e643      	b.n	8009e3e <_strtod_r+0x48e>
 800a1b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1b8:	9904      	ldr	r1, [sp, #16]
 800a1ba:	9802      	ldr	r0, [sp, #8]
 800a1bc:	f7ff f84c 	bl	8009258 <__pow5mult>
 800a1c0:	9004      	str	r0, [sp, #16]
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f47f af76 	bne.w	800a0b4 <_strtod_r+0x704>
 800a1c8:	e639      	b.n	8009e3e <_strtod_r+0x48e>
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	9904      	ldr	r1, [sp, #16]
 800a1ce:	9802      	ldr	r0, [sp, #8]
 800a1d0:	f7ff f890 	bl	80092f4 <__lshift>
 800a1d4:	9004      	str	r0, [sp, #16]
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f47f af6f 	bne.w	800a0ba <_strtod_r+0x70a>
 800a1dc:	e62f      	b.n	8009e3e <_strtod_r+0x48e>
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	9802      	ldr	r0, [sp, #8]
 800a1e4:	f7ff f886 	bl	80092f4 <__lshift>
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f47f af69 	bne.w	800a0c2 <_strtod_r+0x712>
 800a1f0:	e625      	b.n	8009e3e <_strtod_r+0x48e>
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	dc8f      	bgt.n	800a118 <_strtod_r+0x768>
 800a1f8:	e17e      	b.n	800a4f8 <_strtod_r+0xb48>
 800a1fa:	d161      	bne.n	800a2c0 <_strtod_r+0x910>
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a202:	b322      	cbz	r2, 800a24e <_strtod_r+0x89e>
 800a204:	4946      	ldr	r1, [pc, #280]	; (800a320 <_strtod_r+0x970>)
 800a206:	428b      	cmp	r3, r1
 800a208:	465a      	mov	r2, fp
 800a20a:	d12e      	bne.n	800a26a <_strtod_r+0x8ba>
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	4651      	mov	r1, sl
 800a210:	b163      	cbz	r3, 800a22c <_strtod_r+0x87c>
 800a212:	4b44      	ldr	r3, [pc, #272]	; (800a324 <_strtod_r+0x974>)
 800a214:	4013      	ands	r3, r2
 800a216:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a21a:	d807      	bhi.n	800a22c <_strtod_r+0x87c>
 800a21c:	0d1b      	lsrs	r3, r3, #20
 800a21e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	fa00 f303 	lsl.w	r3, r0, r3
 800a22a:	e001      	b.n	800a230 <_strtod_r+0x880>
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295
 800a230:	428b      	cmp	r3, r1
 800a232:	d11a      	bne.n	800a26a <_strtod_r+0x8ba>
 800a234:	493c      	ldr	r1, [pc, #240]	; (800a328 <_strtod_r+0x978>)
 800a236:	428a      	cmp	r2, r1
 800a238:	d102      	bne.n	800a240 <_strtod_r+0x890>
 800a23a:	3301      	adds	r3, #1
 800a23c:	f43f adff 	beq.w	8009e3e <_strtod_r+0x48e>
 800a240:	4b38      	ldr	r3, [pc, #224]	; (800a324 <_strtod_r+0x974>)
 800a242:	4013      	ands	r3, r2
 800a244:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a248:	f04f 0a00 	mov.w	sl, #0
 800a24c:	e154      	b.n	800a4f8 <_strtod_r+0xb48>
 800a24e:	b963      	cbnz	r3, 800a26a <_strtod_r+0x8ba>
 800a250:	f1ba 0f00 	cmp.w	sl, #0
 800a254:	d109      	bne.n	800a26a <_strtod_r+0x8ba>
 800a256:	e76b      	b.n	800a130 <_strtod_r+0x780>
 800a258:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a25c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a260:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a264:	f04f 3aff 	mov.w	sl, #4294967295
 800a268:	e146      	b.n	800a4f8 <_strtod_r+0xb48>
 800a26a:	b117      	cbz	r7, 800a272 <_strtod_r+0x8c2>
 800a26c:	ea17 0f0b 	tst.w	r7, fp
 800a270:	e002      	b.n	800a278 <_strtod_r+0x8c8>
 800a272:	9b06      	ldr	r3, [sp, #24]
 800a274:	ea13 0f0a 	tst.w	r3, sl
 800a278:	f000 813e 	beq.w	800a4f8 <_strtod_r+0xb48>
 800a27c:	9b07      	ldr	r3, [sp, #28]
 800a27e:	9a03      	ldr	r2, [sp, #12]
 800a280:	4650      	mov	r0, sl
 800a282:	4659      	mov	r1, fp
 800a284:	b153      	cbz	r3, 800a29c <_strtod_r+0x8ec>
 800a286:	f7ff fb76 	bl	8009976 <sulp>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	4682      	mov	sl, r0
 800a298:	468b      	mov	fp, r1
 800a29a:	e12d      	b.n	800a4f8 <_strtod_r+0xb48>
 800a29c:	f7ff fb6b 	bl	8009976 <sulp>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2a8:	f7f5 ffee 	bl	8000288 <__aeabi_dsub>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	468b      	mov	fp, r1
 800a2b4:	f7f6 fc04 	bl	8000ac0 <__aeabi_dcmpeq>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f47f af49 	bne.w	800a150 <_strtod_r+0x7a0>
 800a2be:	e11b      	b.n	800a4f8 <_strtod_r+0xb48>
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff f9a5 	bl	8009612 <__ratio>
 800a2c8:	ec57 6b10 	vmov	r6, r7, d0
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2d2:	ee10 0a10 	vmov	r0, s0
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	f7f6 fc06 	bl	8000ae8 <__aeabi_dcmple>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d042      	beq.n	800a366 <_strtod_r+0x9b6>
 800a2e0:	9b07      	ldr	r3, [sp, #28]
 800a2e2:	b123      	cbz	r3, 800a2ee <_strtod_r+0x93e>
 800a2e4:	f04f 0800 	mov.w	r8, #0
 800a2e8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800a32c <_strtod_r+0x97c>
 800a2ec:	e011      	b.n	800a312 <_strtod_r+0x962>
 800a2ee:	f1ba 0f00 	cmp.w	sl, #0
 800a2f2:	d103      	bne.n	800a2fc <_strtod_r+0x94c>
 800a2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2f8:	b93b      	cbnz	r3, 800a30a <_strtod_r+0x95a>
 800a2fa:	e01b      	b.n	800a334 <_strtod_r+0x984>
 800a2fc:	f1ba 0f01 	cmp.w	sl, #1
 800a300:	d103      	bne.n	800a30a <_strtod_r+0x95a>
 800a302:	f1bb 0f00 	cmp.w	fp, #0
 800a306:	f43f af23 	beq.w	800a150 <_strtod_r+0x7a0>
 800a30a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 800a330 <_strtod_r+0x980>
 800a30e:	f04f 0800 	mov.w	r8, #0
 800a312:	2600      	movs	r6, #0
 800a314:	4f05      	ldr	r7, [pc, #20]	; (800a32c <_strtod_r+0x97c>)
 800a316:	e039      	b.n	800a38c <_strtod_r+0x9dc>
 800a318:	fffffc02 	.word	0xfffffc02
 800a31c:	fffffbe2 	.word	0xfffffbe2
 800a320:	000fffff 	.word	0x000fffff
 800a324:	7ff00000 	.word	0x7ff00000
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	3ff00000 	.word	0x3ff00000
 800a330:	bff00000 	.word	0xbff00000
 800a334:	2200      	movs	r2, #0
 800a336:	4b98      	ldr	r3, [pc, #608]	; (800a598 <_strtod_r+0xbe8>)
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fbca 	bl	8000ad4 <__aeabi_dcmplt>
 800a340:	b940      	cbnz	r0, 800a354 <_strtod_r+0x9a4>
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	2200      	movs	r2, #0
 800a348:	4b94      	ldr	r3, [pc, #592]	; (800a59c <_strtod_r+0xbec>)
 800a34a:	f7f6 f951 	bl	80005f0 <__aeabi_dmul>
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	e001      	b.n	800a358 <_strtod_r+0x9a8>
 800a354:	4f91      	ldr	r7, [pc, #580]	; (800a59c <_strtod_r+0xbec>)
 800a356:	2600      	movs	r6, #0
 800a358:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a35c:	9614      	str	r6, [sp, #80]	; 0x50
 800a35e:	9315      	str	r3, [sp, #84]	; 0x54
 800a360:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a364:	e012      	b.n	800a38c <_strtod_r+0x9dc>
 800a366:	4b8d      	ldr	r3, [pc, #564]	; (800a59c <_strtod_r+0xbec>)
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	2200      	movs	r2, #0
 800a36e:	f7f6 f93f 	bl	80005f0 <__aeabi_dmul>
 800a372:	9b07      	ldr	r3, [sp, #28]
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	b923      	cbnz	r3, 800a384 <_strtod_r+0x9d4>
 800a37a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a37e:	900e      	str	r0, [sp, #56]	; 0x38
 800a380:	930f      	str	r3, [sp, #60]	; 0x3c
 800a382:	e001      	b.n	800a388 <_strtod_r+0x9d8>
 800a384:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800a388:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800a38c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a390:	0d1b      	lsrs	r3, r3, #20
 800a392:	051b      	lsls	r3, r3, #20
 800a394:	9306      	str	r3, [sp, #24]
 800a396:	9a06      	ldr	r2, [sp, #24]
 800a398:	4b81      	ldr	r3, [pc, #516]	; (800a5a0 <_strtod_r+0xbf0>)
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d12b      	bne.n	800a3f6 <_strtod_r+0xa46>
 800a39e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a3a6:	ec4b ab10 	vmov	d0, sl, fp
 800a3aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a3ae:	f7ff f86d 	bl	800948c <__ulp>
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	ec53 2b10 	vmov	r2, r3, d0
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f6 f919 	bl	80005f0 <__aeabi_dmul>
 800a3be:	4652      	mov	r2, sl
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	f7f5 ff63 	bl	800028c <__adddf3>
 800a3c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3ca:	0d1b      	lsrs	r3, r3, #20
 800a3cc:	4a75      	ldr	r2, [pc, #468]	; (800a5a4 <_strtod_r+0xbf4>)
 800a3ce:	051b      	lsls	r3, r3, #20
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	4682      	mov	sl, r0
 800a3d4:	d90c      	bls.n	800a3f0 <_strtod_r+0xa40>
 800a3d6:	4b74      	ldr	r3, [pc, #464]	; (800a5a8 <_strtod_r+0xbf8>)
 800a3d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d103      	bne.n	800a3e6 <_strtod_r+0xa36>
 800a3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	f43f ad2c 	beq.w	8009e3e <_strtod_r+0x48e>
 800a3e6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800a5a8 <_strtod_r+0xbf8>
 800a3ea:	f04f 3aff 	mov.w	sl, #4294967295
 800a3ee:	e072      	b.n	800a4d6 <_strtod_r+0xb26>
 800a3f0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800a3f4:	e038      	b.n	800a468 <_strtod_r+0xab8>
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	b333      	cbz	r3, 800a448 <_strtod_r+0xa98>
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a400:	d822      	bhi.n	800a448 <_strtod_r+0xa98>
 800a402:	a35d      	add	r3, pc, #372	; (adr r3, 800a578 <_strtod_r+0xbc8>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	4630      	mov	r0, r6
 800a40a:	4639      	mov	r1, r7
 800a40c:	f7f6 fb6c 	bl	8000ae8 <__aeabi_dcmple>
 800a410:	b1a8      	cbz	r0, 800a43e <_strtod_r+0xa8e>
 800a412:	4639      	mov	r1, r7
 800a414:	4630      	mov	r0, r6
 800a416:	f7f6 fbc3 	bl	8000ba0 <__aeabi_d2uiz>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	bf08      	it	eq
 800a41e:	2001      	moveq	r0, #1
 800a420:	f7f6 f870 	bl	8000504 <__aeabi_ui2d>
 800a424:	9b07      	ldr	r3, [sp, #28]
 800a426:	4606      	mov	r6, r0
 800a428:	460f      	mov	r7, r1
 800a42a:	b923      	cbnz	r3, 800a436 <_strtod_r+0xa86>
 800a42c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a430:	9010      	str	r0, [sp, #64]	; 0x40
 800a432:	9311      	str	r3, [sp, #68]	; 0x44
 800a434:	e001      	b.n	800a43a <_strtod_r+0xa8a>
 800a436:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a43a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a43e:	9a06      	ldr	r2, [sp, #24]
 800a440:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 800a444:	ebc2 0903 	rsb	r9, r2, r3
 800a448:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a44c:	f7ff f81e 	bl	800948c <__ulp>
 800a450:	4640      	mov	r0, r8
 800a452:	ec53 2b10 	vmov	r2, r3, d0
 800a456:	4649      	mov	r1, r9
 800a458:	f7f6 f8ca 	bl	80005f0 <__aeabi_dmul>
 800a45c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a460:	f7f5 ff14 	bl	800028c <__adddf3>
 800a464:	4682      	mov	sl, r0
 800a466:	468b      	mov	fp, r1
 800a468:	9b03      	ldr	r3, [sp, #12]
 800a46a:	bba3      	cbnz	r3, 800a4d6 <_strtod_r+0xb26>
 800a46c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a470:	0d1b      	lsrs	r3, r3, #20
 800a472:	9a06      	ldr	r2, [sp, #24]
 800a474:	051b      	lsls	r3, r3, #20
 800a476:	429a      	cmp	r2, r3
 800a478:	46d8      	mov	r8, fp
 800a47a:	d12c      	bne.n	800a4d6 <_strtod_r+0xb26>
 800a47c:	4639      	mov	r1, r7
 800a47e:	4630      	mov	r0, r6
 800a480:	f7f6 fb66 	bl	8000b50 <__aeabi_d2iz>
 800a484:	f7f6 f84e 	bl	8000524 <__aeabi_i2d>
 800a488:	460b      	mov	r3, r1
 800a48a:	4602      	mov	r2, r0
 800a48c:	4639      	mov	r1, r7
 800a48e:	4630      	mov	r0, r6
 800a490:	f7f5 fefa 	bl	8000288 <__aeabi_dsub>
 800a494:	9b07      	ldr	r3, [sp, #28]
 800a496:	4606      	mov	r6, r0
 800a498:	460f      	mov	r7, r1
 800a49a:	b92b      	cbnz	r3, 800a4a8 <_strtod_r+0xaf8>
 800a49c:	f1ba 0f00 	cmp.w	sl, #0
 800a4a0:	d102      	bne.n	800a4a8 <_strtod_r+0xaf8>
 800a4a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4a6:	b183      	cbz	r3, 800a4ca <_strtod_r+0xb1a>
 800a4a8:	a335      	add	r3, pc, #212	; (adr r3, 800a580 <_strtod_r+0xbd0>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	f7f6 fb0f 	bl	8000ad4 <__aeabi_dcmplt>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d131      	bne.n	800a51e <_strtod_r+0xb6e>
 800a4ba:	a333      	add	r3, pc, #204	; (adr r3, 800a588 <_strtod_r+0xbd8>)
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 fb24 	bl	8000b10 <__aeabi_dcmpgt>
 800a4c8:	e004      	b.n	800a4d4 <_strtod_r+0xb24>
 800a4ca:	a331      	add	r3, pc, #196	; (adr r3, 800a590 <_strtod_r+0xbe0>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f6 fb00 	bl	8000ad4 <__aeabi_dcmplt>
 800a4d4:	bb18      	cbnz	r0, 800a51e <_strtod_r+0xb6e>
 800a4d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4d8:	9802      	ldr	r0, [sp, #8]
 800a4da:	f7fe fd45 	bl	8008f68 <_Bfree>
 800a4de:	9904      	ldr	r1, [sp, #16]
 800a4e0:	9802      	ldr	r0, [sp, #8]
 800a4e2:	f7fe fd41 	bl	8008f68 <_Bfree>
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	9802      	ldr	r0, [sp, #8]
 800a4ea:	f7fe fd3d 	bl	8008f68 <_Bfree>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	9802      	ldr	r0, [sp, #8]
 800a4f2:	f7fe fd39 	bl	8008f68 <_Bfree>
 800a4f6:	e56d      	b.n	8009fd4 <_strtod_r+0x624>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	b183      	cbz	r3, 800a51e <_strtod_r+0xb6e>
 800a4fc:	4b2b      	ldr	r3, [pc, #172]	; (800a5ac <_strtod_r+0xbfc>)
 800a4fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a500:	2300      	movs	r3, #0
 800a502:	930a      	str	r3, [sp, #40]	; 0x28
 800a504:	4650      	mov	r0, sl
 800a506:	4659      	mov	r1, fp
 800a508:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a50c:	f7f6 f870 	bl	80005f0 <__aeabi_dmul>
 800a510:	4682      	mov	sl, r0
 800a512:	468b      	mov	fp, r1
 800a514:	b919      	cbnz	r1, 800a51e <_strtod_r+0xb6e>
 800a516:	b910      	cbnz	r0, 800a51e <_strtod_r+0xb6e>
 800a518:	9a02      	ldr	r2, [sp, #8]
 800a51a:	2322      	movs	r3, #34	; 0x22
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a520:	9802      	ldr	r0, [sp, #8]
 800a522:	f7fe fd21 	bl	8008f68 <_Bfree>
 800a526:	9904      	ldr	r1, [sp, #16]
 800a528:	9802      	ldr	r0, [sp, #8]
 800a52a:	f7fe fd1d 	bl	8008f68 <_Bfree>
 800a52e:	4629      	mov	r1, r5
 800a530:	9802      	ldr	r0, [sp, #8]
 800a532:	f7fe fd19 	bl	8008f68 <_Bfree>
 800a536:	9905      	ldr	r1, [sp, #20]
 800a538:	9802      	ldr	r0, [sp, #8]
 800a53a:	f7fe fd15 	bl	8008f68 <_Bfree>
 800a53e:	4621      	mov	r1, r4
 800a540:	9802      	ldr	r0, [sp, #8]
 800a542:	f7fe fd11 	bl	8008f68 <_Bfree>
 800a546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a548:	b113      	cbz	r3, 800a550 <_strtod_r+0xba0>
 800a54a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a54c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a552:	b11b      	cbz	r3, 800a55c <_strtod_r+0xbac>
 800a554:	4652      	mov	r2, sl
 800a556:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a55a:	e007      	b.n	800a56c <_strtod_r+0xbbc>
 800a55c:	4652      	mov	r2, sl
 800a55e:	465b      	mov	r3, fp
 800a560:	e004      	b.n	800a56c <_strtod_r+0xbbc>
 800a562:	2500      	movs	r5, #0
 800a564:	462a      	mov	r2, r5
 800a566:	2101      	movs	r1, #1
 800a568:	f7ff bb41 	b.w	8009bee <_strtod_r+0x23e>
 800a56c:	ec43 2b10 	vmov	d0, r2, r3
 800a570:	b01d      	add	sp, #116	; 0x74
 800a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a576:	bf00      	nop
 800a578:	ffc00000 	.word	0xffc00000
 800a57c:	41dfffff 	.word	0x41dfffff
 800a580:	94a03595 	.word	0x94a03595
 800a584:	3fdfffff 	.word	0x3fdfffff
 800a588:	35afe535 	.word	0x35afe535
 800a58c:	3fe00000 	.word	0x3fe00000
 800a590:	94a03595 	.word	0x94a03595
 800a594:	3fcfffff 	.word	0x3fcfffff
 800a598:	3ff00000 	.word	0x3ff00000
 800a59c:	3fe00000 	.word	0x3fe00000
 800a5a0:	7fe00000 	.word	0x7fe00000
 800a5a4:	7c9fffff 	.word	0x7c9fffff
 800a5a8:	7fefffff 	.word	0x7fefffff
 800a5ac:	39500000 	.word	0x39500000

0800a5b0 <_strtol_r>:
 800a5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4840      	ldr	r0, [pc, #256]	; (800a6b8 <_strtol_r+0x108>)
 800a5b8:	f8d0 9000 	ldr.w	r9, [r0]
 800a5bc:	460f      	mov	r7, r1
 800a5be:	463d      	mov	r5, r7
 800a5c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5c4:	eb09 0004 	add.w	r0, r9, r4
 800a5c8:	7840      	ldrb	r0, [r0, #1]
 800a5ca:	f000 0008 	and.w	r0, r0, #8
 800a5ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 800a5d2:	b108      	cbz	r0, 800a5d8 <_strtol_r+0x28>
 800a5d4:	462f      	mov	r7, r5
 800a5d6:	e7f2      	b.n	800a5be <_strtol_r+0xe>
 800a5d8:	2c2d      	cmp	r4, #45	; 0x2d
 800a5da:	d103      	bne.n	800a5e4 <_strtol_r+0x34>
 800a5dc:	1cbd      	adds	r5, r7, #2
 800a5de:	787c      	ldrb	r4, [r7, #1]
 800a5e0:	2601      	movs	r6, #1
 800a5e2:	e003      	b.n	800a5ec <_strtol_r+0x3c>
 800a5e4:	2c2b      	cmp	r4, #43	; 0x2b
 800a5e6:	bf04      	itt	eq
 800a5e8:	787c      	ldrbeq	r4, [r7, #1]
 800a5ea:	1cbd      	addeq	r5, r7, #2
 800a5ec:	b113      	cbz	r3, 800a5f4 <_strtol_r+0x44>
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d10a      	bne.n	800a608 <_strtol_r+0x58>
 800a5f2:	e05b      	b.n	800a6ac <_strtol_r+0xfc>
 800a5f4:	2c30      	cmp	r4, #48	; 0x30
 800a5f6:	d157      	bne.n	800a6a8 <_strtol_r+0xf8>
 800a5f8:	7828      	ldrb	r0, [r5, #0]
 800a5fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a5fe:	2858      	cmp	r0, #88	; 0x58
 800a600:	d14d      	bne.n	800a69e <_strtol_r+0xee>
 800a602:	786c      	ldrb	r4, [r5, #1]
 800a604:	2310      	movs	r3, #16
 800a606:	3502      	adds	r5, #2
 800a608:	2e00      	cmp	r6, #0
 800a60a:	bf14      	ite	ne
 800a60c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 800a610:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 800a614:	2700      	movs	r7, #0
 800a616:	fbbc faf3 	udiv	sl, ip, r3
 800a61a:	4638      	mov	r0, r7
 800a61c:	fb03 cc1a 	mls	ip, r3, sl, ip
 800a620:	eb09 0e04 	add.w	lr, r9, r4
 800a624:	f89e e001 	ldrb.w	lr, [lr, #1]
 800a628:	f01e 0f04 	tst.w	lr, #4
 800a62c:	d001      	beq.n	800a632 <_strtol_r+0x82>
 800a62e:	3c30      	subs	r4, #48	; 0x30
 800a630:	e00b      	b.n	800a64a <_strtol_r+0x9a>
 800a632:	f01e 0e03 	ands.w	lr, lr, #3
 800a636:	d01b      	beq.n	800a670 <_strtol_r+0xc0>
 800a638:	f1be 0f01 	cmp.w	lr, #1
 800a63c:	bf0c      	ite	eq
 800a63e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800a642:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800a646:	ebce 0404 	rsb	r4, lr, r4
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	dd10      	ble.n	800a670 <_strtol_r+0xc0>
 800a64e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a652:	d00a      	beq.n	800a66a <_strtol_r+0xba>
 800a654:	4550      	cmp	r0, sl
 800a656:	d806      	bhi.n	800a666 <_strtol_r+0xb6>
 800a658:	d101      	bne.n	800a65e <_strtol_r+0xae>
 800a65a:	4564      	cmp	r4, ip
 800a65c:	dc03      	bgt.n	800a666 <_strtol_r+0xb6>
 800a65e:	fb03 4000 	mla	r0, r3, r0, r4
 800a662:	2701      	movs	r7, #1
 800a664:	e001      	b.n	800a66a <_strtol_r+0xba>
 800a666:	f04f 37ff 	mov.w	r7, #4294967295
 800a66a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a66e:	e7d7      	b.n	800a620 <_strtol_r+0x70>
 800a670:	1c7b      	adds	r3, r7, #1
 800a672:	d10c      	bne.n	800a68e <_strtol_r+0xde>
 800a674:	2e00      	cmp	r6, #0
 800a676:	f04f 0322 	mov.w	r3, #34	; 0x22
 800a67a:	bf14      	ite	ne
 800a67c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800a680:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a684:	f8c8 3000 	str.w	r3, [r8]
 800a688:	b92a      	cbnz	r2, 800a696 <_strtol_r+0xe6>
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	b106      	cbz	r6, 800a692 <_strtol_r+0xe2>
 800a690:	4240      	negs	r0, r0
 800a692:	b172      	cbz	r2, 800a6b2 <_strtol_r+0x102>
 800a694:	b107      	cbz	r7, 800a698 <_strtol_r+0xe8>
 800a696:	1e69      	subs	r1, r5, #1
 800a698:	6011      	str	r1, [r2, #0]
 800a69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69e:	2430      	movs	r4, #48	; 0x30
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1b1      	bne.n	800a608 <_strtol_r+0x58>
 800a6a4:	2308      	movs	r3, #8
 800a6a6:	e7af      	b.n	800a608 <_strtol_r+0x58>
 800a6a8:	230a      	movs	r3, #10
 800a6aa:	e7ad      	b.n	800a608 <_strtol_r+0x58>
 800a6ac:	2c30      	cmp	r4, #48	; 0x30
 800a6ae:	d0a3      	beq.n	800a5f8 <_strtol_r+0x48>
 800a6b0:	e7aa      	b.n	800a608 <_strtol_r+0x58>
 800a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20000158 	.word	0x20000158

0800a6bc <_strtoll_r>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	461f      	mov	r7, r3
 800a6c2:	4b55      	ldr	r3, [pc, #340]	; (800a818 <_strtoll_r+0x15c>)
 800a6c4:	b087      	sub	sp, #28
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	9303      	str	r3, [sp, #12]
 800a6ca:	9005      	str	r0, [sp, #20]
 800a6cc:	468a      	mov	sl, r1
 800a6ce:	4693      	mov	fp, r2
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	461d      	mov	r5, r3
 800a6d4:	9a03      	ldr	r2, [sp, #12]
 800a6d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6da:	4422      	add	r2, r4
 800a6dc:	7852      	ldrb	r2, [r2, #1]
 800a6de:	f002 0208 	and.w	r2, r2, #8
 800a6e2:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 800a6e6:	b10a      	cbz	r2, 800a6ec <_strtoll_r+0x30>
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	e7f2      	b.n	800a6d2 <_strtoll_r+0x16>
 800a6ec:	2c2d      	cmp	r4, #45	; 0x2d
 800a6ee:	d103      	bne.n	800a6f8 <_strtoll_r+0x3c>
 800a6f0:	1c9d      	adds	r5, r3, #2
 800a6f2:	785c      	ldrb	r4, [r3, #1]
 800a6f4:	2601      	movs	r6, #1
 800a6f6:	e003      	b.n	800a700 <_strtoll_r+0x44>
 800a6f8:	2c2b      	cmp	r4, #43	; 0x2b
 800a6fa:	bf04      	itt	eq
 800a6fc:	785c      	ldrbeq	r4, [r3, #1]
 800a6fe:	1c9d      	addeq	r5, r3, #2
 800a700:	b117      	cbz	r7, 800a708 <_strtoll_r+0x4c>
 800a702:	2f10      	cmp	r7, #16
 800a704:	d10a      	bne.n	800a71c <_strtoll_r+0x60>
 800a706:	e07f      	b.n	800a808 <_strtoll_r+0x14c>
 800a708:	2c30      	cmp	r4, #48	; 0x30
 800a70a:	d17b      	bne.n	800a804 <_strtoll_r+0x148>
 800a70c:	782b      	ldrb	r3, [r5, #0]
 800a70e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a712:	2b58      	cmp	r3, #88	; 0x58
 800a714:	d171      	bne.n	800a7fa <_strtoll_r+0x13e>
 800a716:	786c      	ldrb	r4, [r5, #1]
 800a718:	2710      	movs	r7, #16
 800a71a:	3502      	adds	r5, #2
 800a71c:	b926      	cbnz	r6, 800a728 <_strtoll_r+0x6c>
 800a71e:	f04f 38ff 	mov.w	r8, #4294967295
 800a722:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a726:	e003      	b.n	800a730 <_strtoll_r+0x74>
 800a728:	f04f 0800 	mov.w	r8, #0
 800a72c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a730:	463a      	mov	r2, r7
 800a732:	17fb      	asrs	r3, r7, #31
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	e9cd 2300 	strd	r2, r3, [sp]
 800a73c:	f7f6 faa0 	bl	8000c80 <__aeabi_uldivmod>
 800a740:	17fb      	asrs	r3, r7, #31
 800a742:	9204      	str	r2, [sp, #16]
 800a744:	4640      	mov	r0, r8
 800a746:	4649      	mov	r1, r9
 800a748:	463a      	mov	r2, r7
 800a74a:	f7f6 fa99 	bl	8000c80 <__aeabi_uldivmod>
 800a74e:	2300      	movs	r3, #0
 800a750:	4680      	mov	r8, r0
 800a752:	4689      	mov	r9, r1
 800a754:	2000      	movs	r0, #0
 800a756:	2100      	movs	r1, #0
 800a758:	9a03      	ldr	r2, [sp, #12]
 800a75a:	4422      	add	r2, r4
 800a75c:	7852      	ldrb	r2, [r2, #1]
 800a75e:	f012 0f04 	tst.w	r2, #4
 800a762:	d001      	beq.n	800a768 <_strtoll_r+0xac>
 800a764:	3c30      	subs	r4, #48	; 0x30
 800a766:	e007      	b.n	800a778 <_strtoll_r+0xbc>
 800a768:	f012 0203 	ands.w	r2, r2, #3
 800a76c:	d025      	beq.n	800a7ba <_strtoll_r+0xfe>
 800a76e:	2a01      	cmp	r2, #1
 800a770:	bf0c      	ite	eq
 800a772:	2237      	moveq	r2, #55	; 0x37
 800a774:	2257      	movne	r2, #87	; 0x57
 800a776:	1aa4      	subs	r4, r4, r2
 800a778:	42a7      	cmp	r7, r4
 800a77a:	dd1e      	ble.n	800a7ba <_strtoll_r+0xfe>
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	d019      	beq.n	800a7b4 <_strtoll_r+0xf8>
 800a780:	4589      	cmp	r9, r1
 800a782:	bf08      	it	eq
 800a784:	4580      	cmpeq	r8, r0
 800a786:	d313      	bcc.n	800a7b0 <_strtoll_r+0xf4>
 800a788:	4549      	cmp	r1, r9
 800a78a:	bf08      	it	eq
 800a78c:	4540      	cmpeq	r0, r8
 800a78e:	d102      	bne.n	800a796 <_strtoll_r+0xda>
 800a790:	9b04      	ldr	r3, [sp, #16]
 800a792:	429c      	cmp	r4, r3
 800a794:	dc0c      	bgt.n	800a7b0 <_strtoll_r+0xf4>
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	9a00      	ldr	r2, [sp, #0]
 800a79a:	4343      	muls	r3, r0
 800a79c:	fb02 3301 	mla	r3, r2, r1, r3
 800a7a0:	fba0 0102 	umull	r0, r1, r0, r2
 800a7a4:	4419      	add	r1, r3
 800a7a6:	1900      	adds	r0, r0, r4
 800a7a8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e001      	b.n	800a7b4 <_strtoll_r+0xf8>
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7b8:	e7ce      	b.n	800a758 <_strtoll_r+0x9c>
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	d10f      	bne.n	800a7de <_strtoll_r+0x122>
 800a7be:	b926      	cbnz	r6, 800a7ca <_strtoll_r+0x10e>
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7c8:	e002      	b.n	800a7d0 <_strtoll_r+0x114>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a7d0:	9a05      	ldr	r2, [sp, #20]
 800a7d2:	2322      	movs	r3, #34	; 0x22
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	f1bb 0f00 	cmp.w	fp, #0
 800a7da:	d108      	bne.n	800a7ee <_strtoll_r+0x132>
 800a7dc:	e018      	b.n	800a810 <_strtoll_r+0x154>
 800a7de:	b116      	cbz	r6, 800a7e6 <_strtoll_r+0x12a>
 800a7e0:	4240      	negs	r0, r0
 800a7e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a7e6:	f1bb 0f00 	cmp.w	fp, #0
 800a7ea:	d011      	beq.n	800a810 <_strtoll_r+0x154>
 800a7ec:	b10b      	cbz	r3, 800a7f2 <_strtoll_r+0x136>
 800a7ee:	3d01      	subs	r5, #1
 800a7f0:	e000      	b.n	800a7f4 <_strtoll_r+0x138>
 800a7f2:	4655      	mov	r5, sl
 800a7f4:	f8cb 5000 	str.w	r5, [fp]
 800a7f8:	e00a      	b.n	800a810 <_strtoll_r+0x154>
 800a7fa:	2430      	movs	r4, #48	; 0x30
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	d18d      	bne.n	800a71c <_strtoll_r+0x60>
 800a800:	2708      	movs	r7, #8
 800a802:	e78b      	b.n	800a71c <_strtoll_r+0x60>
 800a804:	270a      	movs	r7, #10
 800a806:	e789      	b.n	800a71c <_strtoll_r+0x60>
 800a808:	2c30      	cmp	r4, #48	; 0x30
 800a80a:	f43f af7f 	beq.w	800a70c <_strtoll_r+0x50>
 800a80e:	e785      	b.n	800a71c <_strtoll_r+0x60>
 800a810:	b007      	add	sp, #28
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	bf00      	nop
 800a818:	20000158 	.word	0x20000158

0800a81c <_strtoul_r>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	4680      	mov	r8, r0
 800a822:	483c      	ldr	r0, [pc, #240]	; (800a914 <_strtoul_r+0xf8>)
 800a824:	f8d0 9000 	ldr.w	r9, [r0]
 800a828:	460e      	mov	r6, r1
 800a82a:	4635      	mov	r5, r6
 800a82c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a830:	eb09 0004 	add.w	r0, r9, r4
 800a834:	7840      	ldrb	r0, [r0, #1]
 800a836:	f000 0008 	and.w	r0, r0, #8
 800a83a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 800a83e:	b108      	cbz	r0, 800a844 <_strtoul_r+0x28>
 800a840:	462e      	mov	r6, r5
 800a842:	e7f2      	b.n	800a82a <_strtoul_r+0xe>
 800a844:	2c2d      	cmp	r4, #45	; 0x2d
 800a846:	d103      	bne.n	800a850 <_strtoul_r+0x34>
 800a848:	1cb5      	adds	r5, r6, #2
 800a84a:	7874      	ldrb	r4, [r6, #1]
 800a84c:	2701      	movs	r7, #1
 800a84e:	e003      	b.n	800a858 <_strtoul_r+0x3c>
 800a850:	2c2b      	cmp	r4, #43	; 0x2b
 800a852:	bf04      	itt	eq
 800a854:	7874      	ldrbeq	r4, [r6, #1]
 800a856:	1cb5      	addeq	r5, r6, #2
 800a858:	b113      	cbz	r3, 800a860 <_strtoul_r+0x44>
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d10a      	bne.n	800a874 <_strtoul_r+0x58>
 800a85e:	e053      	b.n	800a908 <_strtoul_r+0xec>
 800a860:	2c30      	cmp	r4, #48	; 0x30
 800a862:	d14f      	bne.n	800a904 <_strtoul_r+0xe8>
 800a864:	7828      	ldrb	r0, [r5, #0]
 800a866:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a86a:	2858      	cmp	r0, #88	; 0x58
 800a86c:	d145      	bne.n	800a8fa <_strtoul_r+0xde>
 800a86e:	786c      	ldrb	r4, [r5, #1]
 800a870:	2310      	movs	r3, #16
 800a872:	3502      	adds	r5, #2
 800a874:	f04f 3cff 	mov.w	ip, #4294967295
 800a878:	2600      	movs	r6, #0
 800a87a:	fbbc fcf3 	udiv	ip, ip, r3
 800a87e:	fb03 fa0c 	mul.w	sl, r3, ip
 800a882:	ea6f 0a0a 	mvn.w	sl, sl
 800a886:	4630      	mov	r0, r6
 800a888:	eb09 0e04 	add.w	lr, r9, r4
 800a88c:	f89e e001 	ldrb.w	lr, [lr, #1]
 800a890:	f01e 0f04 	tst.w	lr, #4
 800a894:	d001      	beq.n	800a89a <_strtoul_r+0x7e>
 800a896:	3c30      	subs	r4, #48	; 0x30
 800a898:	e00b      	b.n	800a8b2 <_strtoul_r+0x96>
 800a89a:	f01e 0e03 	ands.w	lr, lr, #3
 800a89e:	d01a      	beq.n	800a8d6 <_strtoul_r+0xba>
 800a8a0:	f1be 0f01 	cmp.w	lr, #1
 800a8a4:	bf0c      	ite	eq
 800a8a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800a8aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800a8ae:	ebce 0404 	rsb	r4, lr, r4
 800a8b2:	42a3      	cmp	r3, r4
 800a8b4:	dd0f      	ble.n	800a8d6 <_strtoul_r+0xba>
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	db08      	blt.n	800a8cc <_strtoul_r+0xb0>
 800a8ba:	4560      	cmp	r0, ip
 800a8bc:	d806      	bhi.n	800a8cc <_strtoul_r+0xb0>
 800a8be:	d101      	bne.n	800a8c4 <_strtoul_r+0xa8>
 800a8c0:	4554      	cmp	r4, sl
 800a8c2:	dc03      	bgt.n	800a8cc <_strtoul_r+0xb0>
 800a8c4:	fb03 4000 	mla	r0, r3, r0, r4
 800a8c8:	2601      	movs	r6, #1
 800a8ca:	e001      	b.n	800a8d0 <_strtoul_r+0xb4>
 800a8cc:	f04f 36ff 	mov.w	r6, #4294967295
 800a8d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8d4:	e7d8      	b.n	800a888 <_strtoul_r+0x6c>
 800a8d6:	2e00      	cmp	r6, #0
 800a8d8:	da07      	bge.n	800a8ea <_strtoul_r+0xce>
 800a8da:	2322      	movs	r3, #34	; 0x22
 800a8dc:	f8c8 3000 	str.w	r3, [r8]
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	b92a      	cbnz	r2, 800a8f2 <_strtoul_r+0xd6>
 800a8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ea:	b107      	cbz	r7, 800a8ee <_strtoul_r+0xd2>
 800a8ec:	4240      	negs	r0, r0
 800a8ee:	b172      	cbz	r2, 800a90e <_strtoul_r+0xf2>
 800a8f0:	b106      	cbz	r6, 800a8f4 <_strtoul_r+0xd8>
 800a8f2:	1e69      	subs	r1, r5, #1
 800a8f4:	6011      	str	r1, [r2, #0]
 800a8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fa:	2430      	movs	r4, #48	; 0x30
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1b9      	bne.n	800a874 <_strtoul_r+0x58>
 800a900:	2308      	movs	r3, #8
 800a902:	e7b7      	b.n	800a874 <_strtoul_r+0x58>
 800a904:	230a      	movs	r3, #10
 800a906:	e7b5      	b.n	800a874 <_strtoul_r+0x58>
 800a908:	2c30      	cmp	r4, #48	; 0x30
 800a90a:	d0ab      	beq.n	800a864 <_strtoul_r+0x48>
 800a90c:	e7b2      	b.n	800a874 <_strtoul_r+0x58>
 800a90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a912:	bf00      	nop
 800a914:	20000158 	.word	0x20000158

0800a918 <_strtoull_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	461e      	mov	r6, r3
 800a91e:	4b52      	ldr	r3, [pc, #328]	; (800aa68 <_strtoull_r+0x150>)
 800a920:	b085      	sub	sp, #20
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	9302      	str	r3, [sp, #8]
 800a926:	9003      	str	r0, [sp, #12]
 800a928:	4688      	mov	r8, r1
 800a92a:	4691      	mov	r9, r2
 800a92c:	460b      	mov	r3, r1
 800a92e:	461d      	mov	r5, r3
 800a930:	9a02      	ldr	r2, [sp, #8]
 800a932:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a936:	4422      	add	r2, r4
 800a938:	7852      	ldrb	r2, [r2, #1]
 800a93a:	f002 0208 	and.w	r2, r2, #8
 800a93e:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 800a942:	b10a      	cbz	r2, 800a948 <_strtoull_r+0x30>
 800a944:	462b      	mov	r3, r5
 800a946:	e7f2      	b.n	800a92e <_strtoull_r+0x16>
 800a948:	2c2d      	cmp	r4, #45	; 0x2d
 800a94a:	d103      	bne.n	800a954 <_strtoull_r+0x3c>
 800a94c:	1c9d      	adds	r5, r3, #2
 800a94e:	785c      	ldrb	r4, [r3, #1]
 800a950:	2701      	movs	r7, #1
 800a952:	e003      	b.n	800a95c <_strtoull_r+0x44>
 800a954:	2c2b      	cmp	r4, #43	; 0x2b
 800a956:	bf04      	itt	eq
 800a958:	785c      	ldrbeq	r4, [r3, #1]
 800a95a:	1c9d      	addeq	r5, r3, #2
 800a95c:	b116      	cbz	r6, 800a964 <_strtoull_r+0x4c>
 800a95e:	2e10      	cmp	r6, #16
 800a960:	d10a      	bne.n	800a978 <_strtoull_r+0x60>
 800a962:	e07b      	b.n	800aa5c <_strtoull_r+0x144>
 800a964:	2c30      	cmp	r4, #48	; 0x30
 800a966:	d177      	bne.n	800aa58 <_strtoull_r+0x140>
 800a968:	782b      	ldrb	r3, [r5, #0]
 800a96a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a96e:	2b58      	cmp	r3, #88	; 0x58
 800a970:	d16d      	bne.n	800aa4e <_strtoull_r+0x136>
 800a972:	786c      	ldrb	r4, [r5, #1]
 800a974:	2610      	movs	r6, #16
 800a976:	3502      	adds	r5, #2
 800a978:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800a97c:	4632      	mov	r2, r6
 800a97e:	465b      	mov	r3, fp
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	f04f 31ff 	mov.w	r1, #4294967295
 800a988:	f7f6 f97a 	bl	8000c80 <__aeabi_uldivmod>
 800a98c:	4632      	mov	r2, r6
 800a98e:	e9cd 0100 	strd	r0, r1, [sp]
 800a992:	465b      	mov	r3, fp
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	f04f 31ff 	mov.w	r1, #4294967295
 800a99c:	f7f6 f970 	bl	8000c80 <__aeabi_uldivmod>
 800a9a0:	46b2      	mov	sl, r6
 800a9a2:	4694      	mov	ip, r2
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	9a02      	ldr	r2, [sp, #8]
 800a9ac:	eb02 0e04 	add.w	lr, r2, r4
 800a9b0:	f89e e001 	ldrb.w	lr, [lr, #1]
 800a9b4:	f01e 0f04 	tst.w	lr, #4
 800a9b8:	d001      	beq.n	800a9be <_strtoull_r+0xa6>
 800a9ba:	3c30      	subs	r4, #48	; 0x30
 800a9bc:	e00b      	b.n	800a9d6 <_strtoull_r+0xbe>
 800a9be:	f01e 0e03 	ands.w	lr, lr, #3
 800a9c2:	d029      	beq.n	800aa18 <_strtoull_r+0x100>
 800a9c4:	f1be 0f01 	cmp.w	lr, #1
 800a9c8:	bf0c      	ite	eq
 800a9ca:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800a9ce:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800a9d2:	ebce 0404 	rsb	r4, lr, r4
 800a9d6:	42a6      	cmp	r6, r4
 800a9d8:	dd1e      	ble.n	800aa18 <_strtoull_r+0x100>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	db17      	blt.n	800aa0e <_strtoull_r+0xf6>
 800a9de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e2:	428b      	cmp	r3, r1
 800a9e4:	bf08      	it	eq
 800a9e6:	4282      	cmpeq	r2, r0
 800a9e8:	d311      	bcc.n	800aa0e <_strtoull_r+0xf6>
 800a9ea:	4299      	cmp	r1, r3
 800a9ec:	bf08      	it	eq
 800a9ee:	4290      	cmpeq	r0, r2
 800a9f0:	d101      	bne.n	800a9f6 <_strtoull_r+0xde>
 800a9f2:	4564      	cmp	r4, ip
 800a9f4:	dc0b      	bgt.n	800aa0e <_strtoull_r+0xf6>
 800a9f6:	fb00 f30b 	mul.w	r3, r0, fp
 800a9fa:	fb0a 3301 	mla	r3, sl, r1, r3
 800a9fe:	fba0 010a 	umull	r0, r1, r0, sl
 800aa02:	4419      	add	r1, r3
 800aa04:	1900      	adds	r0, r0, r4
 800aa06:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e001      	b.n	800aa12 <_strtoull_r+0xfa>
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa16:	e7c8      	b.n	800a9aa <_strtoull_r+0x92>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da0a      	bge.n	800aa32 <_strtoull_r+0x11a>
 800aa1c:	9a03      	ldr	r2, [sp, #12]
 800aa1e:	2322      	movs	r3, #34	; 0x22
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	f04f 31ff 	mov.w	r1, #4294967295
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	d108      	bne.n	800aa42 <_strtoull_r+0x12a>
 800aa30:	e017      	b.n	800aa62 <_strtoull_r+0x14a>
 800aa32:	b117      	cbz	r7, 800aa3a <_strtoull_r+0x122>
 800aa34:	4240      	negs	r0, r0
 800aa36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	d010      	beq.n	800aa62 <_strtoull_r+0x14a>
 800aa40:	b10b      	cbz	r3, 800aa46 <_strtoull_r+0x12e>
 800aa42:	3d01      	subs	r5, #1
 800aa44:	e000      	b.n	800aa48 <_strtoull_r+0x130>
 800aa46:	4645      	mov	r5, r8
 800aa48:	f8c9 5000 	str.w	r5, [r9]
 800aa4c:	e009      	b.n	800aa62 <_strtoull_r+0x14a>
 800aa4e:	2430      	movs	r4, #48	; 0x30
 800aa50:	2e00      	cmp	r6, #0
 800aa52:	d191      	bne.n	800a978 <_strtoull_r+0x60>
 800aa54:	2608      	movs	r6, #8
 800aa56:	e78f      	b.n	800a978 <_strtoull_r+0x60>
 800aa58:	260a      	movs	r6, #10
 800aa5a:	e78d      	b.n	800a978 <_strtoull_r+0x60>
 800aa5c:	2c30      	cmp	r4, #48	; 0x30
 800aa5e:	d083      	beq.n	800a968 <_strtoull_r+0x50>
 800aa60:	e78a      	b.n	800a978 <_strtoull_r+0x60>
 800aa62:	b005      	add	sp, #20
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa68:	20000158 	.word	0x20000158
 800aa6c:	00000000 	.word	0x00000000

0800aa70 <_svfprintf_r>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	b0bd      	sub	sp, #244	; 0xf4
 800aa76:	468b      	mov	fp, r1
 800aa78:	9205      	str	r2, [sp, #20]
 800aa7a:	461f      	mov	r7, r3
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	f7fd ff5b 	bl	8008938 <_localeconv_r>
 800aa82:	6803      	ldr	r3, [r0, #0]
 800aa84:	930d      	str	r3, [sp, #52]	; 0x34
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7f5 fbf2 	bl	8000270 <strlen>
 800aa8c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800aa90:	9008      	str	r0, [sp, #32]
 800aa92:	0619      	lsls	r1, r3, #24
 800aa94:	d515      	bpl.n	800aac2 <_svfprintf_r+0x52>
 800aa96:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aa9a:	b993      	cbnz	r3, 800aac2 <_svfprintf_r+0x52>
 800aa9c:	2140      	movs	r1, #64	; 0x40
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	f7fd ffbe 	bl	8008a20 <_malloc_r>
 800aaa4:	f8cb 0000 	str.w	r0, [fp]
 800aaa8:	f8cb 0010 	str.w	r0, [fp, #16]
 800aaac:	b930      	cbnz	r0, 800aabc <_svfprintf_r+0x4c>
 800aaae:	230c      	movs	r3, #12
 800aab0:	f8ca 3000 	str.w	r3, [sl]
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295
 800aab8:	f000 bf95 	b.w	800b9e6 <_svfprintf_r+0xf76>
 800aabc:	2340      	movs	r3, #64	; 0x40
 800aabe:	f8cb 3014 	str.w	r3, [fp, #20]
 800aac2:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800ad28 <_svfprintf_r+0x2b8>
 800aac6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aaca:	2300      	movs	r3, #0
 800aacc:	ac2c      	add	r4, sp, #176	; 0xb0
 800aace:	941f      	str	r4, [sp, #124]	; 0x7c
 800aad0:	9321      	str	r3, [sp, #132]	; 0x84
 800aad2:	9320      	str	r3, [sp, #128]	; 0x80
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	9311      	str	r3, [sp, #68]	; 0x44
 800aad8:	9310      	str	r3, [sp, #64]	; 0x40
 800aada:	930a      	str	r3, [sp, #40]	; 0x28
 800aadc:	9d05      	ldr	r5, [sp, #20]
 800aade:	462b      	mov	r3, r5
 800aae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae4:	b11a      	cbz	r2, 800aaee <_svfprintf_r+0x7e>
 800aae6:	2a25      	cmp	r2, #37	; 0x25
 800aae8:	d001      	beq.n	800aaee <_svfprintf_r+0x7e>
 800aaea:	461d      	mov	r5, r3
 800aaec:	e7f7      	b.n	800aade <_svfprintf_r+0x6e>
 800aaee:	9b05      	ldr	r3, [sp, #20]
 800aaf0:	1aee      	subs	r6, r5, r3
 800aaf2:	d017      	beq.n	800ab24 <_svfprintf_r+0xb4>
 800aaf4:	e884 0048 	stmia.w	r4, {r3, r6}
 800aaf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aafa:	4433      	add	r3, r6
 800aafc:	9321      	str	r3, [sp, #132]	; 0x84
 800aafe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab00:	3301      	adds	r3, #1
 800ab02:	2b07      	cmp	r3, #7
 800ab04:	9320      	str	r3, [sp, #128]	; 0x80
 800ab06:	dc01      	bgt.n	800ab0c <_svfprintf_r+0x9c>
 800ab08:	3408      	adds	r4, #8
 800ab0a:	e008      	b.n	800ab1e <_svfprintf_r+0xae>
 800ab0c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab0e:	4659      	mov	r1, fp
 800ab10:	4650      	mov	r0, sl
 800ab12:	f001 ffae 	bl	800ca72 <__ssprint_r>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f040 862c 	bne.w	800b774 <_svfprintf_r+0xd04>
 800ab1c:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab20:	4433      	add	r3, r6
 800ab22:	930a      	str	r3, [sp, #40]	; 0x28
 800ab24:	782b      	ldrb	r3, [r5, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 861d 	beq.w	800b766 <_svfprintf_r+0xcf6>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	1c6b      	adds	r3, r5, #1
 800ab30:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800ab34:	4611      	mov	r1, r2
 800ab36:	f04f 39ff 	mov.w	r9, #4294967295
 800ab3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab3c:	4615      	mov	r5, r2
 800ab3e:	200a      	movs	r0, #10
 800ab40:	1c5e      	adds	r6, r3, #1
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	9605      	str	r6, [sp, #20]
 800ab46:	9302      	str	r3, [sp, #8]
 800ab48:	9b02      	ldr	r3, [sp, #8]
 800ab4a:	3b20      	subs	r3, #32
 800ab4c:	2b58      	cmp	r3, #88	; 0x58
 800ab4e:	f200 8263 	bhi.w	800b018 <_svfprintf_r+0x5a8>
 800ab52:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ab56:	005c      	.short	0x005c
 800ab58:	02610261 	.word	0x02610261
 800ab5c:	0261006b 	.word	0x0261006b
 800ab60:	02610261 	.word	0x02610261
 800ab64:	02610261 	.word	0x02610261
 800ab68:	006e0261 	.word	0x006e0261
 800ab6c:	02610059 	.word	0x02610059
 800ab70:	007c0079 	.word	0x007c0079
 800ab74:	00a30261 	.word	0x00a30261
 800ab78:	00a600a6 	.word	0x00a600a6
 800ab7c:	00a600a6 	.word	0x00a600a6
 800ab80:	00a600a6 	.word	0x00a600a6
 800ab84:	00a600a6 	.word	0x00a600a6
 800ab88:	026100a6 	.word	0x026100a6
 800ab8c:	02610261 	.word	0x02610261
 800ab90:	02610261 	.word	0x02610261
 800ab94:	02610261 	.word	0x02610261
 800ab98:	02610261 	.word	0x02610261
 800ab9c:	00d60261 	.word	0x00d60261
 800aba0:	0261010b 	.word	0x0261010b
 800aba4:	0261010b 	.word	0x0261010b
 800aba8:	02610261 	.word	0x02610261
 800abac:	00b90261 	.word	0x00b90261
 800abb0:	02610261 	.word	0x02610261
 800abb4:	02610152 	.word	0x02610152
 800abb8:	02610261 	.word	0x02610261
 800abbc:	02610261 	.word	0x02610261
 800abc0:	02610199 	.word	0x02610199
 800abc4:	00660261 	.word	0x00660261
 800abc8:	02610261 	.word	0x02610261
 800abcc:	02610261 	.word	0x02610261
 800abd0:	02610261 	.word	0x02610261
 800abd4:	02610261 	.word	0x02610261
 800abd8:	02610261 	.word	0x02610261
 800abdc:	006100cd 	.word	0x006100cd
 800abe0:	010b010b 	.word	0x010b010b
 800abe4:	00bc010b 	.word	0x00bc010b
 800abe8:	02610061 	.word	0x02610061
 800abec:	00bf0261 	.word	0x00bf0261
 800abf0:	01340261 	.word	0x01340261
 800abf4:	016f0154 	.word	0x016f0154
 800abf8:	026100ca 	.word	0x026100ca
 800abfc:	02610180 	.word	0x02610180
 800ac00:	0261019b 	.word	0x0261019b
 800ac04:	01b30261 	.word	0x01b30261
 800ac08:	2201      	movs	r2, #1
 800ac0a:	212b      	movs	r1, #43	; 0x2b
 800ac0c:	e002      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800ac0e:	b909      	cbnz	r1, 800ac14 <_svfprintf_r+0x1a4>
 800ac10:	2201      	movs	r2, #1
 800ac12:	2120      	movs	r1, #32
 800ac14:	9b05      	ldr	r3, [sp, #20]
 800ac16:	e793      	b.n	800ab40 <_svfprintf_r+0xd0>
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d077      	beq.n	800ad0c <_svfprintf_r+0x29c>
 800ac1c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ac20:	e074      	b.n	800ad0c <_svfprintf_r+0x29c>
 800ac22:	b10a      	cbz	r2, 800ac28 <_svfprintf_r+0x1b8>
 800ac24:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ac28:	4b41      	ldr	r3, [pc, #260]	; (800ad30 <_svfprintf_r+0x2c0>)
 800ac2a:	e14b      	b.n	800aec4 <_svfprintf_r+0x454>
 800ac2c:	f045 0501 	orr.w	r5, r5, #1
 800ac30:	e7f0      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800ac32:	683e      	ldr	r6, [r7, #0]
 800ac34:	9609      	str	r6, [sp, #36]	; 0x24
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	f107 0304 	add.w	r3, r7, #4
 800ac3c:	db01      	blt.n	800ac42 <_svfprintf_r+0x1d2>
 800ac3e:	461f      	mov	r7, r3
 800ac40:	e7e8      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800ac42:	4276      	negs	r6, r6
 800ac44:	9609      	str	r6, [sp, #36]	; 0x24
 800ac46:	461f      	mov	r7, r3
 800ac48:	f045 0504 	orr.w	r5, r5, #4
 800ac4c:	e7e2      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800ac4e:	9e05      	ldr	r6, [sp, #20]
 800ac50:	9b05      	ldr	r3, [sp, #20]
 800ac52:	7836      	ldrb	r6, [r6, #0]
 800ac54:	9602      	str	r6, [sp, #8]
 800ac56:	2e2a      	cmp	r6, #42	; 0x2a
 800ac58:	f103 0301 	add.w	r3, r3, #1
 800ac5c:	d002      	beq.n	800ac64 <_svfprintf_r+0x1f4>
 800ac5e:	f04f 0900 	mov.w	r9, #0
 800ac62:	e00a      	b.n	800ac7a <_svfprintf_r+0x20a>
 800ac64:	f8d7 9000 	ldr.w	r9, [r7]
 800ac68:	9305      	str	r3, [sp, #20]
 800ac6a:	1d3e      	adds	r6, r7, #4
 800ac6c:	f1b9 0f00 	cmp.w	r9, #0
 800ac70:	4637      	mov	r7, r6
 800ac72:	dacf      	bge.n	800ac14 <_svfprintf_r+0x1a4>
 800ac74:	f04f 39ff 	mov.w	r9, #4294967295
 800ac78:	e7cc      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800ac7a:	9305      	str	r3, [sp, #20]
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	3b30      	subs	r3, #48	; 0x30
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	d808      	bhi.n	800ac96 <_svfprintf_r+0x226>
 800ac84:	fb00 3909 	mla	r9, r0, r9, r3
 800ac88:	9b05      	ldr	r3, [sp, #20]
 800ac8a:	461e      	mov	r6, r3
 800ac8c:	f816 3b01 	ldrb.w	r3, [r6], #1
 800ac90:	9302      	str	r3, [sp, #8]
 800ac92:	4633      	mov	r3, r6
 800ac94:	e7f1      	b.n	800ac7a <_svfprintf_r+0x20a>
 800ac96:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800ac9a:	e755      	b.n	800ab48 <_svfprintf_r+0xd8>
 800ac9c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800aca0:	e7b8      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800aca2:	2300      	movs	r3, #0
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	9b02      	ldr	r3, [sp, #8]
 800aca8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800acaa:	3b30      	subs	r3, #48	; 0x30
 800acac:	fb00 3306 	mla	r3, r0, r6, r3
 800acb0:	9309      	str	r3, [sp, #36]	; 0x24
 800acb2:	9b05      	ldr	r3, [sp, #20]
 800acb4:	461e      	mov	r6, r3
 800acb6:	f816 3b01 	ldrb.w	r3, [r6], #1
 800acba:	9302      	str	r3, [sp, #8]
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	9605      	str	r6, [sp, #20]
 800acc0:	3b30      	subs	r3, #48	; 0x30
 800acc2:	2b09      	cmp	r3, #9
 800acc4:	d9ef      	bls.n	800aca6 <_svfprintf_r+0x236>
 800acc6:	e73f      	b.n	800ab48 <_svfprintf_r+0xd8>
 800acc8:	f045 0508 	orr.w	r5, r5, #8
 800accc:	e7a2      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800acce:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800acd2:	e79f      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800acd4:	9b05      	ldr	r3, [sp, #20]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b6c      	cmp	r3, #108	; 0x6c
 800acda:	d103      	bne.n	800ace4 <_svfprintf_r+0x274>
 800acdc:	9b05      	ldr	r3, [sp, #20]
 800acde:	3301      	adds	r3, #1
 800ace0:	9305      	str	r3, [sp, #20]
 800ace2:	e002      	b.n	800acea <_svfprintf_r+0x27a>
 800ace4:	f045 0510 	orr.w	r5, r5, #16
 800ace8:	e794      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800acea:	f045 0520 	orr.w	r5, r5, #32
 800acee:	e791      	b.n	800ac14 <_svfprintf_r+0x1a4>
 800acf0:	1d3b      	adds	r3, r7, #4
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	2600      	movs	r6, #0
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800acfc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800ad00:	e199      	b.n	800b036 <_svfprintf_r+0x5c6>
 800ad02:	b10a      	cbz	r2, 800ad08 <_svfprintf_r+0x298>
 800ad04:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ad08:	f045 0510 	orr.w	r5, r5, #16
 800ad0c:	06aa      	lsls	r2, r5, #26
 800ad0e:	d511      	bpl.n	800ad34 <_svfprintf_r+0x2c4>
 800ad10:	3707      	adds	r7, #7
 800ad12:	f027 0707 	bic.w	r7, r7, #7
 800ad16:	f107 0308 	add.w	r3, r7, #8
 800ad1a:	9303      	str	r3, [sp, #12]
 800ad1c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ad20:	e017      	b.n	800ad52 <_svfprintf_r+0x2e2>
 800ad22:	bf00      	nop
 800ad24:	f3af 8000 	nop.w
	...
 800ad30:	0800cdc4 	.word	0x0800cdc4
 800ad34:	f015 0f10 	tst.w	r5, #16
 800ad38:	f107 0304 	add.w	r3, r7, #4
 800ad3c:	d002      	beq.n	800ad44 <_svfprintf_r+0x2d4>
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	683e      	ldr	r6, [r7, #0]
 800ad42:	e005      	b.n	800ad50 <_svfprintf_r+0x2e0>
 800ad44:	683e      	ldr	r6, [r7, #0]
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad4c:	bf18      	it	ne
 800ad4e:	b236      	sxthne	r6, r6
 800ad50:	17f7      	asrs	r7, r6, #31
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	f177 0300 	sbcs.w	r3, r7, #0
 800ad58:	f280 80de 	bge.w	800af18 <_svfprintf_r+0x4a8>
 800ad5c:	4276      	negs	r6, r6
 800ad5e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ad62:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800ad66:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800ad6a:	e0d5      	b.n	800af18 <_svfprintf_r+0x4a8>
 800ad6c:	b10a      	cbz	r2, 800ad72 <_svfprintf_r+0x302>
 800ad6e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800ad72:	3707      	adds	r7, #7
 800ad74:	f027 0707 	bic.w	r7, r7, #7
 800ad78:	f107 0308 	add.w	r3, r7, #8
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	ed97 7b00 	vldr	d7, [r7]
 800ad82:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad86:	9b06      	ldr	r3, [sp, #24]
 800ad88:	9312      	str	r3, [sp, #72]	; 0x48
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad90:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	4bab      	ldr	r3, [pc, #684]	; (800b044 <_svfprintf_r+0x5d4>)
 800ad98:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800ad9c:	f7f5 fec2 	bl	8000b24 <__aeabi_dcmpun>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	f040 84f1 	bne.w	800b788 <_svfprintf_r+0xd18>
 800ada6:	f04f 32ff 	mov.w	r2, #4294967295
 800adaa:	4ba6      	ldr	r3, [pc, #664]	; (800b044 <_svfprintf_r+0x5d4>)
 800adac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800adb0:	f7f5 fe9a 	bl	8000ae8 <__aeabi_dcmple>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f040 84e7 	bne.w	800b788 <_svfprintf_r+0xd18>
 800adba:	f000 bdfd 	b.w	800b9b8 <_svfprintf_r+0xf48>
 800adbe:	b10a      	cbz	r2, 800adc4 <_svfprintf_r+0x354>
 800adc0:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800adc4:	f015 0f20 	tst.w	r5, #32
 800adc8:	f107 0304 	add.w	r3, r7, #4
 800adcc:	d007      	beq.n	800adde <_svfprintf_r+0x36e>
 800adce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	17ce      	asrs	r6, r1, #31
 800add4:	4608      	mov	r0, r1
 800add6:	4631      	mov	r1, r6
 800add8:	e9c2 0100 	strd	r0, r1, [r2]
 800addc:	e00b      	b.n	800adf6 <_svfprintf_r+0x386>
 800adde:	06e9      	lsls	r1, r5, #27
 800ade0:	d406      	bmi.n	800adf0 <_svfprintf_r+0x380>
 800ade2:	066a      	lsls	r2, r5, #25
 800ade4:	d504      	bpl.n	800adf0 <_svfprintf_r+0x380>
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800adec:	8011      	strh	r1, [r2, #0]
 800adee:	e002      	b.n	800adf6 <_svfprintf_r+0x386>
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	461f      	mov	r7, r3
 800adf8:	e670      	b.n	800aadc <_svfprintf_r+0x6c>
 800adfa:	f045 0510 	orr.w	r5, r5, #16
 800adfe:	f015 0320 	ands.w	r3, r5, #32
 800ae02:	d009      	beq.n	800ae18 <_svfprintf_r+0x3a8>
 800ae04:	3707      	adds	r7, #7
 800ae06:	f027 0707 	bic.w	r7, r7, #7
 800ae0a:	f107 0308 	add.w	r3, r7, #8
 800ae0e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ae12:	9303      	str	r3, [sp, #12]
 800ae14:	2300      	movs	r3, #0
 800ae16:	e07b      	b.n	800af10 <_svfprintf_r+0x4a0>
 800ae18:	1d3a      	adds	r2, r7, #4
 800ae1a:	f015 0110 	ands.w	r1, r5, #16
 800ae1e:	9203      	str	r2, [sp, #12]
 800ae20:	d105      	bne.n	800ae2e <_svfprintf_r+0x3be>
 800ae22:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800ae26:	d002      	beq.n	800ae2e <_svfprintf_r+0x3be>
 800ae28:	883e      	ldrh	r6, [r7, #0]
 800ae2a:	2700      	movs	r7, #0
 800ae2c:	e7f2      	b.n	800ae14 <_svfprintf_r+0x3a4>
 800ae2e:	683e      	ldr	r6, [r7, #0]
 800ae30:	2700      	movs	r7, #0
 800ae32:	e06d      	b.n	800af10 <_svfprintf_r+0x4a0>
 800ae34:	1d3b      	adds	r3, r7, #4
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	2330      	movs	r3, #48	; 0x30
 800ae3a:	2278      	movs	r2, #120	; 0x78
 800ae3c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800ae40:	4b81      	ldr	r3, [pc, #516]	; (800b048 <_svfprintf_r+0x5d8>)
 800ae42:	683e      	ldr	r6, [r7, #0]
 800ae44:	9311      	str	r3, [sp, #68]	; 0x44
 800ae46:	2700      	movs	r7, #0
 800ae48:	f045 0502 	orr.w	r5, r5, #2
 800ae4c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800ae50:	2302      	movs	r3, #2
 800ae52:	9202      	str	r2, [sp, #8]
 800ae54:	e05c      	b.n	800af10 <_svfprintf_r+0x4a0>
 800ae56:	2600      	movs	r6, #0
 800ae58:	1d3b      	adds	r3, r7, #4
 800ae5a:	45b1      	cmp	r9, r6
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	f8d7 8000 	ldr.w	r8, [r7]
 800ae62:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800ae66:	db0a      	blt.n	800ae7e <_svfprintf_r+0x40e>
 800ae68:	464a      	mov	r2, r9
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4640      	mov	r0, r8
 800ae6e:	f7f5 f9af 	bl	80001d0 <memchr>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f000 80ea 	beq.w	800b04c <_svfprintf_r+0x5dc>
 800ae78:	ebc8 0900 	rsb	r9, r8, r0
 800ae7c:	e0e7      	b.n	800b04e <_svfprintf_r+0x5de>
 800ae7e:	4640      	mov	r0, r8
 800ae80:	f7f5 f9f6 	bl	8000270 <strlen>
 800ae84:	4681      	mov	r9, r0
 800ae86:	e0e2      	b.n	800b04e <_svfprintf_r+0x5de>
 800ae88:	f045 0510 	orr.w	r5, r5, #16
 800ae8c:	06ae      	lsls	r6, r5, #26
 800ae8e:	d508      	bpl.n	800aea2 <_svfprintf_r+0x432>
 800ae90:	3707      	adds	r7, #7
 800ae92:	f027 0707 	bic.w	r7, r7, #7
 800ae96:	f107 0308 	add.w	r3, r7, #8
 800ae9a:	9303      	str	r3, [sp, #12]
 800ae9c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800aea0:	e00a      	b.n	800aeb8 <_svfprintf_r+0x448>
 800aea2:	1d3b      	adds	r3, r7, #4
 800aea4:	f015 0f10 	tst.w	r5, #16
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	d103      	bne.n	800aeb4 <_svfprintf_r+0x444>
 800aeac:	0668      	lsls	r0, r5, #25
 800aeae:	d501      	bpl.n	800aeb4 <_svfprintf_r+0x444>
 800aeb0:	883e      	ldrh	r6, [r7, #0]
 800aeb2:	e000      	b.n	800aeb6 <_svfprintf_r+0x446>
 800aeb4:	683e      	ldr	r6, [r7, #0]
 800aeb6:	2700      	movs	r7, #0
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e029      	b.n	800af10 <_svfprintf_r+0x4a0>
 800aebc:	b10a      	cbz	r2, 800aec2 <_svfprintf_r+0x452>
 800aebe:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800aec2:	4b61      	ldr	r3, [pc, #388]	; (800b048 <_svfprintf_r+0x5d8>)
 800aec4:	9311      	str	r3, [sp, #68]	; 0x44
 800aec6:	06a9      	lsls	r1, r5, #26
 800aec8:	d508      	bpl.n	800aedc <_svfprintf_r+0x46c>
 800aeca:	3707      	adds	r7, #7
 800aecc:	f027 0707 	bic.w	r7, r7, #7
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	9303      	str	r3, [sp, #12]
 800aed6:	e9d7 6700 	ldrd	r6, r7, [r7]
 800aeda:	e00a      	b.n	800aef2 <_svfprintf_r+0x482>
 800aedc:	1d3b      	adds	r3, r7, #4
 800aede:	f015 0f10 	tst.w	r5, #16
 800aee2:	9303      	str	r3, [sp, #12]
 800aee4:	d103      	bne.n	800aeee <_svfprintf_r+0x47e>
 800aee6:	066a      	lsls	r2, r5, #25
 800aee8:	d501      	bpl.n	800aeee <_svfprintf_r+0x47e>
 800aeea:	883e      	ldrh	r6, [r7, #0]
 800aeec:	e000      	b.n	800aef0 <_svfprintf_r+0x480>
 800aeee:	683e      	ldr	r6, [r7, #0]
 800aef0:	2700      	movs	r7, #0
 800aef2:	07eb      	lsls	r3, r5, #31
 800aef4:	d50b      	bpl.n	800af0e <_svfprintf_r+0x49e>
 800aef6:	ea56 0307 	orrs.w	r3, r6, r7
 800aefa:	d008      	beq.n	800af0e <_svfprintf_r+0x49e>
 800aefc:	2330      	movs	r3, #48	; 0x30
 800aefe:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800af02:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800af06:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800af0a:	f045 0502 	orr.w	r5, r5, #2
 800af0e:	2302      	movs	r3, #2
 800af10:	2200      	movs	r2, #0
 800af12:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800af16:	e000      	b.n	800af1a <_svfprintf_r+0x4aa>
 800af18:	2301      	movs	r3, #1
 800af1a:	f1b9 0f00 	cmp.w	r9, #0
 800af1e:	f2c0 855c 	blt.w	800b9da <_svfprintf_r+0xf6a>
 800af22:	ea56 0207 	orrs.w	r2, r6, r7
 800af26:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800af2a:	d103      	bne.n	800af34 <_svfprintf_r+0x4c4>
 800af2c:	f1b9 0f00 	cmp.w	r9, #0
 800af30:	d05f      	beq.n	800aff2 <_svfprintf_r+0x582>
 800af32:	e006      	b.n	800af42 <_svfprintf_r+0x4d2>
 800af34:	460d      	mov	r5, r1
 800af36:	2b01      	cmp	r3, #1
 800af38:	d025      	beq.n	800af86 <_svfprintf_r+0x516>
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d046      	beq.n	800afcc <_svfprintf_r+0x55c>
 800af3e:	4629      	mov	r1, r5
 800af40:	e007      	b.n	800af52 <_svfprintf_r+0x4e2>
 800af42:	460d      	mov	r5, r1
 800af44:	2b01      	cmp	r3, #1
 800af46:	d022      	beq.n	800af8e <_svfprintf_r+0x51e>
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d03d      	beq.n	800afc8 <_svfprintf_r+0x558>
 800af4c:	4629      	mov	r1, r5
 800af4e:	2600      	movs	r6, #0
 800af50:	2700      	movs	r7, #0
 800af52:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800af56:	08f2      	lsrs	r2, r6, #3
 800af58:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800af5c:	08f8      	lsrs	r0, r7, #3
 800af5e:	f006 0307 	and.w	r3, r6, #7
 800af62:	4607      	mov	r7, r0
 800af64:	4616      	mov	r6, r2
 800af66:	3330      	adds	r3, #48	; 0x30
 800af68:	ea56 0207 	orrs.w	r2, r6, r7
 800af6c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800af70:	d1f1      	bne.n	800af56 <_svfprintf_r+0x4e6>
 800af72:	07e8      	lsls	r0, r5, #31
 800af74:	d548      	bpl.n	800b008 <_svfprintf_r+0x598>
 800af76:	2b30      	cmp	r3, #48	; 0x30
 800af78:	d046      	beq.n	800b008 <_svfprintf_r+0x598>
 800af7a:	2330      	movs	r3, #48	; 0x30
 800af7c:	f808 3c01 	strb.w	r3, [r8, #-1]
 800af80:	f108 38ff 	add.w	r8, r8, #4294967295
 800af84:	e040      	b.n	800b008 <_svfprintf_r+0x598>
 800af86:	2f00      	cmp	r7, #0
 800af88:	bf08      	it	eq
 800af8a:	2e0a      	cmpeq	r6, #10
 800af8c:	d205      	bcs.n	800af9a <_svfprintf_r+0x52a>
 800af8e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800af92:	3630      	adds	r6, #48	; 0x30
 800af94:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800af98:	e029      	b.n	800afee <_svfprintf_r+0x57e>
 800af9a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	220a      	movs	r2, #10
 800afa4:	2300      	movs	r3, #0
 800afa6:	f7f5 fe6b 	bl	8000c80 <__aeabi_uldivmod>
 800afaa:	3230      	adds	r2, #48	; 0x30
 800afac:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800afb0:	2300      	movs	r3, #0
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	220a      	movs	r2, #10
 800afb8:	f7f5 fe62 	bl	8000c80 <__aeabi_uldivmod>
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	ea56 0307 	orrs.w	r3, r6, r7
 800afc4:	d1eb      	bne.n	800af9e <_svfprintf_r+0x52e>
 800afc6:	e012      	b.n	800afee <_svfprintf_r+0x57e>
 800afc8:	2600      	movs	r6, #0
 800afca:	2700      	movs	r7, #0
 800afcc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800afd0:	f006 030f 	and.w	r3, r6, #15
 800afd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afd6:	5cd3      	ldrb	r3, [r2, r3]
 800afd8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800afdc:	0933      	lsrs	r3, r6, #4
 800afde:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800afe2:	093a      	lsrs	r2, r7, #4
 800afe4:	461e      	mov	r6, r3
 800afe6:	4617      	mov	r7, r2
 800afe8:	ea56 0307 	orrs.w	r3, r6, r7
 800afec:	d1f0      	bne.n	800afd0 <_svfprintf_r+0x560>
 800afee:	4629      	mov	r1, r5
 800aff0:	e00a      	b.n	800b008 <_svfprintf_r+0x598>
 800aff2:	b93b      	cbnz	r3, 800b004 <_svfprintf_r+0x594>
 800aff4:	07ea      	lsls	r2, r5, #31
 800aff6:	d505      	bpl.n	800b004 <_svfprintf_r+0x594>
 800aff8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800affc:	2330      	movs	r3, #48	; 0x30
 800affe:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800b002:	e001      	b.n	800b008 <_svfprintf_r+0x598>
 800b004:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800b008:	464e      	mov	r6, r9
 800b00a:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800b00e:	ebc8 0909 	rsb	r9, r8, r9
 800b012:	460d      	mov	r5, r1
 800b014:	2700      	movs	r7, #0
 800b016:	e01b      	b.n	800b050 <_svfprintf_r+0x5e0>
 800b018:	b10a      	cbz	r2, 800b01e <_svfprintf_r+0x5ae>
 800b01a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 83a0 	beq.w	800b766 <_svfprintf_r+0xcf6>
 800b026:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b02a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800b02e:	2600      	movs	r6, #0
 800b030:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800b034:	9703      	str	r7, [sp, #12]
 800b036:	f04f 0901 	mov.w	r9, #1
 800b03a:	4637      	mov	r7, r6
 800b03c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800b040:	e006      	b.n	800b050 <_svfprintf_r+0x5e0>
 800b042:	bf00      	nop
 800b044:	7fefffff 	.word	0x7fefffff
 800b048:	0800cdd5 	.word	0x0800cdd5
 800b04c:	4606      	mov	r6, r0
 800b04e:	4637      	mov	r7, r6
 800b050:	454e      	cmp	r6, r9
 800b052:	4633      	mov	r3, r6
 800b054:	bfb8      	it	lt
 800b056:	464b      	movlt	r3, r9
 800b058:	930b      	str	r3, [sp, #44]	; 0x2c
 800b05a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800b05e:	b113      	cbz	r3, 800b066 <_svfprintf_r+0x5f6>
 800b060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b062:	3301      	adds	r3, #1
 800b064:	930b      	str	r3, [sp, #44]	; 0x2c
 800b066:	f015 0302 	ands.w	r3, r5, #2
 800b06a:	9314      	str	r3, [sp, #80]	; 0x50
 800b06c:	bf1e      	ittt	ne
 800b06e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800b070:	3302      	addne	r3, #2
 800b072:	930b      	strne	r3, [sp, #44]	; 0x2c
 800b074:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800b078:	9315      	str	r3, [sp, #84]	; 0x54
 800b07a:	d139      	bne.n	800b0f0 <_svfprintf_r+0x680>
 800b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b080:	1a9b      	subs	r3, r3, r2
 800b082:	2b00      	cmp	r3, #0
 800b084:	930c      	str	r3, [sp, #48]	; 0x30
 800b086:	dd33      	ble.n	800b0f0 <_svfprintf_r+0x680>
 800b088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b08a:	2b10      	cmp	r3, #16
 800b08c:	4ba6      	ldr	r3, [pc, #664]	; (800b328 <_svfprintf_r+0x8b8>)
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	dd18      	ble.n	800b0c4 <_svfprintf_r+0x654>
 800b092:	2310      	movs	r3, #16
 800b094:	6063      	str	r3, [r4, #4]
 800b096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b098:	3310      	adds	r3, #16
 800b09a:	9321      	str	r3, [sp, #132]	; 0x84
 800b09c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b09e:	3301      	adds	r3, #1
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	9320      	str	r3, [sp, #128]	; 0x80
 800b0a4:	dc01      	bgt.n	800b0aa <_svfprintf_r+0x63a>
 800b0a6:	3408      	adds	r4, #8
 800b0a8:	e008      	b.n	800b0bc <_svfprintf_r+0x64c>
 800b0aa:	aa1f      	add	r2, sp, #124	; 0x7c
 800b0ac:	4659      	mov	r1, fp
 800b0ae:	4650      	mov	r0, sl
 800b0b0:	f001 fcdf 	bl	800ca72 <__ssprint_r>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	f040 835d 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b0ba:	ac2c      	add	r4, sp, #176	; 0xb0
 800b0bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0be:	3b10      	subs	r3, #16
 800b0c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0c2:	e7e1      	b.n	800b088 <_svfprintf_r+0x618>
 800b0c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0c6:	6063      	str	r3, [r4, #4]
 800b0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0cc:	4413      	add	r3, r2
 800b0ce:	9321      	str	r3, [sp, #132]	; 0x84
 800b0d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	2b07      	cmp	r3, #7
 800b0d6:	9320      	str	r3, [sp, #128]	; 0x80
 800b0d8:	dc01      	bgt.n	800b0de <_svfprintf_r+0x66e>
 800b0da:	3408      	adds	r4, #8
 800b0dc:	e008      	b.n	800b0f0 <_svfprintf_r+0x680>
 800b0de:	aa1f      	add	r2, sp, #124	; 0x7c
 800b0e0:	4659      	mov	r1, fp
 800b0e2:	4650      	mov	r0, sl
 800b0e4:	f001 fcc5 	bl	800ca72 <__ssprint_r>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f040 8343 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b0ee:	ac2c      	add	r4, sp, #176	; 0xb0
 800b0f0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800b0f4:	b1bb      	cbz	r3, 800b126 <_svfprintf_r+0x6b6>
 800b0f6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	6063      	str	r3, [r4, #4]
 800b100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b102:	3301      	adds	r3, #1
 800b104:	9321      	str	r3, [sp, #132]	; 0x84
 800b106:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b108:	3301      	adds	r3, #1
 800b10a:	2b07      	cmp	r3, #7
 800b10c:	9320      	str	r3, [sp, #128]	; 0x80
 800b10e:	dc01      	bgt.n	800b114 <_svfprintf_r+0x6a4>
 800b110:	3408      	adds	r4, #8
 800b112:	e008      	b.n	800b126 <_svfprintf_r+0x6b6>
 800b114:	aa1f      	add	r2, sp, #124	; 0x7c
 800b116:	4659      	mov	r1, fp
 800b118:	4650      	mov	r0, sl
 800b11a:	f001 fcaa 	bl	800ca72 <__ssprint_r>
 800b11e:	2800      	cmp	r0, #0
 800b120:	f040 8328 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b124:	ac2c      	add	r4, sp, #176	; 0xb0
 800b126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b128:	b1b3      	cbz	r3, 800b158 <_svfprintf_r+0x6e8>
 800b12a:	ab18      	add	r3, sp, #96	; 0x60
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	2302      	movs	r3, #2
 800b130:	6063      	str	r3, [r4, #4]
 800b132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b134:	3302      	adds	r3, #2
 800b136:	9321      	str	r3, [sp, #132]	; 0x84
 800b138:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b13a:	3301      	adds	r3, #1
 800b13c:	2b07      	cmp	r3, #7
 800b13e:	9320      	str	r3, [sp, #128]	; 0x80
 800b140:	dc01      	bgt.n	800b146 <_svfprintf_r+0x6d6>
 800b142:	3408      	adds	r4, #8
 800b144:	e008      	b.n	800b158 <_svfprintf_r+0x6e8>
 800b146:	aa1f      	add	r2, sp, #124	; 0x7c
 800b148:	4659      	mov	r1, fp
 800b14a:	4650      	mov	r0, sl
 800b14c:	f001 fc91 	bl	800ca72 <__ssprint_r>
 800b150:	2800      	cmp	r0, #0
 800b152:	f040 830f 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b156:	ac2c      	add	r4, sp, #176	; 0xb0
 800b158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b15a:	2b80      	cmp	r3, #128	; 0x80
 800b15c:	d135      	bne.n	800b1ca <_svfprintf_r+0x75a>
 800b15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd30      	ble.n	800b1ca <_svfprintf_r+0x75a>
 800b168:	4a70      	ldr	r2, [pc, #448]	; (800b32c <_svfprintf_r+0x8bc>)
 800b16a:	6022      	str	r2, [r4, #0]
 800b16c:	2b10      	cmp	r3, #16
 800b16e:	dd18      	ble.n	800b1a2 <_svfprintf_r+0x732>
 800b170:	2210      	movs	r2, #16
 800b172:	6062      	str	r2, [r4, #4]
 800b174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b176:	3210      	adds	r2, #16
 800b178:	9221      	str	r2, [sp, #132]	; 0x84
 800b17a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b17c:	3201      	adds	r2, #1
 800b17e:	2a07      	cmp	r2, #7
 800b180:	9220      	str	r2, [sp, #128]	; 0x80
 800b182:	dc01      	bgt.n	800b188 <_svfprintf_r+0x718>
 800b184:	3408      	adds	r4, #8
 800b186:	e00a      	b.n	800b19e <_svfprintf_r+0x72e>
 800b188:	aa1f      	add	r2, sp, #124	; 0x7c
 800b18a:	4659      	mov	r1, fp
 800b18c:	4650      	mov	r0, sl
 800b18e:	930c      	str	r3, [sp, #48]	; 0x30
 800b190:	f001 fc6f 	bl	800ca72 <__ssprint_r>
 800b194:	2800      	cmp	r0, #0
 800b196:	f040 82ed 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b19c:	ac2c      	add	r4, sp, #176	; 0xb0
 800b19e:	3b10      	subs	r3, #16
 800b1a0:	e7e2      	b.n	800b168 <_svfprintf_r+0x6f8>
 800b1a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1a4:	6063      	str	r3, [r4, #4]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	9321      	str	r3, [sp, #132]	; 0x84
 800b1aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	2b07      	cmp	r3, #7
 800b1b0:	9320      	str	r3, [sp, #128]	; 0x80
 800b1b2:	dc01      	bgt.n	800b1b8 <_svfprintf_r+0x748>
 800b1b4:	3408      	adds	r4, #8
 800b1b6:	e008      	b.n	800b1ca <_svfprintf_r+0x75a>
 800b1b8:	aa1f      	add	r2, sp, #124	; 0x7c
 800b1ba:	4659      	mov	r1, fp
 800b1bc:	4650      	mov	r0, sl
 800b1be:	f001 fc58 	bl	800ca72 <__ssprint_r>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f040 82d6 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b1c8:	ac2c      	add	r4, sp, #176	; 0xb0
 800b1ca:	ebc9 0606 	rsb	r6, r9, r6
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	dd2e      	ble.n	800b230 <_svfprintf_r+0x7c0>
 800b1d2:	4b56      	ldr	r3, [pc, #344]	; (800b32c <_svfprintf_r+0x8bc>)
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	2e10      	cmp	r6, #16
 800b1d8:	dd16      	ble.n	800b208 <_svfprintf_r+0x798>
 800b1da:	2310      	movs	r3, #16
 800b1dc:	6063      	str	r3, [r4, #4]
 800b1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	9321      	str	r3, [sp, #132]	; 0x84
 800b1e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	2b07      	cmp	r3, #7
 800b1ea:	9320      	str	r3, [sp, #128]	; 0x80
 800b1ec:	dc01      	bgt.n	800b1f2 <_svfprintf_r+0x782>
 800b1ee:	3408      	adds	r4, #8
 800b1f0:	e008      	b.n	800b204 <_svfprintf_r+0x794>
 800b1f2:	aa1f      	add	r2, sp, #124	; 0x7c
 800b1f4:	4659      	mov	r1, fp
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f001 fc3b 	bl	800ca72 <__ssprint_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f040 82b9 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b202:	ac2c      	add	r4, sp, #176	; 0xb0
 800b204:	3e10      	subs	r6, #16
 800b206:	e7e4      	b.n	800b1d2 <_svfprintf_r+0x762>
 800b208:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b20a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b20c:	6066      	str	r6, [r4, #4]
 800b20e:	3301      	adds	r3, #1
 800b210:	4406      	add	r6, r0
 800b212:	2b07      	cmp	r3, #7
 800b214:	9621      	str	r6, [sp, #132]	; 0x84
 800b216:	9320      	str	r3, [sp, #128]	; 0x80
 800b218:	dc01      	bgt.n	800b21e <_svfprintf_r+0x7ae>
 800b21a:	3408      	adds	r4, #8
 800b21c:	e008      	b.n	800b230 <_svfprintf_r+0x7c0>
 800b21e:	aa1f      	add	r2, sp, #124	; 0x7c
 800b220:	4659      	mov	r1, fp
 800b222:	4650      	mov	r0, sl
 800b224:	f001 fc25 	bl	800ca72 <__ssprint_r>
 800b228:	2800      	cmp	r0, #0
 800b22a:	f040 82a3 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b22e:	ac2c      	add	r4, sp, #176	; 0xb0
 800b230:	05eb      	lsls	r3, r5, #23
 800b232:	d414      	bmi.n	800b25e <_svfprintf_r+0x7ee>
 800b234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b236:	e884 0300 	stmia.w	r4, {r8, r9}
 800b23a:	444b      	add	r3, r9
 800b23c:	9321      	str	r3, [sp, #132]	; 0x84
 800b23e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b240:	3301      	adds	r3, #1
 800b242:	2b07      	cmp	r3, #7
 800b244:	9320      	str	r3, [sp, #128]	; 0x80
 800b246:	f340 8244 	ble.w	800b6d2 <_svfprintf_r+0xc62>
 800b24a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b24c:	4659      	mov	r1, fp
 800b24e:	4650      	mov	r0, sl
 800b250:	f001 fc0f 	bl	800ca72 <__ssprint_r>
 800b254:	2800      	cmp	r0, #0
 800b256:	f040 828d 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b25a:	ac2c      	add	r4, sp, #176	; 0xb0
 800b25c:	e23a      	b.n	800b6d4 <_svfprintf_r+0xc64>
 800b25e:	9b02      	ldr	r3, [sp, #8]
 800b260:	2b65      	cmp	r3, #101	; 0x65
 800b262:	f340 81ad 	ble.w	800b5c0 <_svfprintf_r+0xb50>
 800b266:	2200      	movs	r2, #0
 800b268:	2300      	movs	r3, #0
 800b26a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b26e:	f7f5 fc27 	bl	8000ac0 <__aeabi_dcmpeq>
 800b272:	2800      	cmp	r0, #0
 800b274:	d05e      	beq.n	800b334 <_svfprintf_r+0x8c4>
 800b276:	4b2e      	ldr	r3, [pc, #184]	; (800b330 <_svfprintf_r+0x8c0>)
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	2301      	movs	r3, #1
 800b27c:	6063      	str	r3, [r4, #4]
 800b27e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b280:	3301      	adds	r3, #1
 800b282:	9321      	str	r3, [sp, #132]	; 0x84
 800b284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b286:	3301      	adds	r3, #1
 800b288:	2b07      	cmp	r3, #7
 800b28a:	9320      	str	r3, [sp, #128]	; 0x80
 800b28c:	dc01      	bgt.n	800b292 <_svfprintf_r+0x822>
 800b28e:	3408      	adds	r4, #8
 800b290:	e008      	b.n	800b2a4 <_svfprintf_r+0x834>
 800b292:	aa1f      	add	r2, sp, #124	; 0x7c
 800b294:	4659      	mov	r1, fp
 800b296:	4650      	mov	r0, sl
 800b298:	f001 fbeb 	bl	800ca72 <__ssprint_r>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	f040 8269 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b2a2:	ac2c      	add	r4, sp, #176	; 0xb0
 800b2a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2a6:	9a04      	ldr	r2, [sp, #16]
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	db02      	blt.n	800b2b2 <_svfprintf_r+0x842>
 800b2ac:	07ee      	lsls	r6, r5, #31
 800b2ae:	f140 8211 	bpl.w	800b6d4 <_svfprintf_r+0xc64>
 800b2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	9b08      	ldr	r3, [sp, #32]
 800b2b8:	6063      	str	r3, [r4, #4]
 800b2ba:	9a08      	ldr	r2, [sp, #32]
 800b2bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2be:	4413      	add	r3, r2
 800b2c0:	9321      	str	r3, [sp, #132]	; 0x84
 800b2c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	2b07      	cmp	r3, #7
 800b2c8:	9320      	str	r3, [sp, #128]	; 0x80
 800b2ca:	dc01      	bgt.n	800b2d0 <_svfprintf_r+0x860>
 800b2cc:	3408      	adds	r4, #8
 800b2ce:	e008      	b.n	800b2e2 <_svfprintf_r+0x872>
 800b2d0:	aa1f      	add	r2, sp, #124	; 0x7c
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f001 fbcc 	bl	800ca72 <__ssprint_r>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f040 824a 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b2e0:	ac2c      	add	r4, sp, #176	; 0xb0
 800b2e2:	9b04      	ldr	r3, [sp, #16]
 800b2e4:	1e5e      	subs	r6, r3, #1
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	f340 81f4 	ble.w	800b6d4 <_svfprintf_r+0xc64>
 800b2ec:	4f0f      	ldr	r7, [pc, #60]	; (800b32c <_svfprintf_r+0x8bc>)
 800b2ee:	f04f 0810 	mov.w	r8, #16
 800b2f2:	2e10      	cmp	r6, #16
 800b2f4:	f340 8159 	ble.w	800b5aa <_svfprintf_r+0xb3a>
 800b2f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2fa:	3310      	adds	r3, #16
 800b2fc:	9321      	str	r3, [sp, #132]	; 0x84
 800b2fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b300:	3301      	adds	r3, #1
 800b302:	2b07      	cmp	r3, #7
 800b304:	e884 0180 	stmia.w	r4, {r7, r8}
 800b308:	9320      	str	r3, [sp, #128]	; 0x80
 800b30a:	dc01      	bgt.n	800b310 <_svfprintf_r+0x8a0>
 800b30c:	3408      	adds	r4, #8
 800b30e:	e008      	b.n	800b322 <_svfprintf_r+0x8b2>
 800b310:	aa1f      	add	r2, sp, #124	; 0x7c
 800b312:	4659      	mov	r1, fp
 800b314:	4650      	mov	r0, sl
 800b316:	f001 fbac 	bl	800ca72 <__ssprint_r>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f040 822a 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b320:	ac2c      	add	r4, sp, #176	; 0xb0
 800b322:	3e10      	subs	r6, #16
 800b324:	e7e5      	b.n	800b2f2 <_svfprintf_r+0x882>
 800b326:	bf00      	nop
 800b328:	0800d100 	.word	0x0800d100
 800b32c:	0800d0f0 	.word	0x0800d0f0
 800b330:	0800cde6 	.word	0x0800cde6
 800b334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b336:	2b00      	cmp	r3, #0
 800b338:	dc7c      	bgt.n	800b434 <_svfprintf_r+0x9c4>
 800b33a:	4b9f      	ldr	r3, [pc, #636]	; (800b5b8 <_svfprintf_r+0xb48>)
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	2301      	movs	r3, #1
 800b340:	6063      	str	r3, [r4, #4]
 800b342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b344:	3301      	adds	r3, #1
 800b346:	9321      	str	r3, [sp, #132]	; 0x84
 800b348:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b34a:	3301      	adds	r3, #1
 800b34c:	2b07      	cmp	r3, #7
 800b34e:	9320      	str	r3, [sp, #128]	; 0x80
 800b350:	dc01      	bgt.n	800b356 <_svfprintf_r+0x8e6>
 800b352:	3408      	adds	r4, #8
 800b354:	e008      	b.n	800b368 <_svfprintf_r+0x8f8>
 800b356:	aa1f      	add	r2, sp, #124	; 0x7c
 800b358:	4659      	mov	r1, fp
 800b35a:	4650      	mov	r0, sl
 800b35c:	f001 fb89 	bl	800ca72 <__ssprint_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	f040 8207 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b366:	ac2c      	add	r4, sp, #176	; 0xb0
 800b368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b36a:	b923      	cbnz	r3, 800b376 <_svfprintf_r+0x906>
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	b913      	cbnz	r3, 800b376 <_svfprintf_r+0x906>
 800b370:	07e8      	lsls	r0, r5, #31
 800b372:	f140 81af 	bpl.w	800b6d4 <_svfprintf_r+0xc64>
 800b376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	9b08      	ldr	r3, [sp, #32]
 800b37c:	6063      	str	r3, [r4, #4]
 800b37e:	9a08      	ldr	r2, [sp, #32]
 800b380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b382:	4413      	add	r3, r2
 800b384:	9321      	str	r3, [sp, #132]	; 0x84
 800b386:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b388:	3301      	adds	r3, #1
 800b38a:	2b07      	cmp	r3, #7
 800b38c:	9320      	str	r3, [sp, #128]	; 0x80
 800b38e:	dc02      	bgt.n	800b396 <_svfprintf_r+0x926>
 800b390:	f104 0308 	add.w	r3, r4, #8
 800b394:	e008      	b.n	800b3a8 <_svfprintf_r+0x938>
 800b396:	aa1f      	add	r2, sp, #124	; 0x7c
 800b398:	4659      	mov	r1, fp
 800b39a:	4650      	mov	r0, sl
 800b39c:	f001 fb69 	bl	800ca72 <__ssprint_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f040 81e7 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b3a6:	ab2c      	add	r3, sp, #176	; 0xb0
 800b3a8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b3aa:	4276      	negs	r6, r6
 800b3ac:	2e00      	cmp	r6, #0
 800b3ae:	dd30      	ble.n	800b412 <_svfprintf_r+0x9a2>
 800b3b0:	4f82      	ldr	r7, [pc, #520]	; (800b5bc <_svfprintf_r+0xb4c>)
 800b3b2:	2410      	movs	r4, #16
 800b3b4:	2e10      	cmp	r6, #16
 800b3b6:	dd16      	ble.n	800b3e6 <_svfprintf_r+0x976>
 800b3b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3ba:	601f      	str	r7, [r3, #0]
 800b3bc:	3210      	adds	r2, #16
 800b3be:	9221      	str	r2, [sp, #132]	; 0x84
 800b3c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b3c2:	605c      	str	r4, [r3, #4]
 800b3c4:	3201      	adds	r2, #1
 800b3c6:	2a07      	cmp	r2, #7
 800b3c8:	9220      	str	r2, [sp, #128]	; 0x80
 800b3ca:	dc01      	bgt.n	800b3d0 <_svfprintf_r+0x960>
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	e008      	b.n	800b3e2 <_svfprintf_r+0x972>
 800b3d0:	aa1f      	add	r2, sp, #124	; 0x7c
 800b3d2:	4659      	mov	r1, fp
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	f001 fb4c 	bl	800ca72 <__ssprint_r>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f040 81ca 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b3e0:	ab2c      	add	r3, sp, #176	; 0xb0
 800b3e2:	3e10      	subs	r6, #16
 800b3e4:	e7e6      	b.n	800b3b4 <_svfprintf_r+0x944>
 800b3e6:	4a75      	ldr	r2, [pc, #468]	; (800b5bc <_svfprintf_r+0xb4c>)
 800b3e8:	e883 0044 	stmia.w	r3, {r2, r6}
 800b3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3ee:	4416      	add	r6, r2
 800b3f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b3f2:	9621      	str	r6, [sp, #132]	; 0x84
 800b3f4:	3201      	adds	r2, #1
 800b3f6:	2a07      	cmp	r2, #7
 800b3f8:	9220      	str	r2, [sp, #128]	; 0x80
 800b3fa:	dc01      	bgt.n	800b400 <_svfprintf_r+0x990>
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	e008      	b.n	800b412 <_svfprintf_r+0x9a2>
 800b400:	aa1f      	add	r2, sp, #124	; 0x7c
 800b402:	4659      	mov	r1, fp
 800b404:	4650      	mov	r0, sl
 800b406:	f001 fb34 	bl	800ca72 <__ssprint_r>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f040 81b2 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b410:	ab2c      	add	r3, sp, #176	; 0xb0
 800b412:	9a04      	ldr	r2, [sp, #16]
 800b414:	605a      	str	r2, [r3, #4]
 800b416:	9904      	ldr	r1, [sp, #16]
 800b418:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b41a:	f8c3 8000 	str.w	r8, [r3]
 800b41e:	440a      	add	r2, r1
 800b420:	9221      	str	r2, [sp, #132]	; 0x84
 800b422:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b424:	3201      	adds	r2, #1
 800b426:	2a07      	cmp	r2, #7
 800b428:	9220      	str	r2, [sp, #128]	; 0x80
 800b42a:	f73f af0e 	bgt.w	800b24a <_svfprintf_r+0x7da>
 800b42e:	f103 0408 	add.w	r4, r3, #8
 800b432:	e14f      	b.n	800b6d4 <_svfprintf_r+0xc64>
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	42bb      	cmp	r3, r7
 800b438:	bfa8      	it	ge
 800b43a:	463b      	movge	r3, r7
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	461e      	mov	r6, r3
 800b440:	dd15      	ble.n	800b46e <_svfprintf_r+0x9fe>
 800b442:	6063      	str	r3, [r4, #4]
 800b444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b446:	f8c4 8000 	str.w	r8, [r4]
 800b44a:	4433      	add	r3, r6
 800b44c:	9321      	str	r3, [sp, #132]	; 0x84
 800b44e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b450:	3301      	adds	r3, #1
 800b452:	2b07      	cmp	r3, #7
 800b454:	9320      	str	r3, [sp, #128]	; 0x80
 800b456:	dc01      	bgt.n	800b45c <_svfprintf_r+0x9ec>
 800b458:	3408      	adds	r4, #8
 800b45a:	e008      	b.n	800b46e <_svfprintf_r+0x9fe>
 800b45c:	aa1f      	add	r2, sp, #124	; 0x7c
 800b45e:	4659      	mov	r1, fp
 800b460:	4650      	mov	r0, sl
 800b462:	f001 fb06 	bl	800ca72 <__ssprint_r>
 800b466:	2800      	cmp	r0, #0
 800b468:	f040 8184 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b46c:	ac2c      	add	r4, sp, #176	; 0xb0
 800b46e:	2e00      	cmp	r6, #0
 800b470:	bfac      	ite	ge
 800b472:	1bbe      	subge	r6, r7, r6
 800b474:	463e      	movlt	r6, r7
 800b476:	2e00      	cmp	r6, #0
 800b478:	dd30      	ble.n	800b4dc <_svfprintf_r+0xa6c>
 800b47a:	f04f 0910 	mov.w	r9, #16
 800b47e:	4b4f      	ldr	r3, [pc, #316]	; (800b5bc <_svfprintf_r+0xb4c>)
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	2e10      	cmp	r6, #16
 800b484:	dd16      	ble.n	800b4b4 <_svfprintf_r+0xa44>
 800b486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b488:	f8c4 9004 	str.w	r9, [r4, #4]
 800b48c:	3310      	adds	r3, #16
 800b48e:	9321      	str	r3, [sp, #132]	; 0x84
 800b490:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b492:	3301      	adds	r3, #1
 800b494:	2b07      	cmp	r3, #7
 800b496:	9320      	str	r3, [sp, #128]	; 0x80
 800b498:	dc01      	bgt.n	800b49e <_svfprintf_r+0xa2e>
 800b49a:	3408      	adds	r4, #8
 800b49c:	e008      	b.n	800b4b0 <_svfprintf_r+0xa40>
 800b49e:	aa1f      	add	r2, sp, #124	; 0x7c
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	4650      	mov	r0, sl
 800b4a4:	f001 fae5 	bl	800ca72 <__ssprint_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	f040 8163 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b4ae:	ac2c      	add	r4, sp, #176	; 0xb0
 800b4b0:	3e10      	subs	r6, #16
 800b4b2:	e7e4      	b.n	800b47e <_svfprintf_r+0xa0e>
 800b4b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4b6:	6066      	str	r6, [r4, #4]
 800b4b8:	441e      	add	r6, r3
 800b4ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b4bc:	9621      	str	r6, [sp, #132]	; 0x84
 800b4be:	3301      	adds	r3, #1
 800b4c0:	2b07      	cmp	r3, #7
 800b4c2:	9320      	str	r3, [sp, #128]	; 0x80
 800b4c4:	dc01      	bgt.n	800b4ca <_svfprintf_r+0xa5a>
 800b4c6:	3408      	adds	r4, #8
 800b4c8:	e008      	b.n	800b4dc <_svfprintf_r+0xa6c>
 800b4ca:	aa1f      	add	r2, sp, #124	; 0x7c
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	4650      	mov	r0, sl
 800b4d0:	f001 facf 	bl	800ca72 <__ssprint_r>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	f040 814d 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b4da:	ac2c      	add	r4, sp, #176	; 0xb0
 800b4dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4de:	9a04      	ldr	r2, [sp, #16]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	4447      	add	r7, r8
 800b4e4:	db01      	blt.n	800b4ea <_svfprintf_r+0xa7a>
 800b4e6:	07e9      	lsls	r1, r5, #31
 800b4e8:	d517      	bpl.n	800b51a <_svfprintf_r+0xaaa>
 800b4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	9b08      	ldr	r3, [sp, #32]
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	9a08      	ldr	r2, [sp, #32]
 800b4f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4f6:	4413      	add	r3, r2
 800b4f8:	9321      	str	r3, [sp, #132]	; 0x84
 800b4fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	2b07      	cmp	r3, #7
 800b500:	9320      	str	r3, [sp, #128]	; 0x80
 800b502:	dc01      	bgt.n	800b508 <_svfprintf_r+0xa98>
 800b504:	3408      	adds	r4, #8
 800b506:	e008      	b.n	800b51a <_svfprintf_r+0xaaa>
 800b508:	aa1f      	add	r2, sp, #124	; 0x7c
 800b50a:	4659      	mov	r1, fp
 800b50c:	4650      	mov	r0, sl
 800b50e:	f001 fab0 	bl	800ca72 <__ssprint_r>
 800b512:	2800      	cmp	r0, #0
 800b514:	f040 812e 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b518:	ac2c      	add	r4, sp, #176	; 0xb0
 800b51a:	9b04      	ldr	r3, [sp, #16]
 800b51c:	9a04      	ldr	r2, [sp, #16]
 800b51e:	eb08 0603 	add.w	r6, r8, r3
 800b522:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b524:	1bf6      	subs	r6, r6, r7
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	429e      	cmp	r6, r3
 800b52a:	bfa8      	it	ge
 800b52c:	461e      	movge	r6, r3
 800b52e:	2e00      	cmp	r6, #0
 800b530:	dd14      	ble.n	800b55c <_svfprintf_r+0xaec>
 800b532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b534:	6027      	str	r7, [r4, #0]
 800b536:	4433      	add	r3, r6
 800b538:	9321      	str	r3, [sp, #132]	; 0x84
 800b53a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b53c:	6066      	str	r6, [r4, #4]
 800b53e:	3301      	adds	r3, #1
 800b540:	2b07      	cmp	r3, #7
 800b542:	9320      	str	r3, [sp, #128]	; 0x80
 800b544:	dc01      	bgt.n	800b54a <_svfprintf_r+0xada>
 800b546:	3408      	adds	r4, #8
 800b548:	e008      	b.n	800b55c <_svfprintf_r+0xaec>
 800b54a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b54c:	4659      	mov	r1, fp
 800b54e:	4650      	mov	r0, sl
 800b550:	f001 fa8f 	bl	800ca72 <__ssprint_r>
 800b554:	2800      	cmp	r0, #0
 800b556:	f040 810d 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b55a:	ac2c      	add	r4, sp, #176	; 0xb0
 800b55c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b55e:	9a04      	ldr	r2, [sp, #16]
 800b560:	2e00      	cmp	r6, #0
 800b562:	eba2 0303 	sub.w	r3, r2, r3
 800b566:	bfac      	ite	ge
 800b568:	1b9e      	subge	r6, r3, r6
 800b56a:	461e      	movlt	r6, r3
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	f340 80b1 	ble.w	800b6d4 <_svfprintf_r+0xc64>
 800b572:	4f12      	ldr	r7, [pc, #72]	; (800b5bc <_svfprintf_r+0xb4c>)
 800b574:	f04f 0810 	mov.w	r8, #16
 800b578:	2e10      	cmp	r6, #16
 800b57a:	dd16      	ble.n	800b5aa <_svfprintf_r+0xb3a>
 800b57c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b57e:	3310      	adds	r3, #16
 800b580:	9321      	str	r3, [sp, #132]	; 0x84
 800b582:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b584:	3301      	adds	r3, #1
 800b586:	2b07      	cmp	r3, #7
 800b588:	e884 0180 	stmia.w	r4, {r7, r8}
 800b58c:	9320      	str	r3, [sp, #128]	; 0x80
 800b58e:	dc01      	bgt.n	800b594 <_svfprintf_r+0xb24>
 800b590:	3408      	adds	r4, #8
 800b592:	e008      	b.n	800b5a6 <_svfprintf_r+0xb36>
 800b594:	aa1f      	add	r2, sp, #124	; 0x7c
 800b596:	4659      	mov	r1, fp
 800b598:	4650      	mov	r0, sl
 800b59a:	f001 fa6a 	bl	800ca72 <__ssprint_r>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f040 80e8 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b5a4:	ac2c      	add	r4, sp, #176	; 0xb0
 800b5a6:	3e10      	subs	r6, #16
 800b5a8:	e7e6      	b.n	800b578 <_svfprintf_r+0xb08>
 800b5aa:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <_svfprintf_r+0xb4c>)
 800b5ac:	e884 0048 	stmia.w	r4, {r3, r6}
 800b5b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5b2:	441e      	add	r6, r3
 800b5b4:	9621      	str	r6, [sp, #132]	; 0x84
 800b5b6:	e642      	b.n	800b23e <_svfprintf_r+0x7ce>
 800b5b8:	0800cde6 	.word	0x0800cde6
 800b5bc:	0800d0f0 	.word	0x0800d0f0
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	dc01      	bgt.n	800b5ca <_svfprintf_r+0xb5a>
 800b5c6:	07ea      	lsls	r2, r5, #31
 800b5c8:	d573      	bpl.n	800b6b2 <_svfprintf_r+0xc42>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5d0:	f8c4 8000 	str.w	r8, [r4]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	9321      	str	r3, [sp, #132]	; 0x84
 800b5d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b5da:	3301      	adds	r3, #1
 800b5dc:	2b07      	cmp	r3, #7
 800b5de:	9320      	str	r3, [sp, #128]	; 0x80
 800b5e0:	dc01      	bgt.n	800b5e6 <_svfprintf_r+0xb76>
 800b5e2:	3408      	adds	r4, #8
 800b5e4:	e008      	b.n	800b5f8 <_svfprintf_r+0xb88>
 800b5e6:	aa1f      	add	r2, sp, #124	; 0x7c
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	4650      	mov	r0, sl
 800b5ec:	f001 fa41 	bl	800ca72 <__ssprint_r>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f040 80bf 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b5f6:	ac2c      	add	r4, sp, #176	; 0xb0
 800b5f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	9b08      	ldr	r3, [sp, #32]
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	9a08      	ldr	r2, [sp, #32]
 800b602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b604:	4413      	add	r3, r2
 800b606:	9321      	str	r3, [sp, #132]	; 0x84
 800b608:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b60a:	3301      	adds	r3, #1
 800b60c:	2b07      	cmp	r3, #7
 800b60e:	9320      	str	r3, [sp, #128]	; 0x80
 800b610:	dc01      	bgt.n	800b616 <_svfprintf_r+0xba6>
 800b612:	3408      	adds	r4, #8
 800b614:	e008      	b.n	800b628 <_svfprintf_r+0xbb8>
 800b616:	aa1f      	add	r2, sp, #124	; 0x7c
 800b618:	4659      	mov	r1, fp
 800b61a:	4650      	mov	r0, sl
 800b61c:	f001 fa29 	bl	800ca72 <__ssprint_r>
 800b620:	2800      	cmp	r0, #0
 800b622:	f040 80a7 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b626:	ac2c      	add	r4, sp, #176	; 0xb0
 800b628:	2300      	movs	r3, #0
 800b62a:	2200      	movs	r2, #0
 800b62c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b630:	f7f5 fa46 	bl	8000ac0 <__aeabi_dcmpeq>
 800b634:	9b04      	ldr	r3, [sp, #16]
 800b636:	1e5e      	subs	r6, r3, #1
 800b638:	b9b8      	cbnz	r0, 800b66a <_svfprintf_r+0xbfa>
 800b63a:	f108 0301 	add.w	r3, r8, #1
 800b63e:	e884 0048 	stmia.w	r4, {r3, r6}
 800b642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b644:	9a04      	ldr	r2, [sp, #16]
 800b646:	3b01      	subs	r3, #1
 800b648:	4413      	add	r3, r2
 800b64a:	9321      	str	r3, [sp, #132]	; 0x84
 800b64c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b64e:	3301      	adds	r3, #1
 800b650:	2b07      	cmp	r3, #7
 800b652:	9320      	str	r3, [sp, #128]	; 0x80
 800b654:	dd34      	ble.n	800b6c0 <_svfprintf_r+0xc50>
 800b656:	aa1f      	add	r2, sp, #124	; 0x7c
 800b658:	4659      	mov	r1, fp
 800b65a:	4650      	mov	r0, sl
 800b65c:	f001 fa09 	bl	800ca72 <__ssprint_r>
 800b660:	2800      	cmp	r0, #0
 800b662:	f040 8087 	bne.w	800b774 <_svfprintf_r+0xd04>
 800b666:	ac2c      	add	r4, sp, #176	; 0xb0
 800b668:	e02b      	b.n	800b6c2 <_svfprintf_r+0xc52>
 800b66a:	2e00      	cmp	r6, #0
 800b66c:	dd29      	ble.n	800b6c2 <_svfprintf_r+0xc52>
 800b66e:	4fa7      	ldr	r7, [pc, #668]	; (800b90c <_svfprintf_r+0xe9c>)
 800b670:	f04f 0810 	mov.w	r8, #16
 800b674:	2e10      	cmp	r6, #16
 800b676:	dd15      	ble.n	800b6a4 <_svfprintf_r+0xc34>
 800b678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b67a:	3310      	adds	r3, #16
 800b67c:	9321      	str	r3, [sp, #132]	; 0x84
 800b67e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b680:	3301      	adds	r3, #1
 800b682:	2b07      	cmp	r3, #7
 800b684:	e884 0180 	stmia.w	r4, {r7, r8}
 800b688:	9320      	str	r3, [sp, #128]	; 0x80
 800b68a:	dc01      	bgt.n	800b690 <_svfprintf_r+0xc20>
 800b68c:	3408      	adds	r4, #8
 800b68e:	e007      	b.n	800b6a0 <_svfprintf_r+0xc30>
 800b690:	aa1f      	add	r2, sp, #124	; 0x7c
 800b692:	4659      	mov	r1, fp
 800b694:	4650      	mov	r0, sl
 800b696:	f001 f9ec 	bl	800ca72 <__ssprint_r>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d16a      	bne.n	800b774 <_svfprintf_r+0xd04>
 800b69e:	ac2c      	add	r4, sp, #176	; 0xb0
 800b6a0:	3e10      	subs	r6, #16
 800b6a2:	e7e7      	b.n	800b674 <_svfprintf_r+0xc04>
 800b6a4:	4b99      	ldr	r3, [pc, #612]	; (800b90c <_svfprintf_r+0xe9c>)
 800b6a6:	e884 0048 	stmia.w	r4, {r3, r6}
 800b6aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ac:	441e      	add	r6, r3
 800b6ae:	9621      	str	r6, [sp, #132]	; 0x84
 800b6b0:	e7cc      	b.n	800b64c <_svfprintf_r+0xbdc>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	6063      	str	r3, [r4, #4]
 800b6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6b8:	f8c4 8000 	str.w	r8, [r4]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	e7c4      	b.n	800b64a <_svfprintf_r+0xbda>
 800b6c0:	3408      	adds	r4, #8
 800b6c2:	ab1b      	add	r3, sp, #108	; 0x6c
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6c8:	6063      	str	r3, [r4, #4]
 800b6ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ce:	4413      	add	r3, r2
 800b6d0:	e5b4      	b.n	800b23c <_svfprintf_r+0x7cc>
 800b6d2:	3408      	adds	r4, #8
 800b6d4:	076b      	lsls	r3, r5, #29
 800b6d6:	d40b      	bmi.n	800b6f0 <_svfprintf_r+0xc80>
 800b6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6de:	428a      	cmp	r2, r1
 800b6e0:	bfac      	ite	ge
 800b6e2:	189b      	addge	r3, r3, r2
 800b6e4:	185b      	addlt	r3, r3, r1
 800b6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d035      	beq.n	800b75a <_svfprintf_r+0xcea>
 800b6ee:	e02e      	b.n	800b74e <_svfprintf_r+0xcde>
 800b6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6f4:	1a9d      	subs	r5, r3, r2
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	ddee      	ble.n	800b6d8 <_svfprintf_r+0xc68>
 800b6fa:	2610      	movs	r6, #16
 800b6fc:	4b84      	ldr	r3, [pc, #528]	; (800b910 <_svfprintf_r+0xea0>)
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	2d10      	cmp	r5, #16
 800b702:	dd13      	ble.n	800b72c <_svfprintf_r+0xcbc>
 800b704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b706:	6066      	str	r6, [r4, #4]
 800b708:	3310      	adds	r3, #16
 800b70a:	9321      	str	r3, [sp, #132]	; 0x84
 800b70c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b70e:	3301      	adds	r3, #1
 800b710:	2b07      	cmp	r3, #7
 800b712:	9320      	str	r3, [sp, #128]	; 0x80
 800b714:	dc01      	bgt.n	800b71a <_svfprintf_r+0xcaa>
 800b716:	3408      	adds	r4, #8
 800b718:	e006      	b.n	800b728 <_svfprintf_r+0xcb8>
 800b71a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b71c:	4659      	mov	r1, fp
 800b71e:	4650      	mov	r0, sl
 800b720:	f001 f9a7 	bl	800ca72 <__ssprint_r>
 800b724:	bb30      	cbnz	r0, 800b774 <_svfprintf_r+0xd04>
 800b726:	ac2c      	add	r4, sp, #176	; 0xb0
 800b728:	3d10      	subs	r5, #16
 800b72a:	e7e7      	b.n	800b6fc <_svfprintf_r+0xc8c>
 800b72c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b72e:	6065      	str	r5, [r4, #4]
 800b730:	441d      	add	r5, r3
 800b732:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b734:	9521      	str	r5, [sp, #132]	; 0x84
 800b736:	3301      	adds	r3, #1
 800b738:	2b07      	cmp	r3, #7
 800b73a:	9320      	str	r3, [sp, #128]	; 0x80
 800b73c:	ddcc      	ble.n	800b6d8 <_svfprintf_r+0xc68>
 800b73e:	aa1f      	add	r2, sp, #124	; 0x7c
 800b740:	4659      	mov	r1, fp
 800b742:	4650      	mov	r0, sl
 800b744:	f001 f995 	bl	800ca72 <__ssprint_r>
 800b748:	2800      	cmp	r0, #0
 800b74a:	d0c5      	beq.n	800b6d8 <_svfprintf_r+0xc68>
 800b74c:	e012      	b.n	800b774 <_svfprintf_r+0xd04>
 800b74e:	aa1f      	add	r2, sp, #124	; 0x7c
 800b750:	4659      	mov	r1, fp
 800b752:	4650      	mov	r0, sl
 800b754:	f001 f98d 	bl	800ca72 <__ssprint_r>
 800b758:	b960      	cbnz	r0, 800b774 <_svfprintf_r+0xd04>
 800b75a:	2300      	movs	r3, #0
 800b75c:	9320      	str	r3, [sp, #128]	; 0x80
 800b75e:	9f03      	ldr	r7, [sp, #12]
 800b760:	ac2c      	add	r4, sp, #176	; 0xb0
 800b762:	f7ff b9bb 	b.w	800aadc <_svfprintf_r+0x6c>
 800b766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b768:	b123      	cbz	r3, 800b774 <_svfprintf_r+0xd04>
 800b76a:	aa1f      	add	r2, sp, #124	; 0x7c
 800b76c:	4659      	mov	r1, fp
 800b76e:	4650      	mov	r0, sl
 800b770:	f001 f97f 	bl	800ca72 <__ssprint_r>
 800b774:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800b778:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b77e:	bf18      	it	ne
 800b780:	f04f 33ff 	movne.w	r3, #4294967295
 800b784:	4618      	mov	r0, r3
 800b786:	e12e      	b.n	800b9e6 <_svfprintf_r+0xf76>
 800b788:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b78c:	4610      	mov	r0, r2
 800b78e:	4619      	mov	r1, r3
 800b790:	f7f5 f9c8 	bl	8000b24 <__aeabi_dcmpun>
 800b794:	b160      	cbz	r0, 800b7b0 <_svfprintf_r+0xd40>
 800b796:	4b5f      	ldr	r3, [pc, #380]	; (800b914 <_svfprintf_r+0xea4>)
 800b798:	4a5f      	ldr	r2, [pc, #380]	; (800b918 <_svfprintf_r+0xea8>)
 800b79a:	9902      	ldr	r1, [sp, #8]
 800b79c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800b7a0:	2947      	cmp	r1, #71	; 0x47
 800b7a2:	bfcc      	ite	gt
 800b7a4:	4690      	movgt	r8, r2
 800b7a6:	4698      	movle	r8, r3
 800b7a8:	f04f 0903 	mov.w	r9, #3
 800b7ac:	2600      	movs	r6, #0
 800b7ae:	e44e      	b.n	800b04e <_svfprintf_r+0x5de>
 800b7b0:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b7b4:	d00a      	beq.n	800b7cc <_svfprintf_r+0xd5c>
 800b7b6:	9b02      	ldr	r3, [sp, #8]
 800b7b8:	f023 0320 	bic.w	r3, r3, #32
 800b7bc:	2b47      	cmp	r3, #71	; 0x47
 800b7be:	d107      	bne.n	800b7d0 <_svfprintf_r+0xd60>
 800b7c0:	f1b9 0f00 	cmp.w	r9, #0
 800b7c4:	bf08      	it	eq
 800b7c6:	f04f 0901 	moveq.w	r9, #1
 800b7ca:	e001      	b.n	800b7d0 <_svfprintf_r+0xd60>
 800b7cc:	f04f 0906 	mov.w	r9, #6
 800b7d0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800b7d4:	930c      	str	r3, [sp, #48]	; 0x30
 800b7d6:	9b07      	ldr	r3, [sp, #28]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	da07      	bge.n	800b7ec <_svfprintf_r+0xd7c>
 800b7dc:	9b06      	ldr	r3, [sp, #24]
 800b7de:	930e      	str	r3, [sp, #56]	; 0x38
 800b7e0:	9b07      	ldr	r3, [sp, #28]
 800b7e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e8:	232d      	movs	r3, #45	; 0x2d
 800b7ea:	e004      	b.n	800b7f6 <_svfprintf_r+0xd86>
 800b7ec:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b7f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	f023 0720 	bic.w	r7, r3, #32
 800b7fe:	2f46      	cmp	r7, #70	; 0x46
 800b800:	d004      	beq.n	800b80c <_svfprintf_r+0xd9c>
 800b802:	2f45      	cmp	r7, #69	; 0x45
 800b804:	d105      	bne.n	800b812 <_svfprintf_r+0xda2>
 800b806:	f109 0601 	add.w	r6, r9, #1
 800b80a:	e003      	b.n	800b814 <_svfprintf_r+0xda4>
 800b80c:	464e      	mov	r6, r9
 800b80e:	2103      	movs	r1, #3
 800b810:	e001      	b.n	800b816 <_svfprintf_r+0xda6>
 800b812:	464e      	mov	r6, r9
 800b814:	2102      	movs	r1, #2
 800b816:	ab1d      	add	r3, sp, #116	; 0x74
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	ab1a      	add	r3, sp, #104	; 0x68
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	4632      	mov	r2, r6
 800b820:	ab19      	add	r3, sp, #100	; 0x64
 800b822:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800b826:	4650      	mov	r0, sl
 800b828:	f7fb ffa2 	bl	8007770 <_dtoa_r>
 800b82c:	2f47      	cmp	r7, #71	; 0x47
 800b82e:	4680      	mov	r8, r0
 800b830:	d102      	bne.n	800b838 <_svfprintf_r+0xdc8>
 800b832:	07eb      	lsls	r3, r5, #31
 800b834:	f140 80cd 	bpl.w	800b9d2 <_svfprintf_r+0xf62>
 800b838:	eb08 0306 	add.w	r3, r8, r6
 800b83c:	2f46      	cmp	r7, #70	; 0x46
 800b83e:	9304      	str	r3, [sp, #16]
 800b840:	d111      	bne.n	800b866 <_svfprintf_r+0xdf6>
 800b842:	f898 3000 	ldrb.w	r3, [r8]
 800b846:	2b30      	cmp	r3, #48	; 0x30
 800b848:	d109      	bne.n	800b85e <_svfprintf_r+0xdee>
 800b84a:	2200      	movs	r2, #0
 800b84c:	2300      	movs	r3, #0
 800b84e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b852:	f7f5 f935 	bl	8000ac0 <__aeabi_dcmpeq>
 800b856:	b910      	cbnz	r0, 800b85e <_svfprintf_r+0xdee>
 800b858:	f1c6 0601 	rsb	r6, r6, #1
 800b85c:	9619      	str	r6, [sp, #100]	; 0x64
 800b85e:	9a04      	ldr	r2, [sp, #16]
 800b860:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b862:	441a      	add	r2, r3
 800b864:	9204      	str	r2, [sp, #16]
 800b866:	2200      	movs	r2, #0
 800b868:	2300      	movs	r3, #0
 800b86a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b86e:	f7f5 f927 	bl	8000ac0 <__aeabi_dcmpeq>
 800b872:	b908      	cbnz	r0, 800b878 <_svfprintf_r+0xe08>
 800b874:	2230      	movs	r2, #48	; 0x30
 800b876:	e002      	b.n	800b87e <_svfprintf_r+0xe0e>
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	931d      	str	r3, [sp, #116]	; 0x74
 800b87c:	e007      	b.n	800b88e <_svfprintf_r+0xe1e>
 800b87e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b880:	9904      	ldr	r1, [sp, #16]
 800b882:	4299      	cmp	r1, r3
 800b884:	d903      	bls.n	800b88e <_svfprintf_r+0xe1e>
 800b886:	1c59      	adds	r1, r3, #1
 800b888:	911d      	str	r1, [sp, #116]	; 0x74
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	e7f7      	b.n	800b87e <_svfprintf_r+0xe0e>
 800b88e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b890:	2f47      	cmp	r7, #71	; 0x47
 800b892:	ebc8 0303 	rsb	r3, r8, r3
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	d108      	bne.n	800b8ac <_svfprintf_r+0xe3c>
 800b89a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b89c:	1cdf      	adds	r7, r3, #3
 800b89e:	db01      	blt.n	800b8a4 <_svfprintf_r+0xe34>
 800b8a0:	4599      	cmp	r9, r3
 800b8a2:	da68      	bge.n	800b976 <_svfprintf_r+0xf06>
 800b8a4:	9b02      	ldr	r3, [sp, #8]
 800b8a6:	3b02      	subs	r3, #2
 800b8a8:	9302      	str	r3, [sp, #8]
 800b8aa:	e002      	b.n	800b8b2 <_svfprintf_r+0xe42>
 800b8ac:	9b02      	ldr	r3, [sp, #8]
 800b8ae:	2b65      	cmp	r3, #101	; 0x65
 800b8b0:	dc4a      	bgt.n	800b948 <_svfprintf_r+0xed8>
 800b8b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b8b8:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	9319      	str	r3, [sp, #100]	; 0x64
 800b8c2:	bfba      	itte	lt
 800b8c4:	425b      	neglt	r3, r3
 800b8c6:	222d      	movlt	r2, #45	; 0x2d
 800b8c8:	222b      	movge	r2, #43	; 0x2b
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800b8d0:	dd24      	ble.n	800b91c <_svfprintf_r+0xeac>
 800b8d2:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800b8d6:	200a      	movs	r0, #10
 800b8d8:	fb93 f1f0 	sdiv	r1, r3, r0
 800b8dc:	fb00 3311 	mls	r3, r0, r1, r3
 800b8e0:	3330      	adds	r3, #48	; 0x30
 800b8e2:	2909      	cmp	r1, #9
 800b8e4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	dcf5      	bgt.n	800b8d8 <_svfprintf_r+0xe68>
 800b8ec:	3330      	adds	r3, #48	; 0x30
 800b8ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8f2:	1e51      	subs	r1, r2, #1
 800b8f4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800b8f8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800b8fc:	4281      	cmp	r1, r0
 800b8fe:	461a      	mov	r2, r3
 800b900:	d213      	bcs.n	800b92a <_svfprintf_r+0xeba>
 800b902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b906:	f803 2b01 	strb.w	r2, [r3], #1
 800b90a:	e7f7      	b.n	800b8fc <_svfprintf_r+0xe8c>
 800b90c:	0800d0f0 	.word	0x0800d0f0
 800b910:	0800d100 	.word	0x0800d100
 800b914:	0800cdbc 	.word	0x0800cdbc
 800b918:	0800cdc0 	.word	0x0800cdc0
 800b91c:	2230      	movs	r2, #48	; 0x30
 800b91e:	4413      	add	r3, r2
 800b920:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800b924:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b928:	aa1c      	add	r2, sp, #112	; 0x70
 800b92a:	ab1b      	add	r3, sp, #108	; 0x6c
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	9a04      	ldr	r2, [sp, #16]
 800b930:	9310      	str	r3, [sp, #64]	; 0x40
 800b932:	2a01      	cmp	r2, #1
 800b934:	eb03 0902 	add.w	r9, r3, r2
 800b938:	dc02      	bgt.n	800b940 <_svfprintf_r+0xed0>
 800b93a:	f015 0701 	ands.w	r7, r5, #1
 800b93e:	d032      	beq.n	800b9a6 <_svfprintf_r+0xf36>
 800b940:	9b08      	ldr	r3, [sp, #32]
 800b942:	2700      	movs	r7, #0
 800b944:	4499      	add	r9, r3
 800b946:	e02e      	b.n	800b9a6 <_svfprintf_r+0xf36>
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	2b66      	cmp	r3, #102	; 0x66
 800b94c:	d113      	bne.n	800b976 <_svfprintf_r+0xf06>
 800b94e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b950:	2b00      	cmp	r3, #0
 800b952:	dd07      	ble.n	800b964 <_svfprintf_r+0xef4>
 800b954:	f1b9 0f00 	cmp.w	r9, #0
 800b958:	d101      	bne.n	800b95e <_svfprintf_r+0xeee>
 800b95a:	07ee      	lsls	r6, r5, #31
 800b95c:	d521      	bpl.n	800b9a2 <_svfprintf_r+0xf32>
 800b95e:	9a08      	ldr	r2, [sp, #32]
 800b960:	4413      	add	r3, r2
 800b962:	e006      	b.n	800b972 <_svfprintf_r+0xf02>
 800b964:	f1b9 0f00 	cmp.w	r9, #0
 800b968:	d101      	bne.n	800b96e <_svfprintf_r+0xefe>
 800b96a:	07ed      	lsls	r5, r5, #31
 800b96c:	d514      	bpl.n	800b998 <_svfprintf_r+0xf28>
 800b96e:	9b08      	ldr	r3, [sp, #32]
 800b970:	3301      	adds	r3, #1
 800b972:	444b      	add	r3, r9
 800b974:	e015      	b.n	800b9a2 <_svfprintf_r+0xf32>
 800b976:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b978:	9a04      	ldr	r2, [sp, #16]
 800b97a:	4293      	cmp	r3, r2
 800b97c:	db03      	blt.n	800b986 <_svfprintf_r+0xf16>
 800b97e:	07e8      	lsls	r0, r5, #31
 800b980:	d50d      	bpl.n	800b99e <_svfprintf_r+0xf2e>
 800b982:	9a08      	ldr	r2, [sp, #32]
 800b984:	e006      	b.n	800b994 <_svfprintf_r+0xf24>
 800b986:	9a04      	ldr	r2, [sp, #16]
 800b988:	9908      	ldr	r1, [sp, #32]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	440a      	add	r2, r1
 800b98e:	dc05      	bgt.n	800b99c <_svfprintf_r+0xf2c>
 800b990:	f1c3 0301 	rsb	r3, r3, #1
 800b994:	4413      	add	r3, r2
 800b996:	e002      	b.n	800b99e <_svfprintf_r+0xf2e>
 800b998:	2301      	movs	r3, #1
 800b99a:	e002      	b.n	800b9a2 <_svfprintf_r+0xf32>
 800b99c:	4613      	mov	r3, r2
 800b99e:	2267      	movs	r2, #103	; 0x67
 800b9a0:	9202      	str	r2, [sp, #8]
 800b9a2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b9a4:	4699      	mov	r9, r3
 800b9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9a8:	b113      	cbz	r3, 800b9b0 <_svfprintf_r+0xf40>
 800b9aa:	232d      	movs	r3, #45	; 0x2d
 800b9ac:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800b9b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	f7ff bb4c 	b.w	800b050 <_svfprintf_r+0x5e0>
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9c0:	f7f5 f888 	bl	8000ad4 <__aeabi_dcmplt>
 800b9c4:	b110      	cbz	r0, 800b9cc <_svfprintf_r+0xf5c>
 800b9c6:	232d      	movs	r3, #45	; 0x2d
 800b9c8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <_svfprintf_r+0xf7c>)
 800b9ce:	4a08      	ldr	r2, [pc, #32]	; (800b9f0 <_svfprintf_r+0xf80>)
 800b9d0:	e6e3      	b.n	800b79a <_svfprintf_r+0xd2a>
 800b9d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9d4:	1a1b      	subs	r3, r3, r0
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	e75f      	b.n	800b89a <_svfprintf_r+0xe2a>
 800b9da:	ea56 0207 	orrs.w	r2, r6, r7
 800b9de:	f47f aaaa 	bne.w	800af36 <_svfprintf_r+0x4c6>
 800b9e2:	f7ff baaf 	b.w	800af44 <_svfprintf_r+0x4d4>
 800b9e6:	b03d      	add	sp, #244	; 0xf4
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ec:	0800cdb4 	.word	0x0800cdb4
 800b9f0:	0800cdb8 	.word	0x0800cdb8

0800b9f4 <__submore>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba00:	4299      	cmp	r1, r3
 800ba02:	d11c      	bne.n	800ba3e <__submore+0x4a>
 800ba04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ba08:	f7fd f80a 	bl	8008a20 <_malloc_r>
 800ba0c:	b918      	cbnz	r0, 800ba16 <__submore+0x22>
 800ba0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba1a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba1c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba20:	6360      	str	r0, [r4, #52]	; 0x34
 800ba22:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ba26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba2a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ba2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba32:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ba36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ba3a:	6020      	str	r0, [r4, #0]
 800ba3c:	e012      	b.n	800ba64 <__submore+0x70>
 800ba3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ba40:	0077      	lsls	r7, r6, #1
 800ba42:	463a      	mov	r2, r7
 800ba44:	f000 fe58 	bl	800c6f8 <_realloc_r>
 800ba48:	4605      	mov	r5, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0df      	beq.n	800ba0e <__submore+0x1a>
 800ba4e:	eb00 0806 	add.w	r8, r0, r6
 800ba52:	4601      	mov	r1, r0
 800ba54:	4632      	mov	r2, r6
 800ba56:	4640      	mov	r0, r8
 800ba58:	f7fd fa3c 	bl	8008ed4 <memcpy>
 800ba5c:	f8c4 8000 	str.w	r8, [r4]
 800ba60:	6365      	str	r5, [r4, #52]	; 0x34
 800ba62:	63a7      	str	r7, [r4, #56]	; 0x38
 800ba64:	2000      	movs	r0, #0
 800ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ba6c <_ungetc_r>:
 800ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6e:	1c4d      	adds	r5, r1, #1
 800ba70:	4606      	mov	r6, r0
 800ba72:	460f      	mov	r7, r1
 800ba74:	4614      	mov	r4, r2
 800ba76:	d102      	bne.n	800ba7e <_ungetc_r+0x12>
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba7e:	b118      	cbz	r0, 800ba88 <_ungetc_r+0x1c>
 800ba80:	6983      	ldr	r3, [r0, #24]
 800ba82:	b90b      	cbnz	r3, 800ba88 <_ungetc_r+0x1c>
 800ba84:	f7fc fd20 	bl	80084c8 <__sinit>
 800ba88:	4b33      	ldr	r3, [pc, #204]	; (800bb58 <_ungetc_r+0xec>)
 800ba8a:	429c      	cmp	r4, r3
 800ba8c:	d101      	bne.n	800ba92 <_ungetc_r+0x26>
 800ba8e:	6874      	ldr	r4, [r6, #4]
 800ba90:	e008      	b.n	800baa4 <_ungetc_r+0x38>
 800ba92:	4b32      	ldr	r3, [pc, #200]	; (800bb5c <_ungetc_r+0xf0>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	d101      	bne.n	800ba9c <_ungetc_r+0x30>
 800ba98:	68b4      	ldr	r4, [r6, #8]
 800ba9a:	e003      	b.n	800baa4 <_ungetc_r+0x38>
 800ba9c:	4b30      	ldr	r3, [pc, #192]	; (800bb60 <_ungetc_r+0xf4>)
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	bf08      	it	eq
 800baa2:	68f4      	ldreq	r4, [r6, #12]
 800baa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa8:	0498      	lsls	r0, r3, #18
 800baaa:	d406      	bmi.n	800baba <_ungetc_r+0x4e>
 800baac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	6662      	str	r2, [r4, #100]	; 0x64
 800baba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800babe:	f023 0320 	bic.w	r3, r3, #32
 800bac2:	81a3      	strh	r3, [r4, #12]
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	0759      	lsls	r1, r3, #29
 800bac8:	d413      	bmi.n	800baf2 <_ungetc_r+0x86>
 800baca:	06da      	lsls	r2, r3, #27
 800bacc:	d5d4      	bpl.n	800ba78 <_ungetc_r+0xc>
 800bace:	071b      	lsls	r3, r3, #28
 800bad0:	d50b      	bpl.n	800baea <_ungetc_r+0x7e>
 800bad2:	4621      	mov	r1, r4
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7fc fc7b 	bl	80083d0 <_fflush_r>
 800bada:	2800      	cmp	r0, #0
 800badc:	d1cc      	bne.n	800ba78 <_ungetc_r+0xc>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	60a0      	str	r0, [r4, #8]
 800bae2:	f023 0308 	bic.w	r3, r3, #8
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	61a0      	str	r0, [r4, #24]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f043 0304 	orr.w	r3, r3, #4
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800baf4:	6862      	ldr	r2, [r4, #4]
 800baf6:	b2fd      	uxtb	r5, r7
 800baf8:	b18b      	cbz	r3, 800bb1e <_ungetc_r+0xb2>
 800bafa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bafc:	429a      	cmp	r2, r3
 800bafe:	da07      	bge.n	800bb10 <_ungetc_r+0xa4>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	1e5a      	subs	r2, r3, #1
 800bb04:	6022      	str	r2, [r4, #0]
 800bb06:	f803 7c01 	strb.w	r7, [r3, #-1]
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	e020      	b.n	800bb52 <_ungetc_r+0xe6>
 800bb10:	4621      	mov	r1, r4
 800bb12:	4630      	mov	r0, r6
 800bb14:	f7ff ff6e 	bl	800b9f4 <__submore>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d0f1      	beq.n	800bb00 <_ungetc_r+0x94>
 800bb1c:	e7ac      	b.n	800ba78 <_ungetc_r+0xc>
 800bb1e:	6921      	ldr	r1, [r4, #16]
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	b151      	cbz	r1, 800bb3a <_ungetc_r+0xce>
 800bb24:	4299      	cmp	r1, r3
 800bb26:	d208      	bcs.n	800bb3a <_ungetc_r+0xce>
 800bb28:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb2c:	428d      	cmp	r5, r1
 800bb2e:	d104      	bne.n	800bb3a <_ungetc_r+0xce>
 800bb30:	3b01      	subs	r3, #1
 800bb32:	3201      	adds	r2, #1
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	6062      	str	r2, [r4, #4]
 800bb38:	e00c      	b.n	800bb54 <_ungetc_r+0xe8>
 800bb3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bb3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb40:	6363      	str	r3, [r4, #52]	; 0x34
 800bb42:	2303      	movs	r3, #3
 800bb44:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb46:	4623      	mov	r3, r4
 800bb48:	6422      	str	r2, [r4, #64]	; 0x40
 800bb4a:	f803 7f46 	strb.w	r7, [r3, #70]!
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	2301      	movs	r3, #1
 800bb52:	6063      	str	r3, [r4, #4]
 800bb54:	4628      	mov	r0, r5
 800bb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb58:	0800cf30 	.word	0x0800cf30
 800bb5c:	0800cf50 	.word	0x0800cf50
 800bb60:	0800cf70 	.word	0x0800cf70

0800bb64 <__sprint_r>:
 800bb64:	6893      	ldr	r3, [r2, #8]
 800bb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	460f      	mov	r7, r1
 800bb6e:	4614      	mov	r4, r2
 800bb70:	b91b      	cbnz	r3, 800bb7a <__sprint_r+0x16>
 800bb72:	6053      	str	r3, [r2, #4]
 800bb74:	4618      	mov	r0, r3
 800bb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800bb7c:	049d      	lsls	r5, r3, #18
 800bb7e:	d51c      	bpl.n	800bbba <__sprint_r+0x56>
 800bb80:	6815      	ldr	r5, [r2, #0]
 800bb82:	68a0      	ldr	r0, [r4, #8]
 800bb84:	3508      	adds	r5, #8
 800bb86:	b1d0      	cbz	r0, 800bbbe <__sprint_r+0x5a>
 800bb88:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800bb8c:	f855 ac08 	ldr.w	sl, [r5, #-8]
 800bb90:	08b6      	lsrs	r6, r6, #2
 800bb92:	f04f 0900 	mov.w	r9, #0
 800bb96:	454e      	cmp	r6, r9
 800bb98:	dd0a      	ble.n	800bbb0 <__sprint_r+0x4c>
 800bb9a:	463a      	mov	r2, r7
 800bb9c:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 800bba0:	4640      	mov	r0, r8
 800bba2:	f000 f8e0 	bl	800bd66 <_fputwc_r>
 800bba6:	1c43      	adds	r3, r0, #1
 800bba8:	d009      	beq.n	800bbbe <__sprint_r+0x5a>
 800bbaa:	f109 0901 	add.w	r9, r9, #1
 800bbae:	e7f2      	b.n	800bb96 <__sprint_r+0x32>
 800bbb0:	68a3      	ldr	r3, [r4, #8]
 800bbb2:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 800bbb6:	60a6      	str	r6, [r4, #8]
 800bbb8:	e7e3      	b.n	800bb82 <__sprint_r+0x1e>
 800bbba:	f000 f8f7 	bl	800bdac <__sfvwrite_r>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60a3      	str	r3, [r4, #8]
 800bbc2:	6063      	str	r3, [r4, #4]
 800bbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bbc8 <_calloc_r>:
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	4351      	muls	r1, r2
 800bbcc:	f7fc ff28 	bl	8008a20 <_malloc_r>
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	b320      	cbz	r0, 800bc1e <_calloc_r+0x56>
 800bbd4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800bbd8:	f022 0203 	bic.w	r2, r2, #3
 800bbdc:	3a04      	subs	r2, #4
 800bbde:	2a24      	cmp	r2, #36	; 0x24
 800bbe0:	d81a      	bhi.n	800bc18 <_calloc_r+0x50>
 800bbe2:	2a13      	cmp	r2, #19
 800bbe4:	d912      	bls.n	800bc0c <_calloc_r+0x44>
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2a1b      	cmp	r2, #27
 800bbea:	6001      	str	r1, [r0, #0]
 800bbec:	6041      	str	r1, [r0, #4]
 800bbee:	d802      	bhi.n	800bbf6 <_calloc_r+0x2e>
 800bbf0:	f100 0308 	add.w	r3, r0, #8
 800bbf4:	e00b      	b.n	800bc0e <_calloc_r+0x46>
 800bbf6:	2a24      	cmp	r2, #36	; 0x24
 800bbf8:	6081      	str	r1, [r0, #8]
 800bbfa:	60c1      	str	r1, [r0, #12]
 800bbfc:	bf11      	iteee	ne
 800bbfe:	f100 0310 	addne.w	r3, r0, #16
 800bc02:	6101      	streq	r1, [r0, #16]
 800bc04:	f100 0318 	addeq.w	r3, r0, #24
 800bc08:	6141      	streq	r1, [r0, #20]
 800bc0a:	e000      	b.n	800bc0e <_calloc_r+0x46>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2200      	movs	r2, #0
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	605a      	str	r2, [r3, #4]
 800bc14:	609a      	str	r2, [r3, #8]
 800bc16:	e002      	b.n	800bc1e <_calloc_r+0x56>
 800bc18:	2100      	movs	r1, #0
 800bc1a:	f7fd f966 	bl	8008eea <memset>
 800bc1e:	4620      	mov	r0, r4
 800bc20:	bd10      	pop	{r4, pc}
	...

0800bc24 <_close_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4c06      	ldr	r4, [pc, #24]	; (800bc40 <_close_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	f001 f82e 	bl	800cc90 <_close>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_close_r+0x1a>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_close_r+0x1a>
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20001284 	.word	0x20001284

0800bc44 <_fclose_r>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	4605      	mov	r5, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	b909      	cbnz	r1, 800bc50 <_fclose_r+0xc>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	b118      	cbz	r0, 800bc5a <_fclose_r+0x16>
 800bc52:	6983      	ldr	r3, [r0, #24]
 800bc54:	b90b      	cbnz	r3, 800bc5a <_fclose_r+0x16>
 800bc56:	f7fc fc37 	bl	80084c8 <__sinit>
 800bc5a:	4b20      	ldr	r3, [pc, #128]	; (800bcdc <_fclose_r+0x98>)
 800bc5c:	429c      	cmp	r4, r3
 800bc5e:	d101      	bne.n	800bc64 <_fclose_r+0x20>
 800bc60:	686c      	ldr	r4, [r5, #4]
 800bc62:	e008      	b.n	800bc76 <_fclose_r+0x32>
 800bc64:	4b1e      	ldr	r3, [pc, #120]	; (800bce0 <_fclose_r+0x9c>)
 800bc66:	429c      	cmp	r4, r3
 800bc68:	d101      	bne.n	800bc6e <_fclose_r+0x2a>
 800bc6a:	68ac      	ldr	r4, [r5, #8]
 800bc6c:	e003      	b.n	800bc76 <_fclose_r+0x32>
 800bc6e:	4b1d      	ldr	r3, [pc, #116]	; (800bce4 <_fclose_r+0xa0>)
 800bc70:	429c      	cmp	r4, r3
 800bc72:	bf08      	it	eq
 800bc74:	68ec      	ldreq	r4, [r5, #12]
 800bc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0e6      	beq.n	800bc4c <_fclose_r+0x8>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	f7fc fb15 	bl	80082b0 <__sflush_r>
 800bc86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc88:	4606      	mov	r6, r0
 800bc8a:	b133      	cbz	r3, 800bc9a <_fclose_r+0x56>
 800bc8c:	6a21      	ldr	r1, [r4, #32]
 800bc8e:	4628      	mov	r0, r5
 800bc90:	4798      	blx	r3
 800bc92:	2800      	cmp	r0, #0
 800bc94:	bfb8      	it	lt
 800bc96:	f04f 36ff 	movlt.w	r6, #4294967295
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	061b      	lsls	r3, r3, #24
 800bc9e:	d503      	bpl.n	800bca8 <_fclose_r+0x64>
 800bca0:	6921      	ldr	r1, [r4, #16]
 800bca2:	4628      	mov	r0, r5
 800bca4:	f7fc fd38 	bl	8008718 <_free_r>
 800bca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcaa:	b141      	cbz	r1, 800bcbe <_fclose_r+0x7a>
 800bcac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb0:	4299      	cmp	r1, r3
 800bcb2:	d002      	beq.n	800bcba <_fclose_r+0x76>
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7fc fd2f 	bl	8008718 <_free_r>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	6363      	str	r3, [r4, #52]	; 0x34
 800bcbe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bcc0:	b121      	cbz	r1, 800bccc <_fclose_r+0x88>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f7fc fd28 	bl	8008718 <_free_r>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	64a3      	str	r3, [r4, #72]	; 0x48
 800bccc:	f7fc fc6c 	bl	80085a8 <__sfp_lock_acquire>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	81a3      	strh	r3, [r4, #12]
 800bcd4:	f7fc fc69 	bl	80085aa <__sfp_lock_release>
 800bcd8:	4630      	mov	r0, r6
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	0800cf30 	.word	0x0800cf30
 800bce0:	0800cf50 	.word	0x0800cf50
 800bce4:	0800cf70 	.word	0x0800cf70

0800bce8 <__fputwc>:
 800bce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bcec:	4680      	mov	r8, r0
 800bcee:	460e      	mov	r6, r1
 800bcf0:	4614      	mov	r4, r2
 800bcf2:	f7fc fe1b 	bl	800892c <__locale_mb_cur_max>
 800bcf6:	2801      	cmp	r0, #1
 800bcf8:	d106      	bne.n	800bd08 <__fputwc+0x20>
 800bcfa:	1e73      	subs	r3, r6, #1
 800bcfc:	2bfe      	cmp	r3, #254	; 0xfe
 800bcfe:	d803      	bhi.n	800bd08 <__fputwc+0x20>
 800bd00:	f88d 6004 	strb.w	r6, [sp, #4]
 800bd04:	4605      	mov	r5, r0
 800bd06:	e00e      	b.n	800bd26 <__fputwc+0x3e>
 800bd08:	4632      	mov	r2, r6
 800bd0a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800bd0e:	a901      	add	r1, sp, #4
 800bd10:	4640      	mov	r0, r8
 800bd12:	f000 ff8b 	bl	800cc2c <_wcrtomb_r>
 800bd16:	1c42      	adds	r2, r0, #1
 800bd18:	4605      	mov	r5, r0
 800bd1a:	d104      	bne.n	800bd26 <__fputwc+0x3e>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	e01c      	b.n	800bd60 <__fputwc+0x78>
 800bd26:	2700      	movs	r7, #0
 800bd28:	42af      	cmp	r7, r5
 800bd2a:	d018      	beq.n	800bd5e <__fputwc+0x76>
 800bd2c:	ab01      	add	r3, sp, #4
 800bd2e:	5cf9      	ldrb	r1, [r7, r3]
 800bd30:	68a3      	ldr	r3, [r4, #8]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	60a3      	str	r3, [r4, #8]
 800bd38:	da04      	bge.n	800bd44 <__fputwc+0x5c>
 800bd3a:	69a2      	ldr	r2, [r4, #24]
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	db06      	blt.n	800bd4e <__fputwc+0x66>
 800bd40:	290a      	cmp	r1, #10
 800bd42:	d004      	beq.n	800bd4e <__fputwc+0x66>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	6022      	str	r2, [r4, #0]
 800bd4a:	7019      	strb	r1, [r3, #0]
 800bd4c:	e005      	b.n	800bd5a <__fputwc+0x72>
 800bd4e:	4622      	mov	r2, r4
 800bd50:	4640      	mov	r0, r8
 800bd52:	f000 ff0d 	bl	800cb70 <__swbuf_r>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d002      	beq.n	800bd60 <__fputwc+0x78>
 800bd5a:	3701      	adds	r7, #1
 800bd5c:	e7e4      	b.n	800bd28 <__fputwc+0x40>
 800bd5e:	4630      	mov	r0, r6
 800bd60:	b002      	add	sp, #8
 800bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bd66 <_fputwc_r>:
 800bd66:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800bd6a:	b410      	push	{r4}
 800bd6c:	049c      	lsls	r4, r3, #18
 800bd6e:	d406      	bmi.n	800bd7e <_fputwc_r+0x18>
 800bd70:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800bd72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bd76:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800bd7a:	8193      	strh	r3, [r2, #12]
 800bd7c:	6654      	str	r4, [r2, #100]	; 0x64
 800bd7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd82:	f7ff bfb1 	b.w	800bce8 <__fputwc>
	...

0800bd88 <_fstat_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	4c07      	ldr	r4, [pc, #28]	; (800bda8 <_fstat_r+0x20>)
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4605      	mov	r5, r0
 800bd90:	4608      	mov	r0, r1
 800bd92:	4611      	mov	r1, r2
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	f000 ff83 	bl	800cca0 <_fstat>
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	d102      	bne.n	800bda4 <_fstat_r+0x1c>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	b103      	cbz	r3, 800bda4 <_fstat_r+0x1c>
 800bda2:	602b      	str	r3, [r5, #0]
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
 800bda6:	bf00      	nop
 800bda8:	20001284 	.word	0x20001284

0800bdac <__sfvwrite_r>:
 800bdac:	6893      	ldr	r3, [r2, #8]
 800bdae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	4690      	mov	r8, r2
 800bdb8:	b90b      	cbnz	r3, 800bdbe <__sfvwrite_r+0x12>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e13b      	b.n	800c036 <__sfvwrite_r+0x28a>
 800bdbe:	898b      	ldrh	r3, [r1, #12]
 800bdc0:	0718      	lsls	r0, r3, #28
 800bdc2:	d50f      	bpl.n	800bde4 <__sfvwrite_r+0x38>
 800bdc4:	690b      	ldr	r3, [r1, #16]
 800bdc6:	b16b      	cbz	r3, 800bde4 <__sfvwrite_r+0x38>
 800bdc8:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 800bdcc:	f8d8 b000 	ldr.w	fp, [r8]
 800bdd0:	f009 0502 	and.w	r5, r9, #2
 800bdd4:	b2ad      	uxth	r5, r5
 800bdd6:	b355      	cbz	r5, 800be2e <__sfvwrite_r+0x82>
 800bdd8:	f04f 0900 	mov.w	r9, #0
 800bddc:	464f      	mov	r7, r9
 800bdde:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800c03c <__sfvwrite_r+0x290>
 800bde2:	e01b      	b.n	800be1c <__sfvwrite_r+0x70>
 800bde4:	4621      	mov	r1, r4
 800bde6:	4630      	mov	r0, r6
 800bde8:	f7fb fbc2 	bl	8007570 <__swsetup_r>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d0eb      	beq.n	800bdc8 <__sfvwrite_r+0x1c>
 800bdf0:	e11f      	b.n	800c032 <__sfvwrite_r+0x286>
 800bdf2:	4557      	cmp	r7, sl
 800bdf4:	463b      	mov	r3, r7
 800bdf6:	464a      	mov	r2, r9
 800bdf8:	bf28      	it	cs
 800bdfa:	4653      	movcs	r3, sl
 800bdfc:	6a21      	ldr	r1, [r4, #32]
 800bdfe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800be00:	4630      	mov	r0, r6
 800be02:	47a8      	blx	r5
 800be04:	2800      	cmp	r0, #0
 800be06:	f340 8110 	ble.w	800c02a <__sfvwrite_r+0x27e>
 800be0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be0e:	4481      	add	r9, r0
 800be10:	1a3f      	subs	r7, r7, r0
 800be12:	1a18      	subs	r0, r3, r0
 800be14:	f8c8 0008 	str.w	r0, [r8, #8]
 800be18:	2800      	cmp	r0, #0
 800be1a:	d0ce      	beq.n	800bdba <__sfvwrite_r+0xe>
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	d1e8      	bne.n	800bdf2 <__sfvwrite_r+0x46>
 800be20:	f8db 9000 	ldr.w	r9, [fp]
 800be24:	f8db 7004 	ldr.w	r7, [fp, #4]
 800be28:	f10b 0b08 	add.w	fp, fp, #8
 800be2c:	e7f6      	b.n	800be1c <__sfvwrite_r+0x70>
 800be2e:	f019 0901 	ands.w	r9, r9, #1
 800be32:	d003      	beq.n	800be3c <__sfvwrite_r+0x90>
 800be34:	9500      	str	r5, [sp, #0]
 800be36:	46a9      	mov	r9, r5
 800be38:	46aa      	mov	sl, r5
 800be3a:	e0bd      	b.n	800bfb8 <__sfvwrite_r+0x20c>
 800be3c:	464f      	mov	r7, r9
 800be3e:	b937      	cbnz	r7, 800be4e <__sfvwrite_r+0xa2>
 800be40:	f8db 9000 	ldr.w	r9, [fp]
 800be44:	f8db 7004 	ldr.w	r7, [fp, #4]
 800be48:	f10b 0b08 	add.w	fp, fp, #8
 800be4c:	e7f7      	b.n	800be3e <__sfvwrite_r+0x92>
 800be4e:	89a2      	ldrh	r2, [r4, #12]
 800be50:	68a5      	ldr	r5, [r4, #8]
 800be52:	0591      	lsls	r1, r2, #22
 800be54:	d552      	bpl.n	800befc <__sfvwrite_r+0x150>
 800be56:	42af      	cmp	r7, r5
 800be58:	d342      	bcc.n	800bee0 <__sfvwrite_r+0x134>
 800be5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be5e:	d03d      	beq.n	800bedc <__sfvwrite_r+0x130>
 800be60:	6921      	ldr	r1, [r4, #16]
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	1a5b      	subs	r3, r3, r1
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	6963      	ldr	r3, [r4, #20]
 800be6a:	2002      	movs	r0, #2
 800be6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800be70:	fb93 faf0 	sdiv	sl, r3, r0
 800be74:	9b00      	ldr	r3, [sp, #0]
 800be76:	3301      	adds	r3, #1
 800be78:	443b      	add	r3, r7
 800be7a:	459a      	cmp	sl, r3
 800be7c:	bf38      	it	cc
 800be7e:	469a      	movcc	sl, r3
 800be80:	0553      	lsls	r3, r2, #21
 800be82:	d510      	bpl.n	800bea6 <__sfvwrite_r+0xfa>
 800be84:	4651      	mov	r1, sl
 800be86:	4630      	mov	r0, r6
 800be88:	f7fc fdca 	bl	8008a20 <_malloc_r>
 800be8c:	4605      	mov	r5, r0
 800be8e:	b1c0      	cbz	r0, 800bec2 <__sfvwrite_r+0x116>
 800be90:	9a00      	ldr	r2, [sp, #0]
 800be92:	6921      	ldr	r1, [r4, #16]
 800be94:	f7fd f81e 	bl	8008ed4 <memcpy>
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea2:	81a3      	strh	r3, [r4, #12]
 800bea4:	e010      	b.n	800bec8 <__sfvwrite_r+0x11c>
 800bea6:	4652      	mov	r2, sl
 800bea8:	4630      	mov	r0, r6
 800beaa:	f000 fc25 	bl	800c6f8 <_realloc_r>
 800beae:	4605      	mov	r5, r0
 800beb0:	b950      	cbnz	r0, 800bec8 <__sfvwrite_r+0x11c>
 800beb2:	6921      	ldr	r1, [r4, #16]
 800beb4:	4630      	mov	r0, r6
 800beb6:	f7fc fc2f 	bl	8008718 <_free_r>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	230c      	movs	r3, #12
 800bec4:	6033      	str	r3, [r6, #0]
 800bec6:	e0b0      	b.n	800c02a <__sfvwrite_r+0x27e>
 800bec8:	9b00      	ldr	r3, [sp, #0]
 800beca:	6125      	str	r5, [r4, #16]
 800becc:	441d      	add	r5, r3
 800bece:	ebc3 030a 	rsb	r3, r3, sl
 800bed2:	6025      	str	r5, [r4, #0]
 800bed4:	f8c4 a014 	str.w	sl, [r4, #20]
 800bed8:	463d      	mov	r5, r7
 800beda:	60a3      	str	r3, [r4, #8]
 800bedc:	42af      	cmp	r7, r5
 800bede:	d200      	bcs.n	800bee2 <__sfvwrite_r+0x136>
 800bee0:	463d      	mov	r5, r7
 800bee2:	462a      	mov	r2, r5
 800bee4:	4649      	mov	r1, r9
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	f000 fbea 	bl	800c6c0 <memmove>
 800beec:	68a3      	ldr	r3, [r4, #8]
 800beee:	1b5b      	subs	r3, r3, r5
 800bef0:	60a3      	str	r3, [r4, #8]
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	441d      	add	r5, r3
 800bef6:	6025      	str	r5, [r4, #0]
 800bef8:	463d      	mov	r5, r7
 800befa:	e029      	b.n	800bf50 <__sfvwrite_r+0x1a4>
 800befc:	6820      	ldr	r0, [r4, #0]
 800befe:	6923      	ldr	r3, [r4, #16]
 800bf00:	4298      	cmp	r0, r3
 800bf02:	d802      	bhi.n	800bf0a <__sfvwrite_r+0x15e>
 800bf04:	6962      	ldr	r2, [r4, #20]
 800bf06:	4297      	cmp	r7, r2
 800bf08:	d213      	bcs.n	800bf32 <__sfvwrite_r+0x186>
 800bf0a:	42bd      	cmp	r5, r7
 800bf0c:	bf28      	it	cs
 800bf0e:	463d      	movcs	r5, r7
 800bf10:	462a      	mov	r2, r5
 800bf12:	4649      	mov	r1, r9
 800bf14:	f000 fbd4 	bl	800c6c0 <memmove>
 800bf18:	68a3      	ldr	r3, [r4, #8]
 800bf1a:	6822      	ldr	r2, [r4, #0]
 800bf1c:	1b5b      	subs	r3, r3, r5
 800bf1e:	442a      	add	r2, r5
 800bf20:	60a3      	str	r3, [r4, #8]
 800bf22:	6022      	str	r2, [r4, #0]
 800bf24:	b9a3      	cbnz	r3, 800bf50 <__sfvwrite_r+0x1a4>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f7fc fa51 	bl	80083d0 <_fflush_r>
 800bf2e:	b178      	cbz	r0, 800bf50 <__sfvwrite_r+0x1a4>
 800bf30:	e07b      	b.n	800c02a <__sfvwrite_r+0x27e>
 800bf32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bf36:	42bb      	cmp	r3, r7
 800bf38:	bf28      	it	cs
 800bf3a:	463b      	movcs	r3, r7
 800bf3c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bf3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf42:	6a21      	ldr	r1, [r4, #32]
 800bf44:	4353      	muls	r3, r2
 800bf46:	4630      	mov	r0, r6
 800bf48:	464a      	mov	r2, r9
 800bf4a:	47a8      	blx	r5
 800bf4c:	1e05      	subs	r5, r0, #0
 800bf4e:	dd6c      	ble.n	800c02a <__sfvwrite_r+0x27e>
 800bf50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf54:	44a9      	add	r9, r5
 800bf56:	1b7f      	subs	r7, r7, r5
 800bf58:	1b5d      	subs	r5, r3, r5
 800bf5a:	f8c8 5008 	str.w	r5, [r8, #8]
 800bf5e:	2d00      	cmp	r5, #0
 800bf60:	f47f af6d 	bne.w	800be3e <__sfvwrite_r+0x92>
 800bf64:	e729      	b.n	800bdba <__sfvwrite_r+0xe>
 800bf66:	9b00      	ldr	r3, [sp, #0]
 800bf68:	b383      	cbz	r3, 800bfcc <__sfvwrite_r+0x220>
 800bf6a:	6820      	ldr	r0, [r4, #0]
 800bf6c:	6921      	ldr	r1, [r4, #16]
 800bf6e:	6962      	ldr	r2, [r4, #20]
 800bf70:	4555      	cmp	r5, sl
 800bf72:	462b      	mov	r3, r5
 800bf74:	bf28      	it	cs
 800bf76:	4653      	movcs	r3, sl
 800bf78:	4288      	cmp	r0, r1
 800bf7a:	d936      	bls.n	800bfea <__sfvwrite_r+0x23e>
 800bf7c:	68a7      	ldr	r7, [r4, #8]
 800bf7e:	4417      	add	r7, r2
 800bf80:	42bb      	cmp	r3, r7
 800bf82:	dd32      	ble.n	800bfea <__sfvwrite_r+0x23e>
 800bf84:	4649      	mov	r1, r9
 800bf86:	463a      	mov	r2, r7
 800bf88:	f000 fb9a 	bl	800c6c0 <memmove>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	443b      	add	r3, r7
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	4621      	mov	r1, r4
 800bf94:	4630      	mov	r0, r6
 800bf96:	f7fc fa1b 	bl	80083d0 <_fflush_r>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d145      	bne.n	800c02a <__sfvwrite_r+0x27e>
 800bf9e:	1bed      	subs	r5, r5, r7
 800bfa0:	d03c      	beq.n	800c01c <__sfvwrite_r+0x270>
 800bfa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfa6:	44b9      	add	r9, r7
 800bfa8:	ebc7 0a0a 	rsb	sl, r7, sl
 800bfac:	1bdf      	subs	r7, r3, r7
 800bfae:	f8c8 7008 	str.w	r7, [r8, #8]
 800bfb2:	2f00      	cmp	r7, #0
 800bfb4:	f43f af01 	beq.w	800bdba <__sfvwrite_r+0xe>
 800bfb8:	f1ba 0f00 	cmp.w	sl, #0
 800bfbc:	d1d3      	bne.n	800bf66 <__sfvwrite_r+0x1ba>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	e89b 0600 	ldmia.w	fp, {r9, sl}
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	f10b 0b08 	add.w	fp, fp, #8
 800bfca:	e7f5      	b.n	800bfb8 <__sfvwrite_r+0x20c>
 800bfcc:	4652      	mov	r2, sl
 800bfce:	210a      	movs	r1, #10
 800bfd0:	4648      	mov	r0, r9
 800bfd2:	f7f4 f8fd 	bl	80001d0 <memchr>
 800bfd6:	b118      	cbz	r0, 800bfe0 <__sfvwrite_r+0x234>
 800bfd8:	3001      	adds	r0, #1
 800bfda:	ebc9 0500 	rsb	r5, r9, r0
 800bfde:	e001      	b.n	800bfe4 <__sfvwrite_r+0x238>
 800bfe0:	f10a 0501 	add.w	r5, sl, #1
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	9300      	str	r3, [sp, #0]
 800bfe8:	e7bf      	b.n	800bf6a <__sfvwrite_r+0x1be>
 800bfea:	4293      	cmp	r3, r2
 800bfec:	db08      	blt.n	800c000 <__sfvwrite_r+0x254>
 800bfee:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800bff0:	6a21      	ldr	r1, [r4, #32]
 800bff2:	4613      	mov	r3, r2
 800bff4:	4630      	mov	r0, r6
 800bff6:	464a      	mov	r2, r9
 800bff8:	47b8      	blx	r7
 800bffa:	1e07      	subs	r7, r0, #0
 800bffc:	dccf      	bgt.n	800bf9e <__sfvwrite_r+0x1f2>
 800bffe:	e014      	b.n	800c02a <__sfvwrite_r+0x27e>
 800c000:	461a      	mov	r2, r3
 800c002:	4649      	mov	r1, r9
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	f000 fb5b 	bl	800c6c0 <memmove>
 800c00a:	9b01      	ldr	r3, [sp, #4]
 800c00c:	68a2      	ldr	r2, [r4, #8]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	60a2      	str	r2, [r4, #8]
 800c012:	6822      	ldr	r2, [r4, #0]
 800c014:	441a      	add	r2, r3
 800c016:	6022      	str	r2, [r4, #0]
 800c018:	461f      	mov	r7, r3
 800c01a:	e7c0      	b.n	800bf9e <__sfvwrite_r+0x1f2>
 800c01c:	4621      	mov	r1, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	f7fc f9d6 	bl	80083d0 <_fflush_r>
 800c024:	b908      	cbnz	r0, 800c02a <__sfvwrite_r+0x27e>
 800c026:	9500      	str	r5, [sp, #0]
 800c028:	e7bb      	b.n	800bfa2 <__sfvwrite_r+0x1f6>
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	f04f 30ff 	mov.w	r0, #4294967295
 800c036:	b003      	add	sp, #12
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	7ffffc00 	.word	0x7ffffc00

0800c040 <rshift>:
 800c040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c042:	6906      	ldr	r6, [r0, #16]
 800c044:	114b      	asrs	r3, r1, #5
 800c046:	42b3      	cmp	r3, r6
 800c048:	f100 0514 	add.w	r5, r0, #20
 800c04c:	da27      	bge.n	800c09e <rshift+0x5e>
 800c04e:	f011 011f 	ands.w	r1, r1, #31
 800c052:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800c056:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800c05a:	d101      	bne.n	800c060 <rshift+0x20>
 800c05c:	4629      	mov	r1, r5
 800c05e:	e016      	b.n	800c08e <rshift+0x4e>
 800c060:	1d14      	adds	r4, r2, #4
 800c062:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800c066:	f1c1 0e20 	rsb	lr, r1, #32
 800c06a:	40ca      	lsrs	r2, r1
 800c06c:	462b      	mov	r3, r5
 800c06e:	42b4      	cmp	r4, r6
 800c070:	d209      	bcs.n	800c086 <rshift+0x46>
 800c072:	6827      	ldr	r7, [r4, #0]
 800c074:	fa07 f70e 	lsl.w	r7, r7, lr
 800c078:	433a      	orrs	r2, r7
 800c07a:	f843 2b04 	str.w	r2, [r3], #4
 800c07e:	f854 2b04 	ldr.w	r2, [r4], #4
 800c082:	40ca      	lsrs	r2, r1
 800c084:	e7f3      	b.n	800c06e <rshift+0x2e>
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	b152      	cbz	r2, 800c0a0 <rshift+0x60>
 800c08a:	3304      	adds	r3, #4
 800c08c:	e008      	b.n	800c0a0 <rshift+0x60>
 800c08e:	42b2      	cmp	r2, r6
 800c090:	460b      	mov	r3, r1
 800c092:	d205      	bcs.n	800c0a0 <rshift+0x60>
 800c094:	f852 3b04 	ldr.w	r3, [r2], #4
 800c098:	f841 3b04 	str.w	r3, [r1], #4
 800c09c:	e7f7      	b.n	800c08e <rshift+0x4e>
 800c09e:	462b      	mov	r3, r5
 800c0a0:	1b5b      	subs	r3, r3, r5
 800c0a2:	109b      	asrs	r3, r3, #2
 800c0a4:	6103      	str	r3, [r0, #16]
 800c0a6:	b903      	cbnz	r3, 800c0aa <rshift+0x6a>
 800c0a8:	6143      	str	r3, [r0, #20]
 800c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c0ac <__hexdig_fun>:
 800c0ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c0b0:	2b09      	cmp	r3, #9
 800c0b2:	d801      	bhi.n	800c0b8 <__hexdig_fun+0xc>
 800c0b4:	3820      	subs	r0, #32
 800c0b6:	e00a      	b.n	800c0ce <__hexdig_fun+0x22>
 800c0b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c0bc:	2b05      	cmp	r3, #5
 800c0be:	d801      	bhi.n	800c0c4 <__hexdig_fun+0x18>
 800c0c0:	3847      	subs	r0, #71	; 0x47
 800c0c2:	e004      	b.n	800c0ce <__hexdig_fun+0x22>
 800c0c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c0c8:	2b05      	cmp	r3, #5
 800c0ca:	d802      	bhi.n	800c0d2 <__hexdig_fun+0x26>
 800c0cc:	3827      	subs	r0, #39	; 0x27
 800c0ce:	b2c0      	uxtb	r0, r0
 800c0d0:	4770      	bx	lr
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	4770      	bx	lr

0800c0d6 <__gethex>:
 800c0d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	b08b      	sub	sp, #44	; 0x2c
 800c0dc:	468a      	mov	sl, r1
 800c0de:	4690      	mov	r8, r2
 800c0e0:	9306      	str	r3, [sp, #24]
 800c0e2:	9002      	str	r0, [sp, #8]
 800c0e4:	f7fc fc28 	bl	8008938 <_localeconv_r>
 800c0e8:	6803      	ldr	r3, [r0, #0]
 800c0ea:	9303      	str	r3, [sp, #12]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7f4 f8bf 	bl	8000270 <strlen>
 800c0f2:	9b03      	ldr	r3, [sp, #12]
 800c0f4:	9001      	str	r0, [sp, #4]
 800c0f6:	4403      	add	r3, r0
 800c0f8:	f04f 0b00 	mov.w	fp, #0
 800c0fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c100:	9307      	str	r3, [sp, #28]
 800c102:	f8da 3000 	ldr.w	r3, [sl]
 800c106:	3302      	adds	r3, #2
 800c108:	461f      	mov	r7, r3
 800c10a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c10e:	2830      	cmp	r0, #48	; 0x30
 800c110:	d102      	bne.n	800c118 <__gethex+0x42>
 800c112:	f10b 0b01 	add.w	fp, fp, #1
 800c116:	e7f7      	b.n	800c108 <__gethex+0x32>
 800c118:	f7ff ffc8 	bl	800c0ac <__hexdig_fun>
 800c11c:	4604      	mov	r4, r0
 800c11e:	b9e0      	cbnz	r0, 800c15a <__gethex+0x84>
 800c120:	9a01      	ldr	r2, [sp, #4]
 800c122:	9903      	ldr	r1, [sp, #12]
 800c124:	4638      	mov	r0, r7
 800c126:	f000 fc8f 	bl	800ca48 <strncmp>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d134      	bne.n	800c198 <__gethex+0xc2>
 800c12e:	9b01      	ldr	r3, [sp, #4]
 800c130:	5cf8      	ldrb	r0, [r7, r3]
 800c132:	18fe      	adds	r6, r7, r3
 800c134:	f7ff ffba 	bl	800c0ac <__hexdig_fun>
 800c138:	b380      	cbz	r0, 800c19c <__gethex+0xc6>
 800c13a:	4633      	mov	r3, r6
 800c13c:	7818      	ldrb	r0, [r3, #0]
 800c13e:	2830      	cmp	r0, #48	; 0x30
 800c140:	461f      	mov	r7, r3
 800c142:	f103 0301 	add.w	r3, r3, #1
 800c146:	d0f9      	beq.n	800c13c <__gethex+0x66>
 800c148:	f7ff ffb0 	bl	800c0ac <__hexdig_fun>
 800c14c:	fab0 f580 	clz	r5, r0
 800c150:	096d      	lsrs	r5, r5, #5
 800c152:	4634      	mov	r4, r6
 800c154:	f04f 0b01 	mov.w	fp, #1
 800c158:	e001      	b.n	800c15e <__gethex+0x88>
 800c15a:	2500      	movs	r5, #0
 800c15c:	462c      	mov	r4, r5
 800c15e:	463a      	mov	r2, r7
 800c160:	4616      	mov	r6, r2
 800c162:	3201      	adds	r2, #1
 800c164:	7830      	ldrb	r0, [r6, #0]
 800c166:	f7ff ffa1 	bl	800c0ac <__hexdig_fun>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d1f8      	bne.n	800c160 <__gethex+0x8a>
 800c16e:	9a01      	ldr	r2, [sp, #4]
 800c170:	9903      	ldr	r1, [sp, #12]
 800c172:	4630      	mov	r0, r6
 800c174:	f000 fc68 	bl	800ca48 <strncmp>
 800c178:	b950      	cbnz	r0, 800c190 <__gethex+0xba>
 800c17a:	b954      	cbnz	r4, 800c192 <__gethex+0xbc>
 800c17c:	9b01      	ldr	r3, [sp, #4]
 800c17e:	18f4      	adds	r4, r6, r3
 800c180:	4622      	mov	r2, r4
 800c182:	4616      	mov	r6, r2
 800c184:	3201      	adds	r2, #1
 800c186:	7830      	ldrb	r0, [r6, #0]
 800c188:	f7ff ff90 	bl	800c0ac <__hexdig_fun>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d1f8      	bne.n	800c182 <__gethex+0xac>
 800c190:	b134      	cbz	r4, 800c1a0 <__gethex+0xca>
 800c192:	1ba4      	subs	r4, r4, r6
 800c194:	00a4      	lsls	r4, r4, #2
 800c196:	e003      	b.n	800c1a0 <__gethex+0xca>
 800c198:	463e      	mov	r6, r7
 800c19a:	e000      	b.n	800c19e <__gethex+0xc8>
 800c19c:	4604      	mov	r4, r0
 800c19e:	2501      	movs	r5, #1
 800c1a0:	7833      	ldrb	r3, [r6, #0]
 800c1a2:	2b50      	cmp	r3, #80	; 0x50
 800c1a4:	d001      	beq.n	800c1aa <__gethex+0xd4>
 800c1a6:	2b70      	cmp	r3, #112	; 0x70
 800c1a8:	d12a      	bne.n	800c200 <__gethex+0x12a>
 800c1aa:	7873      	ldrb	r3, [r6, #1]
 800c1ac:	2b2b      	cmp	r3, #43	; 0x2b
 800c1ae:	d008      	beq.n	800c1c2 <__gethex+0xec>
 800c1b0:	2b2d      	cmp	r3, #45	; 0x2d
 800c1b2:	d003      	beq.n	800c1bc <__gethex+0xe6>
 800c1b4:	1c71      	adds	r1, r6, #1
 800c1b6:	f04f 0900 	mov.w	r9, #0
 800c1ba:	e005      	b.n	800c1c8 <__gethex+0xf2>
 800c1bc:	f04f 0901 	mov.w	r9, #1
 800c1c0:	e001      	b.n	800c1c6 <__gethex+0xf0>
 800c1c2:	f04f 0900 	mov.w	r9, #0
 800c1c6:	1cb1      	adds	r1, r6, #2
 800c1c8:	7808      	ldrb	r0, [r1, #0]
 800c1ca:	f7ff ff6f 	bl	800c0ac <__hexdig_fun>
 800c1ce:	1e43      	subs	r3, r0, #1
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b18      	cmp	r3, #24
 800c1d4:	d814      	bhi.n	800c200 <__gethex+0x12a>
 800c1d6:	f1a0 0210 	sub.w	r2, r0, #16
 800c1da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1de:	f7ff ff65 	bl	800c0ac <__hexdig_fun>
 800c1e2:	1e43      	subs	r3, r0, #1
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b18      	cmp	r3, #24
 800c1e8:	d804      	bhi.n	800c1f4 <__gethex+0x11e>
 800c1ea:	230a      	movs	r3, #10
 800c1ec:	fb03 0202 	mla	r2, r3, r2, r0
 800c1f0:	3a10      	subs	r2, #16
 800c1f2:	e7f2      	b.n	800c1da <__gethex+0x104>
 800c1f4:	f1b9 0f00 	cmp.w	r9, #0
 800c1f8:	d000      	beq.n	800c1fc <__gethex+0x126>
 800c1fa:	4252      	negs	r2, r2
 800c1fc:	4414      	add	r4, r2
 800c1fe:	e000      	b.n	800c202 <__gethex+0x12c>
 800c200:	4631      	mov	r1, r6
 800c202:	f8ca 1000 	str.w	r1, [sl]
 800c206:	b12d      	cbz	r5, 800c214 <__gethex+0x13e>
 800c208:	f1bb 0f00 	cmp.w	fp, #0
 800c20c:	bf14      	ite	ne
 800c20e:	2000      	movne	r0, #0
 800c210:	2006      	moveq	r0, #6
 800c212:	e17c      	b.n	800c50e <__gethex+0x438>
 800c214:	1bf3      	subs	r3, r6, r7
 800c216:	3b01      	subs	r3, #1
 800c218:	4629      	mov	r1, r5
 800c21a:	2b07      	cmp	r3, #7
 800c21c:	dd02      	ble.n	800c224 <__gethex+0x14e>
 800c21e:	3101      	adds	r1, #1
 800c220:	105b      	asrs	r3, r3, #1
 800c222:	e7fa      	b.n	800c21a <__gethex+0x144>
 800c224:	9802      	ldr	r0, [sp, #8]
 800c226:	f7fc fe6a 	bl	8008efe <_Balloc>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	f100 0a14 	add.w	sl, r0, #20
 800c230:	f04f 0900 	mov.w	r9, #0
 800c234:	f1c3 0301 	rsb	r3, r3, #1
 800c238:	4605      	mov	r5, r0
 800c23a:	f8cd a010 	str.w	sl, [sp, #16]
 800c23e:	46cb      	mov	fp, r9
 800c240:	9308      	str	r3, [sp, #32]
 800c242:	42b7      	cmp	r7, r6
 800c244:	d22f      	bcs.n	800c2a6 <__gethex+0x1d0>
 800c246:	1e73      	subs	r3, r6, #1
 800c248:	9305      	str	r3, [sp, #20]
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c250:	4293      	cmp	r3, r2
 800c252:	d00b      	beq.n	800c26c <__gethex+0x196>
 800c254:	f1bb 0f20 	cmp.w	fp, #32
 800c258:	d116      	bne.n	800c288 <__gethex+0x1b2>
 800c25a:	9b04      	ldr	r3, [sp, #16]
 800c25c:	f8c3 9000 	str.w	r9, [r3]
 800c260:	3304      	adds	r3, #4
 800c262:	f04f 0900 	mov.w	r9, #0
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	46cb      	mov	fp, r9
 800c26a:	e00d      	b.n	800c288 <__gethex+0x1b2>
 800c26c:	9b05      	ldr	r3, [sp, #20]
 800c26e:	9a08      	ldr	r2, [sp, #32]
 800c270:	4413      	add	r3, r2
 800c272:	429f      	cmp	r7, r3
 800c274:	d8ee      	bhi.n	800c254 <__gethex+0x17e>
 800c276:	4618      	mov	r0, r3
 800c278:	9a01      	ldr	r2, [sp, #4]
 800c27a:	9903      	ldr	r1, [sp, #12]
 800c27c:	9309      	str	r3, [sp, #36]	; 0x24
 800c27e:	f000 fbe3 	bl	800ca48 <strncmp>
 800c282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c284:	b168      	cbz	r0, 800c2a2 <__gethex+0x1cc>
 800c286:	e7e5      	b.n	800c254 <__gethex+0x17e>
 800c288:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c28c:	f7ff ff0e 	bl	800c0ac <__hexdig_fun>
 800c290:	f000 000f 	and.w	r0, r0, #15
 800c294:	fa00 f00b 	lsl.w	r0, r0, fp
 800c298:	9b05      	ldr	r3, [sp, #20]
 800c29a:	ea49 0900 	orr.w	r9, r9, r0
 800c29e:	f10b 0b04 	add.w	fp, fp, #4
 800c2a2:	461e      	mov	r6, r3
 800c2a4:	e7cd      	b.n	800c242 <__gethex+0x16c>
 800c2a6:	9804      	ldr	r0, [sp, #16]
 800c2a8:	f840 9b04 	str.w	r9, [r0], #4
 800c2ac:	ebca 0000 	rsb	r0, sl, r0
 800c2b0:	1080      	asrs	r0, r0, #2
 800c2b2:	6128      	str	r0, [r5, #16]
 800c2b4:	0147      	lsls	r7, r0, #5
 800c2b6:	4648      	mov	r0, r9
 800c2b8:	f7fc fee6 	bl	8009088 <__hi0bits>
 800c2bc:	f8d8 6000 	ldr.w	r6, [r8]
 800c2c0:	1a38      	subs	r0, r7, r0
 800c2c2:	42b0      	cmp	r0, r6
 800c2c4:	dd26      	ble.n	800c314 <__gethex+0x23e>
 800c2c6:	1b87      	subs	r7, r0, r6
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f7fd f9e5 	bl	800969a <__any_on>
 800c2d0:	b1c8      	cbz	r0, 800c306 <__gethex+0x230>
 800c2d2:	1e7b      	subs	r3, r7, #1
 800c2d4:	1159      	asrs	r1, r3, #5
 800c2d6:	f003 021f 	and.w	r2, r3, #31
 800c2da:	f04f 0901 	mov.w	r9, #1
 800c2de:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c2e2:	fa09 f202 	lsl.w	r2, r9, r2
 800c2e6:	420a      	tst	r2, r1
 800c2e8:	d00e      	beq.n	800c308 <__gethex+0x232>
 800c2ea:	454b      	cmp	r3, r9
 800c2ec:	dc02      	bgt.n	800c2f4 <__gethex+0x21e>
 800c2ee:	f04f 0902 	mov.w	r9, #2
 800c2f2:	e009      	b.n	800c308 <__gethex+0x232>
 800c2f4:	1eb9      	subs	r1, r7, #2
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f7fd f9cf 	bl	800969a <__any_on>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d0f6      	beq.n	800c2ee <__gethex+0x218>
 800c300:	f04f 0903 	mov.w	r9, #3
 800c304:	e000      	b.n	800c308 <__gethex+0x232>
 800c306:	4681      	mov	r9, r0
 800c308:	4639      	mov	r1, r7
 800c30a:	4628      	mov	r0, r5
 800c30c:	f7ff fe98 	bl	800c040 <rshift>
 800c310:	443c      	add	r4, r7
 800c312:	e00c      	b.n	800c32e <__gethex+0x258>
 800c314:	da09      	bge.n	800c32a <__gethex+0x254>
 800c316:	1a37      	subs	r7, r6, r0
 800c318:	4629      	mov	r1, r5
 800c31a:	463a      	mov	r2, r7
 800c31c:	9802      	ldr	r0, [sp, #8]
 800c31e:	f7fc ffe9 	bl	80092f4 <__lshift>
 800c322:	1be4      	subs	r4, r4, r7
 800c324:	4605      	mov	r5, r0
 800c326:	f100 0a14 	add.w	sl, r0, #20
 800c32a:	f04f 0900 	mov.w	r9, #0
 800c32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c332:	429c      	cmp	r4, r3
 800c334:	dd08      	ble.n	800c348 <__gethex+0x272>
 800c336:	9802      	ldr	r0, [sp, #8]
 800c338:	4629      	mov	r1, r5
 800c33a:	f7fc fe15 	bl	8008f68 <_Bfree>
 800c33e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c340:	2300      	movs	r3, #0
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	20a3      	movs	r0, #163	; 0xa3
 800c346:	e0e2      	b.n	800c50e <__gethex+0x438>
 800c348:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c34c:	4284      	cmp	r4, r0
 800c34e:	da53      	bge.n	800c3f8 <__gethex+0x322>
 800c350:	1b04      	subs	r4, r0, r4
 800c352:	42a6      	cmp	r6, r4
 800c354:	dc2e      	bgt.n	800c3b4 <__gethex+0x2de>
 800c356:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d01a      	beq.n	800c394 <__gethex+0x2be>
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d01c      	beq.n	800c39c <__gethex+0x2c6>
 800c362:	2b01      	cmp	r3, #1
 800c364:	d11d      	bne.n	800c3a2 <__gethex+0x2cc>
 800c366:	42a6      	cmp	r6, r4
 800c368:	d11b      	bne.n	800c3a2 <__gethex+0x2cc>
 800c36a:	2e01      	cmp	r6, #1
 800c36c:	dc0b      	bgt.n	800c386 <__gethex+0x2b0>
 800c36e:	9a06      	ldr	r2, [sp, #24]
 800c370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	2301      	movs	r3, #1
 800c378:	612b      	str	r3, [r5, #16]
 800c37a:	f8ca 3000 	str.w	r3, [sl]
 800c37e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c380:	2062      	movs	r0, #98	; 0x62
 800c382:	601d      	str	r5, [r3, #0]
 800c384:	e0c3      	b.n	800c50e <__gethex+0x438>
 800c386:	1e71      	subs	r1, r6, #1
 800c388:	4628      	mov	r0, r5
 800c38a:	f7fd f986 	bl	800969a <__any_on>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d1ed      	bne.n	800c36e <__gethex+0x298>
 800c392:	e006      	b.n	800c3a2 <__gethex+0x2cc>
 800c394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0e9      	beq.n	800c36e <__gethex+0x298>
 800c39a:	e002      	b.n	800c3a2 <__gethex+0x2cc>
 800c39c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1e5      	bne.n	800c36e <__gethex+0x298>
 800c3a2:	9802      	ldr	r0, [sp, #8]
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	f7fc fddf 	bl	8008f68 <_Bfree>
 800c3aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	2050      	movs	r0, #80	; 0x50
 800c3b2:	e0ac      	b.n	800c50e <__gethex+0x438>
 800c3b4:	1e67      	subs	r7, r4, #1
 800c3b6:	f1b9 0f00 	cmp.w	r9, #0
 800c3ba:	d106      	bne.n	800c3ca <__gethex+0x2f4>
 800c3bc:	b13f      	cbz	r7, 800c3ce <__gethex+0x2f8>
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f7fd f96a 	bl	800969a <__any_on>
 800c3c6:	4681      	mov	r9, r0
 800c3c8:	e001      	b.n	800c3ce <__gethex+0x2f8>
 800c3ca:	f04f 0901 	mov.w	r9, #1
 800c3ce:	117a      	asrs	r2, r7, #5
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f007 071f 	and.w	r7, r7, #31
 800c3d6:	fa03 f707 	lsl.w	r7, r3, r7
 800c3da:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	421f      	tst	r7, r3
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	bf18      	it	ne
 800c3e6:	f049 0902 	orrne.w	r9, r9, #2
 800c3ea:	1b36      	subs	r6, r6, r4
 800c3ec:	f7ff fe28 	bl	800c040 <rshift>
 800c3f0:	2702      	movs	r7, #2
 800c3f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c3f6:	e000      	b.n	800c3fa <__gethex+0x324>
 800c3f8:	2701      	movs	r7, #1
 800c3fa:	f1b9 0f00 	cmp.w	r9, #0
 800c3fe:	f000 8081 	beq.w	800c504 <__gethex+0x42e>
 800c402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c406:	2b02      	cmp	r3, #2
 800c408:	d00e      	beq.n	800c428 <__gethex+0x352>
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d010      	beq.n	800c430 <__gethex+0x35a>
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d176      	bne.n	800c500 <__gethex+0x42a>
 800c412:	f019 0f02 	tst.w	r9, #2
 800c416:	d073      	beq.n	800c500 <__gethex+0x42a>
 800c418:	f8da 0000 	ldr.w	r0, [sl]
 800c41c:	ea49 0900 	orr.w	r9, r9, r0
 800c420:	f019 0f01 	tst.w	r9, #1
 800c424:	d107      	bne.n	800c436 <__gethex+0x360>
 800c426:	e06b      	b.n	800c500 <__gethex+0x42a>
 800c428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c42a:	f1c3 0301 	rsb	r3, r3, #1
 800c42e:	9315      	str	r3, [sp, #84]	; 0x54
 800c430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c432:	2b00      	cmp	r3, #0
 800c434:	d064      	beq.n	800c500 <__gethex+0x42a>
 800c436:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c43a:	f105 0314 	add.w	r3, r5, #20
 800c43e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 800c442:	eb03 0109 	add.w	r1, r3, r9
 800c446:	2000      	movs	r0, #0
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c44e:	d002      	beq.n	800c456 <__gethex+0x380>
 800c450:	3201      	adds	r2, #1
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	e020      	b.n	800c498 <__gethex+0x3c2>
 800c456:	f843 0b04 	str.w	r0, [r3], #4
 800c45a:	4299      	cmp	r1, r3
 800c45c:	d8f4      	bhi.n	800c448 <__gethex+0x372>
 800c45e:	68ab      	ldr	r3, [r5, #8]
 800c460:	459a      	cmp	sl, r3
 800c462:	db12      	blt.n	800c48a <__gethex+0x3b4>
 800c464:	6869      	ldr	r1, [r5, #4]
 800c466:	9802      	ldr	r0, [sp, #8]
 800c468:	3101      	adds	r1, #1
 800c46a:	f7fc fd48 	bl	8008efe <_Balloc>
 800c46e:	692a      	ldr	r2, [r5, #16]
 800c470:	3202      	adds	r2, #2
 800c472:	f105 010c 	add.w	r1, r5, #12
 800c476:	4683      	mov	fp, r0
 800c478:	0092      	lsls	r2, r2, #2
 800c47a:	300c      	adds	r0, #12
 800c47c:	f7fc fd2a 	bl	8008ed4 <memcpy>
 800c480:	4629      	mov	r1, r5
 800c482:	9802      	ldr	r0, [sp, #8]
 800c484:	f7fc fd70 	bl	8008f68 <_Bfree>
 800c488:	465d      	mov	r5, fp
 800c48a:	692b      	ldr	r3, [r5, #16]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c492:	612a      	str	r2, [r5, #16]
 800c494:	2201      	movs	r2, #1
 800c496:	615a      	str	r2, [r3, #20]
 800c498:	2f02      	cmp	r7, #2
 800c49a:	f105 0214 	add.w	r2, r5, #20
 800c49e:	d111      	bne.n	800c4c4 <__gethex+0x3ee>
 800c4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	429e      	cmp	r6, r3
 800c4a8:	d127      	bne.n	800c4fa <__gethex+0x424>
 800c4aa:	1171      	asrs	r1, r6, #5
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	f006 061f 	and.w	r6, r6, #31
 800c4b2:	fa03 f606 	lsl.w	r6, r3, r6
 800c4b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4ba:	421e      	tst	r6, r3
 800c4bc:	bf0c      	ite	eq
 800c4be:	2702      	moveq	r7, #2
 800c4c0:	2701      	movne	r7, #1
 800c4c2:	e01a      	b.n	800c4fa <__gethex+0x424>
 800c4c4:	692b      	ldr	r3, [r5, #16]
 800c4c6:	459a      	cmp	sl, r3
 800c4c8:	da0a      	bge.n	800c4e0 <__gethex+0x40a>
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f7ff fdb7 	bl	800c040 <rshift>
 800c4d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4d6:	3401      	adds	r4, #1
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	f73f af2c 	bgt.w	800c336 <__gethex+0x260>
 800c4de:	e00b      	b.n	800c4f8 <__gethex+0x422>
 800c4e0:	f016 061f 	ands.w	r6, r6, #31
 800c4e4:	d008      	beq.n	800c4f8 <__gethex+0x422>
 800c4e6:	4491      	add	r9, r2
 800c4e8:	f1c6 0620 	rsb	r6, r6, #32
 800c4ec:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800c4f0:	f7fc fdca 	bl	8009088 <__hi0bits>
 800c4f4:	42b0      	cmp	r0, r6
 800c4f6:	dbe8      	blt.n	800c4ca <__gethex+0x3f4>
 800c4f8:	2701      	movs	r7, #1
 800c4fa:	f047 0720 	orr.w	r7, r7, #32
 800c4fe:	e001      	b.n	800c504 <__gethex+0x42e>
 800c500:	f047 0710 	orr.w	r7, r7, #16
 800c504:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c506:	601d      	str	r5, [r3, #0]
 800c508:	9b06      	ldr	r3, [sp, #24]
 800c50a:	4638      	mov	r0, r7
 800c50c:	601c      	str	r4, [r3, #0]
 800c50e:	b00b      	add	sp, #44	; 0x2c
 800c510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c514 <L_shift>:
 800c514:	f1c2 0208 	rsb	r2, r2, #8
 800c518:	0092      	lsls	r2, r2, #2
 800c51a:	b570      	push	{r4, r5, r6, lr}
 800c51c:	f1c2 0620 	rsb	r6, r2, #32
 800c520:	6843      	ldr	r3, [r0, #4]
 800c522:	6805      	ldr	r5, [r0, #0]
 800c524:	fa03 f406 	lsl.w	r4, r3, r6
 800c528:	432c      	orrs	r4, r5
 800c52a:	40d3      	lsrs	r3, r2
 800c52c:	6004      	str	r4, [r0, #0]
 800c52e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c532:	4288      	cmp	r0, r1
 800c534:	d3f4      	bcc.n	800c520 <L_shift+0xc>
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <__match>:
 800c538:	b530      	push	{r4, r5, lr}
 800c53a:	6803      	ldr	r3, [r0, #0]
 800c53c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c540:	3301      	adds	r3, #1
 800c542:	b14c      	cbz	r4, 800c558 <__match+0x20>
 800c544:	781a      	ldrb	r2, [r3, #0]
 800c546:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c54a:	2d19      	cmp	r5, #25
 800c54c:	bf98      	it	ls
 800c54e:	3220      	addls	r2, #32
 800c550:	42a2      	cmp	r2, r4
 800c552:	d0f3      	beq.n	800c53c <__match+0x4>
 800c554:	2000      	movs	r0, #0
 800c556:	bd30      	pop	{r4, r5, pc}
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	2001      	movs	r0, #1
 800c55c:	bd30      	pop	{r4, r5, pc}

0800c55e <__hexnan>:
 800c55e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c562:	680b      	ldr	r3, [r1, #0]
 800c564:	f8d0 b000 	ldr.w	fp, [r0]
 800c568:	115e      	asrs	r6, r3, #5
 800c56a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c56e:	f013 031f 	ands.w	r3, r3, #31
 800c572:	b085      	sub	sp, #20
 800c574:	bf18      	it	ne
 800c576:	3604      	addne	r6, #4
 800c578:	1f35      	subs	r5, r6, #4
 800c57a:	4617      	mov	r7, r2
 800c57c:	2200      	movs	r2, #0
 800c57e:	4682      	mov	sl, r0
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	f846 2c04 	str.w	r2, [r6, #-4]
 800c586:	46a8      	mov	r8, r5
 800c588:	462c      	mov	r4, r5
 800c58a:	9200      	str	r2, [sp, #0]
 800c58c:	4691      	mov	r9, r2
 800c58e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 800c592:	2900      	cmp	r1, #0
 800c594:	d03c      	beq.n	800c610 <__hexnan+0xb2>
 800c596:	4608      	mov	r0, r1
 800c598:	9203      	str	r2, [sp, #12]
 800c59a:	9102      	str	r1, [sp, #8]
 800c59c:	f7ff fd86 	bl	800c0ac <__hexdig_fun>
 800c5a0:	9a03      	ldr	r2, [sp, #12]
 800c5a2:	bb00      	cbnz	r0, 800c5e6 <__hexnan+0x88>
 800c5a4:	9902      	ldr	r1, [sp, #8]
 800c5a6:	2920      	cmp	r1, #32
 800c5a8:	d816      	bhi.n	800c5d8 <__hexnan+0x7a>
 800c5aa:	9b00      	ldr	r3, [sp, #0]
 800c5ac:	4599      	cmp	r9, r3
 800c5ae:	ddee      	ble.n	800c58e <__hexnan+0x30>
 800c5b0:	4544      	cmp	r4, r8
 800c5b2:	d205      	bcs.n	800c5c0 <__hexnan+0x62>
 800c5b4:	2a07      	cmp	r2, #7
 800c5b6:	dc03      	bgt.n	800c5c0 <__hexnan+0x62>
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff ffaa 	bl	800c514 <L_shift>
 800c5c0:	42bc      	cmp	r4, r7
 800c5c2:	d923      	bls.n	800c60c <__hexnan+0xae>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f1a4 0804 	sub.w	r8, r4, #4
 800c5ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5ce:	f8cd 9000 	str.w	r9, [sp]
 800c5d2:	4644      	mov	r4, r8
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	e7da      	b.n	800c58e <__hexnan+0x30>
 800c5d8:	2929      	cmp	r1, #41	; 0x29
 800c5da:	d148      	bne.n	800c66e <__hexnan+0x110>
 800c5dc:	f10b 0301 	add.w	r3, fp, #1
 800c5e0:	f8ca 3000 	str.w	r3, [sl]
 800c5e4:	e014      	b.n	800c610 <__hexnan+0xb2>
 800c5e6:	3201      	adds	r2, #1
 800c5e8:	2a08      	cmp	r2, #8
 800c5ea:	f109 0901 	add.w	r9, r9, #1
 800c5ee:	dd06      	ble.n	800c5fe <__hexnan+0xa0>
 800c5f0:	42bc      	cmp	r4, r7
 800c5f2:	d9cc      	bls.n	800c58e <__hexnan+0x30>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	3c04      	subs	r4, #4
 800c5fe:	6821      	ldr	r1, [r4, #0]
 800c600:	f000 000f 	and.w	r0, r0, #15
 800c604:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 800c608:	6020      	str	r0, [r4, #0]
 800c60a:	e7c0      	b.n	800c58e <__hexnan+0x30>
 800c60c:	2208      	movs	r2, #8
 800c60e:	e7be      	b.n	800c58e <__hexnan+0x30>
 800c610:	f1b9 0f00 	cmp.w	r9, #0
 800c614:	d02b      	beq.n	800c66e <__hexnan+0x110>
 800c616:	4544      	cmp	r4, r8
 800c618:	d205      	bcs.n	800c626 <__hexnan+0xc8>
 800c61a:	2a07      	cmp	r2, #7
 800c61c:	dc03      	bgt.n	800c626 <__hexnan+0xc8>
 800c61e:	4641      	mov	r1, r8
 800c620:	4620      	mov	r0, r4
 800c622:	f7ff ff77 	bl	800c514 <L_shift>
 800c626:	42bc      	cmp	r4, r7
 800c628:	d90c      	bls.n	800c644 <__hexnan+0xe6>
 800c62a:	463b      	mov	r3, r7
 800c62c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c630:	f843 2b04 	str.w	r2, [r3], #4
 800c634:	42a5      	cmp	r5, r4
 800c636:	d2f9      	bcs.n	800c62c <__hexnan+0xce>
 800c638:	2200      	movs	r2, #0
 800c63a:	f843 2b04 	str.w	r2, [r3], #4
 800c63e:	429d      	cmp	r5, r3
 800c640:	d2fb      	bcs.n	800c63a <__hexnan+0xdc>
 800c642:	e00b      	b.n	800c65c <__hexnan+0xfe>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	b14b      	cbz	r3, 800c65c <__hexnan+0xfe>
 800c648:	f1c3 0220 	rsb	r2, r3, #32
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295
 800c650:	40d3      	lsrs	r3, r2
 800c652:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c656:	4013      	ands	r3, r2
 800c658:	f846 3c04 	str.w	r3, [r6, #-4]
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	b943      	cbnz	r3, 800c672 <__hexnan+0x114>
 800c660:	42bd      	cmp	r5, r7
 800c662:	d102      	bne.n	800c66a <__hexnan+0x10c>
 800c664:	2301      	movs	r3, #1
 800c666:	602b      	str	r3, [r5, #0]
 800c668:	e003      	b.n	800c672 <__hexnan+0x114>
 800c66a:	3d04      	subs	r5, #4
 800c66c:	e7f6      	b.n	800c65c <__hexnan+0xfe>
 800c66e:	2004      	movs	r0, #4
 800c670:	e000      	b.n	800c674 <__hexnan+0x116>
 800c672:	2005      	movs	r0, #5
 800c674:	b005      	add	sp, #20
 800c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c67c <_isatty_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	4c06      	ldr	r4, [pc, #24]	; (800c698 <_isatty_r+0x1c>)
 800c680:	2300      	movs	r3, #0
 800c682:	4605      	mov	r5, r0
 800c684:	4608      	mov	r0, r1
 800c686:	6023      	str	r3, [r4, #0]
 800c688:	f000 fb12 	bl	800ccb0 <_isatty>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d102      	bne.n	800c696 <_isatty_r+0x1a>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	b103      	cbz	r3, 800c696 <_isatty_r+0x1a>
 800c694:	602b      	str	r3, [r5, #0]
 800c696:	bd38      	pop	{r3, r4, r5, pc}
 800c698:	20001284 	.word	0x20001284

0800c69c <_lseek_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4c07      	ldr	r4, [pc, #28]	; (800c6bc <_lseek_r+0x20>)
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	6022      	str	r2, [r4, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f000 fb08 	bl	800ccc0 <_lseek>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d102      	bne.n	800c6ba <_lseek_r+0x1e>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	b103      	cbz	r3, 800c6ba <_lseek_r+0x1e>
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	20001284 	.word	0x20001284

0800c6c0 <memmove>:
 800c6c0:	4288      	cmp	r0, r1
 800c6c2:	b510      	push	{r4, lr}
 800c6c4:	eb01 0302 	add.w	r3, r1, r2
 800c6c8:	d801      	bhi.n	800c6ce <memmove+0xe>
 800c6ca:	1e42      	subs	r2, r0, #1
 800c6cc:	e00b      	b.n	800c6e6 <memmove+0x26>
 800c6ce:	4298      	cmp	r0, r3
 800c6d0:	d2fb      	bcs.n	800c6ca <memmove+0xa>
 800c6d2:	1881      	adds	r1, r0, r2
 800c6d4:	1ad2      	subs	r2, r2, r3
 800c6d6:	42d3      	cmn	r3, r2
 800c6d8:	d004      	beq.n	800c6e4 <memmove+0x24>
 800c6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c6e2:	e7f8      	b.n	800c6d6 <memmove+0x16>
 800c6e4:	bd10      	pop	{r4, pc}
 800c6e6:	4299      	cmp	r1, r3
 800c6e8:	d004      	beq.n	800c6f4 <memmove+0x34>
 800c6ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c6f2:	e7f8      	b.n	800c6e6 <memmove+0x26>
 800c6f4:	bd10      	pop	{r4, pc}
	...

0800c6f8 <_realloc_r>:
 800c6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	4681      	mov	r9, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	b929      	cbnz	r1, 800c70e <_realloc_r+0x16>
 800c702:	4611      	mov	r1, r2
 800c704:	b003      	add	sp, #12
 800c706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	f7fc b989 	b.w	8008a20 <_malloc_r>
 800c70e:	9201      	str	r2, [sp, #4]
 800c710:	f7fc fbf3 	bl	8008efa <__malloc_lock>
 800c714:	9a01      	ldr	r2, [sp, #4]
 800c716:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800c71a:	f102 080b 	add.w	r8, r2, #11
 800c71e:	f1b8 0f16 	cmp.w	r8, #22
 800c722:	f1a4 0b08 	sub.w	fp, r4, #8
 800c726:	f02e 0503 	bic.w	r5, lr, #3
 800c72a:	d903      	bls.n	800c734 <_realloc_r+0x3c>
 800c72c:	f038 0807 	bics.w	r8, r8, #7
 800c730:	d502      	bpl.n	800c738 <_realloc_r+0x40>
 800c732:	e003      	b.n	800c73c <_realloc_r+0x44>
 800c734:	f04f 0810 	mov.w	r8, #16
 800c738:	4590      	cmp	r8, r2
 800c73a:	d204      	bcs.n	800c746 <_realloc_r+0x4e>
 800c73c:	230c      	movs	r3, #12
 800c73e:	f8c9 3000 	str.w	r3, [r9]
 800c742:	2000      	movs	r0, #0
 800c744:	e17d      	b.n	800ca42 <_realloc_r+0x34a>
 800c746:	45a8      	cmp	r8, r5
 800c748:	f340 8150 	ble.w	800c9ec <_realloc_r+0x2f4>
 800c74c:	4ba6      	ldr	r3, [pc, #664]	; (800c9e8 <_realloc_r+0x2f0>)
 800c74e:	6898      	ldr	r0, [r3, #8]
 800c750:	eb0b 0105 	add.w	r1, fp, r5
 800c754:	4281      	cmp	r1, r0
 800c756:	684f      	ldr	r7, [r1, #4]
 800c758:	d005      	beq.n	800c766 <_realloc_r+0x6e>
 800c75a:	f027 0601 	bic.w	r6, r7, #1
 800c75e:	440e      	add	r6, r1
 800c760:	6876      	ldr	r6, [r6, #4]
 800c762:	07f6      	lsls	r6, r6, #31
 800c764:	d426      	bmi.n	800c7b4 <_realloc_r+0xbc>
 800c766:	f027 0a03 	bic.w	sl, r7, #3
 800c76a:	4281      	cmp	r1, r0
 800c76c:	eb05 070a 	add.w	r7, r5, sl
 800c770:	d118      	bne.n	800c7a4 <_realloc_r+0xac>
 800c772:	f108 0610 	add.w	r6, r8, #16
 800c776:	42b7      	cmp	r7, r6
 800c778:	db1f      	blt.n	800c7ba <_realloc_r+0xc2>
 800c77a:	eb0b 0008 	add.w	r0, fp, r8
 800c77e:	ebc8 0707 	rsb	r7, r8, r7
 800c782:	f047 0701 	orr.w	r7, r7, #1
 800c786:	6098      	str	r0, [r3, #8]
 800c788:	6047      	str	r7, [r0, #4]
 800c78a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	ea43 0308 	orr.w	r3, r3, r8
 800c796:	4648      	mov	r0, r9
 800c798:	f844 3c04 	str.w	r3, [r4, #-4]
 800c79c:	f7fc fbae 	bl	8008efc <__malloc_unlock>
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	e14e      	b.n	800ca42 <_realloc_r+0x34a>
 800c7a4:	45b8      	cmp	r8, r7
 800c7a6:	dc08      	bgt.n	800c7ba <_realloc_r+0xc2>
 800c7a8:	68cb      	ldr	r3, [r1, #12]
 800c7aa:	688a      	ldr	r2, [r1, #8]
 800c7ac:	463d      	mov	r5, r7
 800c7ae:	60d3      	str	r3, [r2, #12]
 800c7b0:	609a      	str	r2, [r3, #8]
 800c7b2:	e11b      	b.n	800c9ec <_realloc_r+0x2f4>
 800c7b4:	f04f 0a00 	mov.w	sl, #0
 800c7b8:	4651      	mov	r1, sl
 800c7ba:	f01e 0f01 	tst.w	lr, #1
 800c7be:	f040 80c3 	bne.w	800c948 <_realloc_r+0x250>
 800c7c2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800c7c6:	ebc7 070b 	rsb	r7, r7, fp
 800c7ca:	687e      	ldr	r6, [r7, #4]
 800c7cc:	f026 0603 	bic.w	r6, r6, #3
 800c7d0:	442e      	add	r6, r5
 800c7d2:	2900      	cmp	r1, #0
 800c7d4:	f000 8083 	beq.w	800c8de <_realloc_r+0x1e6>
 800c7d8:	4281      	cmp	r1, r0
 800c7da:	44b2      	add	sl, r6
 800c7dc:	d147      	bne.n	800c86e <_realloc_r+0x176>
 800c7de:	f108 0110 	add.w	r1, r8, #16
 800c7e2:	458a      	cmp	sl, r1
 800c7e4:	db7b      	blt.n	800c8de <_realloc_r+0x1e6>
 800c7e6:	463e      	mov	r6, r7
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800c7ee:	60ca      	str	r2, [r1, #12]
 800c7f0:	6091      	str	r1, [r2, #8]
 800c7f2:	1f2a      	subs	r2, r5, #4
 800c7f4:	2a24      	cmp	r2, #36	; 0x24
 800c7f6:	d825      	bhi.n	800c844 <_realloc_r+0x14c>
 800c7f8:	2a13      	cmp	r2, #19
 800c7fa:	d91b      	bls.n	800c834 <_realloc_r+0x13c>
 800c7fc:	6821      	ldr	r1, [r4, #0]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	6861      	ldr	r1, [r4, #4]
 800c802:	60f9      	str	r1, [r7, #12]
 800c804:	2a1b      	cmp	r2, #27
 800c806:	d803      	bhi.n	800c810 <_realloc_r+0x118>
 800c808:	f107 0210 	add.w	r2, r7, #16
 800c80c:	3408      	adds	r4, #8
 800c80e:	e012      	b.n	800c836 <_realloc_r+0x13e>
 800c810:	68a1      	ldr	r1, [r4, #8]
 800c812:	6139      	str	r1, [r7, #16]
 800c814:	68e1      	ldr	r1, [r4, #12]
 800c816:	6179      	str	r1, [r7, #20]
 800c818:	2a24      	cmp	r2, #36	; 0x24
 800c81a:	bf01      	itttt	eq
 800c81c:	6922      	ldreq	r2, [r4, #16]
 800c81e:	61ba      	streq	r2, [r7, #24]
 800c820:	6961      	ldreq	r1, [r4, #20]
 800c822:	61f9      	streq	r1, [r7, #28]
 800c824:	bf19      	ittee	ne
 800c826:	f107 0218 	addne.w	r2, r7, #24
 800c82a:	3410      	addne	r4, #16
 800c82c:	f107 0220 	addeq.w	r2, r7, #32
 800c830:	3418      	addeq	r4, #24
 800c832:	e000      	b.n	800c836 <_realloc_r+0x13e>
 800c834:	4632      	mov	r2, r6
 800c836:	6821      	ldr	r1, [r4, #0]
 800c838:	6011      	str	r1, [r2, #0]
 800c83a:	6861      	ldr	r1, [r4, #4]
 800c83c:	6051      	str	r1, [r2, #4]
 800c83e:	68a1      	ldr	r1, [r4, #8]
 800c840:	6091      	str	r1, [r2, #8]
 800c842:	e005      	b.n	800c850 <_realloc_r+0x158>
 800c844:	4621      	mov	r1, r4
 800c846:	4630      	mov	r0, r6
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	f7ff ff39 	bl	800c6c0 <memmove>
 800c84e:	9b01      	ldr	r3, [sp, #4]
 800c850:	eb07 0208 	add.w	r2, r7, r8
 800c854:	ebc8 0a0a 	rsb	sl, r8, sl
 800c858:	609a      	str	r2, [r3, #8]
 800c85a:	f04a 0301 	orr.w	r3, sl, #1
 800c85e:	6053      	str	r3, [r2, #4]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	ea43 0308 	orr.w	r3, r3, r8
 800c86a:	607b      	str	r3, [r7, #4]
 800c86c:	e0b6      	b.n	800c9dc <_realloc_r+0x2e4>
 800c86e:	45d0      	cmp	r8, sl
 800c870:	dc35      	bgt.n	800c8de <_realloc_r+0x1e6>
 800c872:	68cb      	ldr	r3, [r1, #12]
 800c874:	688a      	ldr	r2, [r1, #8]
 800c876:	4638      	mov	r0, r7
 800c878:	60d3      	str	r3, [r2, #12]
 800c87a:	609a      	str	r2, [r3, #8]
 800c87c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	60d3      	str	r3, [r2, #12]
 800c884:	609a      	str	r2, [r3, #8]
 800c886:	1f2a      	subs	r2, r5, #4
 800c888:	2a24      	cmp	r2, #36	; 0x24
 800c88a:	d823      	bhi.n	800c8d4 <_realloc_r+0x1dc>
 800c88c:	2a13      	cmp	r2, #19
 800c88e:	d91a      	bls.n	800c8c6 <_realloc_r+0x1ce>
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	60bb      	str	r3, [r7, #8]
 800c894:	6863      	ldr	r3, [r4, #4]
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	2a1b      	cmp	r2, #27
 800c89a:	d803      	bhi.n	800c8a4 <_realloc_r+0x1ac>
 800c89c:	f107 0010 	add.w	r0, r7, #16
 800c8a0:	3408      	adds	r4, #8
 800c8a2:	e010      	b.n	800c8c6 <_realloc_r+0x1ce>
 800c8a4:	68a3      	ldr	r3, [r4, #8]
 800c8a6:	613b      	str	r3, [r7, #16]
 800c8a8:	68e3      	ldr	r3, [r4, #12]
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	2a24      	cmp	r2, #36	; 0x24
 800c8ae:	bf01      	itttt	eq
 800c8b0:	6923      	ldreq	r3, [r4, #16]
 800c8b2:	61bb      	streq	r3, [r7, #24]
 800c8b4:	6963      	ldreq	r3, [r4, #20]
 800c8b6:	61fb      	streq	r3, [r7, #28]
 800c8b8:	bf19      	ittee	ne
 800c8ba:	f107 0018 	addne.w	r0, r7, #24
 800c8be:	3410      	addne	r4, #16
 800c8c0:	f107 0020 	addeq.w	r0, r7, #32
 800c8c4:	3418      	addeq	r4, #24
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	6863      	ldr	r3, [r4, #4]
 800c8cc:	6043      	str	r3, [r0, #4]
 800c8ce:	68a3      	ldr	r3, [r4, #8]
 800c8d0:	6083      	str	r3, [r0, #8]
 800c8d2:	e002      	b.n	800c8da <_realloc_r+0x1e2>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	f7ff fef3 	bl	800c6c0 <memmove>
 800c8da:	4655      	mov	r5, sl
 800c8dc:	e02e      	b.n	800c93c <_realloc_r+0x244>
 800c8de:	45b0      	cmp	r8, r6
 800c8e0:	dc32      	bgt.n	800c948 <_realloc_r+0x250>
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c8ea:	60d3      	str	r3, [r2, #12]
 800c8ec:	609a      	str	r2, [r3, #8]
 800c8ee:	1f2a      	subs	r2, r5, #4
 800c8f0:	2a24      	cmp	r2, #36	; 0x24
 800c8f2:	d825      	bhi.n	800c940 <_realloc_r+0x248>
 800c8f4:	2a13      	cmp	r2, #19
 800c8f6:	d91a      	bls.n	800c92e <_realloc_r+0x236>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	60bb      	str	r3, [r7, #8]
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	2a1b      	cmp	r2, #27
 800c902:	d803      	bhi.n	800c90c <_realloc_r+0x214>
 800c904:	f107 0010 	add.w	r0, r7, #16
 800c908:	3408      	adds	r4, #8
 800c90a:	e010      	b.n	800c92e <_realloc_r+0x236>
 800c90c:	68a3      	ldr	r3, [r4, #8]
 800c90e:	613b      	str	r3, [r7, #16]
 800c910:	68e3      	ldr	r3, [r4, #12]
 800c912:	617b      	str	r3, [r7, #20]
 800c914:	2a24      	cmp	r2, #36	; 0x24
 800c916:	bf01      	itttt	eq
 800c918:	6923      	ldreq	r3, [r4, #16]
 800c91a:	61bb      	streq	r3, [r7, #24]
 800c91c:	6963      	ldreq	r3, [r4, #20]
 800c91e:	61fb      	streq	r3, [r7, #28]
 800c920:	bf19      	ittee	ne
 800c922:	f107 0018 	addne.w	r0, r7, #24
 800c926:	3410      	addne	r4, #16
 800c928:	f107 0020 	addeq.w	r0, r7, #32
 800c92c:	3418      	addeq	r4, #24
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	6003      	str	r3, [r0, #0]
 800c932:	6863      	ldr	r3, [r4, #4]
 800c934:	6043      	str	r3, [r0, #4]
 800c936:	68a3      	ldr	r3, [r4, #8]
 800c938:	6083      	str	r3, [r0, #8]
 800c93a:	4635      	mov	r5, r6
 800c93c:	46bb      	mov	fp, r7
 800c93e:	e055      	b.n	800c9ec <_realloc_r+0x2f4>
 800c940:	4621      	mov	r1, r4
 800c942:	f7ff febd 	bl	800c6c0 <memmove>
 800c946:	e7f8      	b.n	800c93a <_realloc_r+0x242>
 800c948:	4611      	mov	r1, r2
 800c94a:	4648      	mov	r0, r9
 800c94c:	f7fc f868 	bl	8008a20 <_malloc_r>
 800c950:	4606      	mov	r6, r0
 800c952:	2800      	cmp	r0, #0
 800c954:	d042      	beq.n	800c9dc <_realloc_r+0x2e4>
 800c956:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c95a:	f023 0301 	bic.w	r3, r3, #1
 800c95e:	f1a0 0208 	sub.w	r2, r0, #8
 800c962:	445b      	add	r3, fp
 800c964:	429a      	cmp	r2, r3
 800c966:	d105      	bne.n	800c974 <_realloc_r+0x27c>
 800c968:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c96c:	f023 0303 	bic.w	r3, r3, #3
 800c970:	441d      	add	r5, r3
 800c972:	e03b      	b.n	800c9ec <_realloc_r+0x2f4>
 800c974:	1f2a      	subs	r2, r5, #4
 800c976:	2a24      	cmp	r2, #36	; 0x24
 800c978:	d829      	bhi.n	800c9ce <_realloc_r+0x2d6>
 800c97a:	2a13      	cmp	r2, #19
 800c97c:	d91e      	bls.n	800c9bc <_realloc_r+0x2c4>
 800c97e:	6823      	ldr	r3, [r4, #0]
 800c980:	6003      	str	r3, [r0, #0]
 800c982:	6863      	ldr	r3, [r4, #4]
 800c984:	6043      	str	r3, [r0, #4]
 800c986:	2a1b      	cmp	r2, #27
 800c988:	d804      	bhi.n	800c994 <_realloc_r+0x29c>
 800c98a:	f100 0308 	add.w	r3, r0, #8
 800c98e:	f104 0208 	add.w	r2, r4, #8
 800c992:	e015      	b.n	800c9c0 <_realloc_r+0x2c8>
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	6083      	str	r3, [r0, #8]
 800c998:	68e3      	ldr	r3, [r4, #12]
 800c99a:	60c3      	str	r3, [r0, #12]
 800c99c:	2a24      	cmp	r2, #36	; 0x24
 800c99e:	bf01      	itttt	eq
 800c9a0:	6923      	ldreq	r3, [r4, #16]
 800c9a2:	6103      	streq	r3, [r0, #16]
 800c9a4:	6961      	ldreq	r1, [r4, #20]
 800c9a6:	6141      	streq	r1, [r0, #20]
 800c9a8:	bf19      	ittee	ne
 800c9aa:	f100 0310 	addne.w	r3, r0, #16
 800c9ae:	f104 0210 	addne.w	r2, r4, #16
 800c9b2:	f100 0318 	addeq.w	r3, r0, #24
 800c9b6:	f104 0218 	addeq.w	r2, r4, #24
 800c9ba:	e001      	b.n	800c9c0 <_realloc_r+0x2c8>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	4622      	mov	r2, r4
 800c9c0:	6811      	ldr	r1, [r2, #0]
 800c9c2:	6019      	str	r1, [r3, #0]
 800c9c4:	6851      	ldr	r1, [r2, #4]
 800c9c6:	6059      	str	r1, [r3, #4]
 800c9c8:	6892      	ldr	r2, [r2, #8]
 800c9ca:	609a      	str	r2, [r3, #8]
 800c9cc:	e002      	b.n	800c9d4 <_realloc_r+0x2dc>
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	f7ff fe76 	bl	800c6c0 <memmove>
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	4648      	mov	r0, r9
 800c9d8:	f7fb fe9e 	bl	8008718 <_free_r>
 800c9dc:	4648      	mov	r0, r9
 800c9de:	f7fc fa8d 	bl	8008efc <__malloc_unlock>
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	e02d      	b.n	800ca42 <_realloc_r+0x34a>
 800c9e6:	bf00      	nop
 800c9e8:	200002ac 	.word	0x200002ac
 800c9ec:	ebc8 0205 	rsb	r2, r8, r5
 800c9f0:	2a0f      	cmp	r2, #15
 800c9f2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c9f6:	d914      	bls.n	800ca22 <_realloc_r+0x32a>
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	eb0b 0108 	add.w	r1, fp, r8
 800ca00:	ea43 0308 	orr.w	r3, r3, r8
 800ca04:	f8cb 3004 	str.w	r3, [fp, #4]
 800ca08:	f042 0301 	orr.w	r3, r2, #1
 800ca0c:	440a      	add	r2, r1
 800ca0e:	604b      	str	r3, [r1, #4]
 800ca10:	6853      	ldr	r3, [r2, #4]
 800ca12:	f043 0301 	orr.w	r3, r3, #1
 800ca16:	6053      	str	r3, [r2, #4]
 800ca18:	3108      	adds	r1, #8
 800ca1a:	4648      	mov	r0, r9
 800ca1c:	f7fb fe7c 	bl	8008718 <_free_r>
 800ca20:	e00a      	b.n	800ca38 <_realloc_r+0x340>
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	432b      	orrs	r3, r5
 800ca28:	eb0b 0205 	add.w	r2, fp, r5
 800ca2c:	f8cb 3004 	str.w	r3, [fp, #4]
 800ca30:	6853      	ldr	r3, [r2, #4]
 800ca32:	f043 0301 	orr.w	r3, r3, #1
 800ca36:	6053      	str	r3, [r2, #4]
 800ca38:	4648      	mov	r0, r9
 800ca3a:	f7fc fa5f 	bl	8008efc <__malloc_unlock>
 800ca3e:	f10b 0008 	add.w	r0, fp, #8
 800ca42:	b003      	add	sp, #12
 800ca44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca48 <strncmp>:
 800ca48:	b530      	push	{r4, r5, lr}
 800ca4a:	b182      	cbz	r2, 800ca6e <strncmp+0x26>
 800ca4c:	1e45      	subs	r5, r0, #1
 800ca4e:	3901      	subs	r1, #1
 800ca50:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800ca54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ca58:	42a3      	cmp	r3, r4
 800ca5a:	d106      	bne.n	800ca6a <strncmp+0x22>
 800ca5c:	43ec      	mvns	r4, r5
 800ca5e:	4414      	add	r4, r2
 800ca60:	42e0      	cmn	r0, r4
 800ca62:	d001      	beq.n	800ca68 <strncmp+0x20>
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1f3      	bne.n	800ca50 <strncmp+0x8>
 800ca68:	461c      	mov	r4, r3
 800ca6a:	1b18      	subs	r0, r3, r4
 800ca6c:	bd30      	pop	{r4, r5, pc}
 800ca6e:	4610      	mov	r0, r2
 800ca70:	bd30      	pop	{r4, r5, pc}

0800ca72 <__ssprint_r>:
 800ca72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca76:	4693      	mov	fp, r2
 800ca78:	6892      	ldr	r2, [r2, #8]
 800ca7a:	4681      	mov	r9, r0
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	b34a      	cbz	r2, 800cad4 <__ssprint_r+0x62>
 800ca80:	2300      	movs	r3, #0
 800ca82:	f8db a000 	ldr.w	sl, [fp]
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	461f      	mov	r7, r3
 800ca8a:	e006      	b.n	800ca9a <__ssprint_r+0x28>
 800ca8c:	f8da 3000 	ldr.w	r3, [sl]
 800ca90:	f8da 7004 	ldr.w	r7, [sl, #4]
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	f10a 0a08 	add.w	sl, sl, #8
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	d0f6      	beq.n	800ca8c <__ssprint_r+0x1a>
 800ca9e:	68a6      	ldr	r6, [r4, #8]
 800caa0:	42b7      	cmp	r7, r6
 800caa2:	d360      	bcc.n	800cb66 <__ssprint_r+0xf4>
 800caa4:	89a0      	ldrh	r0, [r4, #12]
 800caa6:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800caaa:	d117      	bne.n	800cadc <__ssprint_r+0x6a>
 800caac:	42b7      	cmp	r7, r6
 800caae:	d35a      	bcc.n	800cb66 <__ssprint_r+0xf4>
 800cab0:	4632      	mov	r2, r6
 800cab2:	9901      	ldr	r1, [sp, #4]
 800cab4:	6820      	ldr	r0, [r4, #0]
 800cab6:	f7ff fe03 	bl	800c6c0 <memmove>
 800caba:	68a2      	ldr	r2, [r4, #8]
 800cabc:	1b92      	subs	r2, r2, r6
 800cabe:	60a2      	str	r2, [r4, #8]
 800cac0:	6822      	ldr	r2, [r4, #0]
 800cac2:	4416      	add	r6, r2
 800cac4:	f8db 2008 	ldr.w	r2, [fp, #8]
 800cac8:	6026      	str	r6, [r4, #0]
 800caca:	1bd7      	subs	r7, r2, r7
 800cacc:	f8cb 7008 	str.w	r7, [fp, #8]
 800cad0:	2f00      	cmp	r7, #0
 800cad2:	d1db      	bne.n	800ca8c <__ssprint_r+0x1a>
 800cad4:	2000      	movs	r0, #0
 800cad6:	f8cb 0004 	str.w	r0, [fp, #4]
 800cada:	e046      	b.n	800cb6a <__ssprint_r+0xf8>
 800cadc:	6825      	ldr	r5, [r4, #0]
 800cade:	6921      	ldr	r1, [r4, #16]
 800cae0:	ebc1 0805 	rsb	r8, r1, r5
 800cae4:	f108 0201 	add.w	r2, r8, #1
 800cae8:	6965      	ldr	r5, [r4, #20]
 800caea:	443a      	add	r2, r7
 800caec:	2302      	movs	r3, #2
 800caee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caf2:	fb95 f5f3 	sdiv	r5, r5, r3
 800caf6:	4295      	cmp	r5, r2
 800caf8:	bf38      	it	cc
 800cafa:	4615      	movcc	r5, r2
 800cafc:	0543      	lsls	r3, r0, #21
 800cafe:	d510      	bpl.n	800cb22 <__ssprint_r+0xb0>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4648      	mov	r0, r9
 800cb04:	f7fb ff8c 	bl	8008a20 <_malloc_r>
 800cb08:	4606      	mov	r6, r0
 800cb0a:	b1a0      	cbz	r0, 800cb36 <__ssprint_r+0xc4>
 800cb0c:	4642      	mov	r2, r8
 800cb0e:	6921      	ldr	r1, [r4, #16]
 800cb10:	f7fc f9e0 	bl	8008ed4 <memcpy>
 800cb14:	89a2      	ldrh	r2, [r4, #12]
 800cb16:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800cb1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb1e:	81a2      	strh	r2, [r4, #12]
 800cb20:	e018      	b.n	800cb54 <__ssprint_r+0xe2>
 800cb22:	462a      	mov	r2, r5
 800cb24:	4648      	mov	r0, r9
 800cb26:	f7ff fde7 	bl	800c6f8 <_realloc_r>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	b990      	cbnz	r0, 800cb54 <__ssprint_r+0xe2>
 800cb2e:	6921      	ldr	r1, [r4, #16]
 800cb30:	4648      	mov	r0, r9
 800cb32:	f7fb fdf1 	bl	8008718 <_free_r>
 800cb36:	220c      	movs	r2, #12
 800cb38:	f8c9 2000 	str.w	r2, [r9]
 800cb3c:	89a2      	ldrh	r2, [r4, #12]
 800cb3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb42:	81a2      	strh	r2, [r4, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f8cb 2008 	str.w	r2, [fp, #8]
 800cb4a:	f8cb 2004 	str.w	r2, [fp, #4]
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	e00a      	b.n	800cb6a <__ssprint_r+0xf8>
 800cb54:	6126      	str	r6, [r4, #16]
 800cb56:	6165      	str	r5, [r4, #20]
 800cb58:	4446      	add	r6, r8
 800cb5a:	ebc8 0505 	rsb	r5, r8, r5
 800cb5e:	6026      	str	r6, [r4, #0]
 800cb60:	60a5      	str	r5, [r4, #8]
 800cb62:	463e      	mov	r6, r7
 800cb64:	e7a2      	b.n	800caac <__ssprint_r+0x3a>
 800cb66:	463e      	mov	r6, r7
 800cb68:	e7a2      	b.n	800cab0 <__ssprint_r+0x3e>
 800cb6a:	b003      	add	sp, #12
 800cb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb70 <__swbuf_r>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	460f      	mov	r7, r1
 800cb74:	4614      	mov	r4, r2
 800cb76:	4606      	mov	r6, r0
 800cb78:	b118      	cbz	r0, 800cb82 <__swbuf_r+0x12>
 800cb7a:	6983      	ldr	r3, [r0, #24]
 800cb7c:	b90b      	cbnz	r3, 800cb82 <__swbuf_r+0x12>
 800cb7e:	f7fb fca3 	bl	80084c8 <__sinit>
 800cb82:	4b27      	ldr	r3, [pc, #156]	; (800cc20 <__swbuf_r+0xb0>)
 800cb84:	429c      	cmp	r4, r3
 800cb86:	d101      	bne.n	800cb8c <__swbuf_r+0x1c>
 800cb88:	6874      	ldr	r4, [r6, #4]
 800cb8a:	e008      	b.n	800cb9e <__swbuf_r+0x2e>
 800cb8c:	4b25      	ldr	r3, [pc, #148]	; (800cc24 <__swbuf_r+0xb4>)
 800cb8e:	429c      	cmp	r4, r3
 800cb90:	d101      	bne.n	800cb96 <__swbuf_r+0x26>
 800cb92:	68b4      	ldr	r4, [r6, #8]
 800cb94:	e003      	b.n	800cb9e <__swbuf_r+0x2e>
 800cb96:	4b24      	ldr	r3, [pc, #144]	; (800cc28 <__swbuf_r+0xb8>)
 800cb98:	429c      	cmp	r4, r3
 800cb9a:	bf08      	it	eq
 800cb9c:	68f4      	ldreq	r4, [r6, #12]
 800cb9e:	69a3      	ldr	r3, [r4, #24]
 800cba0:	60a3      	str	r3, [r4, #8]
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	0719      	lsls	r1, r3, #28
 800cba6:	d50e      	bpl.n	800cbc6 <__swbuf_r+0x56>
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	b163      	cbz	r3, 800cbc6 <__swbuf_r+0x56>
 800cbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb0:	049a      	lsls	r2, r3, #18
 800cbb2:	b2fd      	uxtb	r5, r7
 800cbb4:	d410      	bmi.n	800cbd8 <__swbuf_r+0x68>
 800cbb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbc2:	6663      	str	r3, [r4, #100]	; 0x64
 800cbc4:	e008      	b.n	800cbd8 <__swbuf_r+0x68>
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7fa fcd1 	bl	8007570 <__swsetup_r>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d0ec      	beq.n	800cbac <__swbuf_r+0x3c>
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	6920      	ldr	r0, [r4, #16]
 800cbdc:	1a18      	subs	r0, r3, r0
 800cbde:	6963      	ldr	r3, [r4, #20]
 800cbe0:	4298      	cmp	r0, r3
 800cbe2:	db05      	blt.n	800cbf0 <__swbuf_r+0x80>
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7fb fbf2 	bl	80083d0 <_fflush_r>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d1f0      	bne.n	800cbd2 <__swbuf_r+0x62>
 800cbf0:	68a3      	ldr	r3, [r4, #8]
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	60a3      	str	r3, [r4, #8]
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	6022      	str	r2, [r4, #0]
 800cbfc:	701f      	strb	r7, [r3, #0]
 800cbfe:	6962      	ldr	r2, [r4, #20]
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d004      	beq.n	800cc10 <__swbuf_r+0xa0>
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	07db      	lsls	r3, r3, #31
 800cc0a:	d507      	bpl.n	800cc1c <__swbuf_r+0xac>
 800cc0c:	2d0a      	cmp	r5, #10
 800cc0e:	d105      	bne.n	800cc1c <__swbuf_r+0xac>
 800cc10:	4621      	mov	r1, r4
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7fb fbdc 	bl	80083d0 <_fflush_r>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d1da      	bne.n	800cbd2 <__swbuf_r+0x62>
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc20:	0800cf30 	.word	0x0800cf30
 800cc24:	0800cf50 	.word	0x0800cf50
 800cc28:	0800cf70 	.word	0x0800cf70

0800cc2c <_wcrtomb_r>:
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	461d      	mov	r5, r3
 800cc32:	4b0f      	ldr	r3, [pc, #60]	; (800cc70 <_wcrtomb_r+0x44>)
 800cc34:	b086      	sub	sp, #24
 800cc36:	4604      	mov	r4, r0
 800cc38:	4690      	mov	r8, r2
 800cc3a:	460e      	mov	r6, r1
 800cc3c:	681f      	ldr	r7, [r3, #0]
 800cc3e:	b931      	cbnz	r1, 800cc4e <_wcrtomb_r+0x22>
 800cc40:	f7fb fe70 	bl	8008924 <__locale_charset>
 800cc44:	9500      	str	r5, [sp, #0]
 800cc46:	4603      	mov	r3, r0
 800cc48:	4632      	mov	r2, r6
 800cc4a:	a903      	add	r1, sp, #12
 800cc4c:	e005      	b.n	800cc5a <_wcrtomb_r+0x2e>
 800cc4e:	f7fb fe69 	bl	8008924 <__locale_charset>
 800cc52:	9500      	str	r5, [sp, #0]
 800cc54:	4603      	mov	r3, r0
 800cc56:	4642      	mov	r2, r8
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	47b8      	blx	r7
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	bf01      	itttt	eq
 800cc62:	2300      	moveq	r3, #0
 800cc64:	602b      	streq	r3, [r5, #0]
 800cc66:	238a      	moveq	r3, #138	; 0x8a
 800cc68:	6023      	streq	r3, [r4, #0]
 800cc6a:	b006      	add	sp, #24
 800cc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc70:	200006c0 	.word	0x200006c0

0800cc74 <__ascii_wctomb>:
 800cc74:	b149      	cbz	r1, 800cc8a <__ascii_wctomb+0x16>
 800cc76:	2aff      	cmp	r2, #255	; 0xff
 800cc78:	bf85      	ittet	hi
 800cc7a:	238a      	movhi	r3, #138	; 0x8a
 800cc7c:	6003      	strhi	r3, [r0, #0]
 800cc7e:	700a      	strbls	r2, [r1, #0]
 800cc80:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc84:	bf98      	it	ls
 800cc86:	2001      	movls	r0, #1
 800cc88:	4770      	bx	lr
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	4770      	bx	lr
	...

0800cc90 <_close>:
 800cc90:	4b02      	ldr	r3, [pc, #8]	; (800cc9c <_close+0xc>)
 800cc92:	2258      	movs	r2, #88	; 0x58
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9a:	4770      	bx	lr
 800cc9c:	20001284 	.word	0x20001284

0800cca0 <_fstat>:
 800cca0:	4b02      	ldr	r3, [pc, #8]	; (800ccac <_fstat+0xc>)
 800cca2:	2258      	movs	r2, #88	; 0x58
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccaa:	4770      	bx	lr
 800ccac:	20001284 	.word	0x20001284

0800ccb0 <_isatty>:
 800ccb0:	4b02      	ldr	r3, [pc, #8]	; (800ccbc <_isatty+0xc>)
 800ccb2:	2258      	movs	r2, #88	; 0x58
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	20001284 	.word	0x20001284

0800ccc0 <_lseek>:
 800ccc0:	4b02      	ldr	r3, [pc, #8]	; (800cccc <_lseek+0xc>)
 800ccc2:	2258      	movs	r2, #88	; 0x58
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccca:	4770      	bx	lr
 800cccc:	20001284 	.word	0x20001284

0800ccd0 <_sbrk>:
 800ccd0:	4b04      	ldr	r3, [pc, #16]	; (800cce4 <_sbrk+0x14>)
 800ccd2:	6819      	ldr	r1, [r3, #0]
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	b909      	cbnz	r1, 800ccdc <_sbrk+0xc>
 800ccd8:	4903      	ldr	r1, [pc, #12]	; (800cce8 <_sbrk+0x18>)
 800ccda:	6019      	str	r1, [r3, #0]
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	4402      	add	r2, r0
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	4770      	bx	lr
 800cce4:	20000954 	.word	0x20000954
 800cce8:	20001288 	.word	0x20001288

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
